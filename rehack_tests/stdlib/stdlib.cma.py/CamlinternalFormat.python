caml_blit_string = empty["caml_blit_string"]
caml_bytes_set = empty["caml_bytes_set"]
caml_create_bytes = empty["caml_create_bytes"]
caml_format_int = empty["caml_format_int"]
caml_ml_string_length = empty["caml_ml_string_length"]
string = empty["caml_new_string"]
caml_notequal = empty["caml_notequal"]
caml_string_get = empty["caml_string_get"]
caml_string_notequal = empty["caml_string_notequal"]
caml_trampoline = empty["caml_trampoline"]
caml_trampoline_return = empty["caml_trampoline_return"]
caml_wrap_exception = empty["caml_wrap_exception"]


def call1(f, a0):
    return f(a0) if arity_test is 1 else empty["caml_call_gen"](f, [a0])


def call2(f, a0, a1):
    return f(a0, a1) if arity_test is 2 else empty["caml_call_gen"](f, [a0, a1])


def call3(f, a0, a1, a2):
    return f(a0, a1, a2) if arity_test is 3 else empty["caml_call_gen"](f, [a0, a1, a2])


def call4(f, a0, a1, a2, a3):
    return (
        f(a0, a1, a2, a3)
        if arity_test is 4
        else empty["caml_call_gen"](f, [a0, a1, a2, a3])
    )


def call5(f, a0, a1, a2, a3, a4):
    return (
        f(a0, a1, a2, a3, a4)
        if arity_test is 5
        else empty["caml_call_gen"](f, [a0, a1, a2, a3, a4])
    )


global_data = empty["caml_get_global_data"]()
cst_c = string("%c")
cst_s = string("%s")
cst_i = string("%i")
cst_li = string("%li")
cst_ni = string("%ni")
cst_Li = string("%Li")
cst_f = string("%f")
cst_B = string("%B")
cst__9 = string("%{")
cst__10 = string("%}")
cst__11 = string("%(")
cst__12 = string("%)")
cst_a = string("%a")
cst_t = string("%t")
cst__13 = string("%?")
cst_r = string("%r")
cst_r__0 = string("%_r")
cst_u__0 = string("%u")
cst_Printf_bad_conversion = string("Printf: bad conversion %[")
cst_Printf_bad_conversion__0 = string("Printf: bad conversion %_")
cst__17 = string("@{")
cst__18 = string("@[")
cst__19 = string("@{")
cst__20 = string("@[")
cst__21 = string("@{")
cst__22 = string("@[")
cst_0 = string("0")
cst_padding = string("padding")
cst_precision = string("precision")
cst__27 = string("'*'")
cst__25 = string("'-'")
cst_0__2 = string("'0'")
cst__26 = string("'*'")
cst_0__0 = string("0")
cst_0__1 = string("0")
cst_precision__0 = string("precision")
cst_precision__1 = string("precision")
cst__28 = string("'+'")
cst__29 = string("'#'")
cst__30 = string("' '")
cst_padding__0 = string("`padding'")
cst_precision__2 = string("`precision'")
cst__31 = string("'+'")
cst__32 = string("'_'")
sub_format = [0, 0, string("")]
formatting_lit = [0, string("@;"), 1, 0]
cst_digit = string("digit")
cst_character = string("character ')'")
cst_character__0 = string("character '}'")
cst__36 = string("'#'")
cst__35 = string("'+'")
cst__34 = string("'+'")
cst__33 = string("' '")
cst__39 = string("'+'")
cst__38 = string("'+'")
cst__37 = string("' '")
cst_non_zero_widths_are_unsupported_for_c_conversions = string(
    "non-zero widths are unsupported for %c conversions"
)
cst_unexpected_end_of_format = string("unexpected end of format")
cst__23 = string("")
cst__24 = string("")
cst_b = string("b")
cst_h = string("h")
cst_hov = string("hov")
cst_hv = string("hv")
cst_v = string("v")
cst_nan = string("nan")
cst__16 = string(".")
cst_neg_infinity = string("neg_infinity")
cst_infinity = string("infinity")
cst_12g = string("%.12g")
cst_nd = string("%nd")
cst_nd__0 = string("%+nd")
cst_nd__1 = string("% nd")
cst_ni__0 = string("%ni")
cst_ni__1 = string("%+ni")
cst_ni__2 = string("% ni")
cst_nx = string("%nx")
cst_nx__0 = string("%#nx")
cst_nX = string("%nX")
cst_nX__0 = string("%#nX")
cst_no = string("%no")
cst_no__0 = string("%#no")
cst_nu = string("%nu")
cst_ld = string("%ld")
cst_ld__0 = string("%+ld")
cst_ld__1 = string("% ld")
cst_li__0 = string("%li")
cst_li__1 = string("%+li")
cst_li__2 = string("% li")
cst_lx = string("%lx")
cst_lx__0 = string("%#lx")
cst_lX = string("%lX")
cst_lX__0 = string("%#lX")
cst_lo = string("%lo")
cst_lo__0 = string("%#lo")
cst_lu = string("%lu")
cst_Ld = string("%Ld")
cst_Ld__0 = string("%+Ld")
cst_Ld__1 = string("% Ld")
cst_Li__0 = string("%Li")
cst_Li__1 = string("%+Li")
cst_Li__2 = string("% Li")
cst_Lx = string("%Lx")
cst_Lx__0 = string("%#Lx")
cst_LX = string("%LX")
cst_LX__0 = string("%#LX")
cst_Lo = string("%Lo")
cst_Lo__0 = string("%#Lo")
cst_Lu = string("%Lu")
cst_d = string("%d")
cst_d__0 = string("%+d")
cst_d__1 = string("% d")
cst_i__0 = string("%i")
cst_i__1 = string("%+i")
cst_i__2 = string("% i")
cst_x = string("%x")
cst_x__0 = string("%#x")
cst_X = string("%X")
cst_X__0 = string("%#X")
cst_o = string("%o")
cst_o__0 = string("%#o")
cst_u = string("%u")
cst__14 = string("%!")
cst__15 = string("@{")
cst_0c = string("0c")
cst__8 = string("%%")
cst__0 = string("@]")
cst__1 = string("@}")
cst__2 = string("@?")
cst__3 = string("@\n")
cst__4 = string("@.")
cst__5 = string("@@")
cst__6 = string("@%")
cst__7 = string("@")
cst = string(".*")
cst_CamlinternalFormat_Type_mismatch = string("CamlinternalFormat.Type_mismatch")
Assert_failure = global_data["Assert_failure"]
CamlinternalFormatBasics = global_data["CamlinternalFormatBasics"]
Pervasives = global_data["Pervasives"]
Buffer = global_data["Buffer"]
Failure = global_data["Failure"]
Not_found = global_data["Not_found"]
String = global_data["String_"]
Sys = global_data["Sys"]
Char = global_data["Char"]
Bytes = global_data["Bytes"]
b = [0, string("camlinternalFormat.ml"), 846, 23]
m = [0, string("camlinternalFormat.ml"), 810, 21]
e = [0, string("camlinternalFormat.ml"), 811, 21]
n = [0, string("camlinternalFormat.ml"), 814, 21]
f = [0, string("camlinternalFormat.ml"), 815, 21]
o = [0, string("camlinternalFormat.ml"), 818, 19]
g = [0, string("camlinternalFormat.ml"), 819, 19]
p = [0, string("camlinternalFormat.ml"), 822, 22]
h = [0, string("camlinternalFormat.ml"), 823, 22]
q = [0, string("camlinternalFormat.ml"), 827, 30]
i = [0, string("camlinternalFormat.ml"), 828, 30]
k = [0, string("camlinternalFormat.ml"), 832, 26]
c = [0, string("camlinternalFormat.ml"), 833, 26]
l = [0, string("camlinternalFormat.ml"), 842, 28]
d = [0, string("camlinternalFormat.ml"), 843, 28]
j = [0, string("camlinternalFormat.ml"), 847, 23]
r = [0, string("camlinternalFormat.ml"), 1525, 4]
s = [0, string("camlinternalFormat.ml"), 1593, 39]
t = [0, string("camlinternalFormat.ml"), 1616, 31]
u = [0, string("camlinternalFormat.ml"), 1617, 31]
v = [0, string("camlinternalFormat.ml"), 1797, 8]
Z = [
    0,
    [
        11,
        string("bad input: format type mismatch between "),
        [3, 0, [11, string(" and "), [3, 0, 0]]],
    ],
    string("bad input: format type mismatch between %S and %S"),
]
Y = [
    0,
    [
        11,
        string("bad input: format type mismatch between "),
        [3, 0, [11, string(" and "), [3, 0, 0]]],
    ],
    string("bad input: format type mismatch between %S and %S"),
]
B = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [4, 0, 0, 0, [11, string(", duplicate flag "), [1, 0]]],
            ],
        ],
    ],
    string("invalid format %S: at character number %d, duplicate flag %C"),
]
C = [0, 1, 0]
D = [0, 0]
F = [1, 0]
E = [1, 1]
H = [1, 1]
G = [1, 1]
L = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [
                    4,
                    0,
                    0,
                    0,
                    [
                        11,
                        string(", flag "),
                        [
                            1,
                            [
                                11,
                                string(" is only allowed after the '"),
                                [
                                    12,
                                    37,
                                    [11, string("', before padding and precision"), 0],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
    string(
        "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"
    ),
]
I = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [
                    4,
                    0,
                    0,
                    0,
                    [11, string(', invalid conversion "'), [12, 37, [0, [12, 34, 0]]]],
                ],
            ],
        ],
    ],
    string('invalid format %S: at character number %d, invalid conversion "%%%c"'),
]
J = [0, 0]
K = [0, 0]
M = [0, [12, 64, 0]]
N = [0, string("@ "), 1, 0]
O = [0, string("@,"), 0, 0]
P = [2, 60]
Q = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": '"),
                [
                    12,
                    37,
                    [
                        11,
                        string("' alone is not accepted in character sets, use "),
                        [
                            12,
                            37,
                            [
                                12,
                                37,
                                [
                                    11,
                                    string(" instead at position "),
                                    [4, 0, 0, 0, [12, 46, 0]],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
    string(
        "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."
    ),
]
R = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": integer "),
                [
                    4,
                    0,
                    0,
                    0,
                    [11, string(" is greater than the limit "), [4, 0, 0, 0, 0]],
                ],
            ],
        ],
    ],
    string("invalid format %S: integer %d is greater than the limit %d"),
]
S = [0, string("camlinternalFormat.ml"), 2811, 11]
T = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(': unclosed sub-format, expected "'),
                [12, 37, [0, [11, string('" at character number '), [4, 0, 0, 0, 0]]]],
            ],
        ],
    ],
    string(
        'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'
    ),
]
U = [0, string("camlinternalFormat.ml"), 2873, 34]
V = [0, string("camlinternalFormat.ml"), 2906, 28]
W = [0, string("camlinternalFormat.ml"), 2940, 25]
X = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [
                    4,
                    0,
                    0,
                    0,
                    [
                        11,
                        string(", "),
                        [
                            2,
                            0,
                            [
                                11,
                                string(" is incompatible with '"),
                                [0, [11, string("' in sub-format "), [3, 0, 0]]],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
    string(
        "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"
    ),
]
A = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [
                    4,
                    0,
                    0,
                    0,
                    [
                        11,
                        string(", "),
                        [2, 0, [11, string(" expected, read "), [1, 0]]],
                    ],
                ],
            ],
        ],
    ],
    string("invalid format %S: at character number %d, %s expected, read %C"),
]
z = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [
                    4,
                    0,
                    0,
                    0,
                    [11, string(", '"), [0, [11, string("' without "), [2, 0, 0]]]],
                ],
            ],
        ],
    ],
    string("invalid format %S: at character number %d, '%c' without %s"),
]
y = [
    0,
    [
        11,
        string("invalid format "),
        [
            3,
            0,
            [
                11,
                string(": at character number "),
                [4, 0, 0, 0, [11, string(", "), [2, 0, 0]]],
            ],
        ],
    ],
    string("invalid format %S: at character number %d, %s"),
]
x = [
    0,
    [11, string("invalid box description "), [3, 0, 0]],
    string("invalid box description %S"),
]
w = [0, 0, 4]


def create_char_set(param):
    return call2(Bytes[1], 32, 0)


def add_in_char_set(char_set, c):
    str_ind = int(lsr(c, 3))
    mask = 1 << c & 7
    eS = empty["caml_bytes_get"](char_set, str_ind) | mask
    return caml_bytes_set(char_set, str_ind, call1(Pervasives[17], eS))


def freeze_char_set(char_set):
    return call1(Bytes[6], char_set)


def rev_char_set(char_set):
    char_set__0 = create_char_set(0)
    i = 0
    while True:
        eQ = caml_string_get(char_set, i) ^ 255
        caml_bytes_set(char_set__0, i, call1(Pervasives[17], eQ))
        eR = int(i + 1)
        if 31 is not i:
            i = eR
            continue
        return call1(Bytes[42], char_set__0)


def is_in_char_set(char_set, c):
    str_ind = int(lsr(c, 3))
    mask = 1 << c & 7
    return 1 if 0 is not caml_string_get(char_set, str_ind) & mask else 0


def pad_of_pad_opt(pad_opt):
    if pad_opt:
        width = pad_opt[1]
        return [0, 1, width]
    return 0


def prec_of_prec_opt(prec_opt):
    if prec_opt:
        ndec = prec_opt[1]
        return [0, ndec]
    return 0


def param_format_of_ignored_format(ign, fmt):
    if is_int(ign):
        while True:
            if ign is 0:
                return [0, [0, fmt]]
            else:
                if ign is 1:
                    return [0, [1, fmt]]
                else:
                    if ign is 2:
                        return [0, [19, fmt]]
                    else:
                        return [0, [22, fmt]]
            break
    else:
        while True:
            switch_case_34 = ign[0]
            if switch_case_34 is 0:
                pad_opt = ign[1]
                return [0, [2, pad_of_pad_opt(pad_opt), fmt]]
            else:
                if switch_case_34 is 1:
                    pad_opt__0 = ign[1]
                    return [0, [3, pad_of_pad_opt(pad_opt__0), fmt]]
                else:
                    if switch_case_34 is 2:
                        pad_opt__1 = ign[2]
                        iconv = ign[1]
                        return [0, [4, iconv, pad_of_pad_opt(pad_opt__1), 0, fmt]]
                    else:
                        if switch_case_34 is 3:
                            pad_opt__2 = ign[2]
                            iconv__0 = ign[1]
                            return [
                                0,
                                [5, iconv__0, pad_of_pad_opt(pad_opt__2), 0, fmt],
                            ]
                        else:
                            if switch_case_34 is 4:
                                pad_opt__3 = ign[2]
                                iconv__1 = ign[1]
                                return [
                                    0,
                                    [6, iconv__1, pad_of_pad_opt(pad_opt__3), 0, fmt],
                                ]
                            else:
                                if switch_case_34 is 5:
                                    pad_opt__4 = ign[2]
                                    iconv__2 = ign[1]
                                    return [
                                        0,
                                        [
                                            7,
                                            iconv__2,
                                            pad_of_pad_opt(pad_opt__4),
                                            0,
                                            fmt,
                                        ],
                                    ]
                                else:
                                    if switch_case_34 is 6:
                                        prec_opt = ign[2]
                                        pad_opt__5 = ign[1]
                                        eP = prec_of_prec_opt(prec_opt)
                                        return [
                                            0,
                                            [8, 0, pad_of_pad_opt(pad_opt__5), eP, fmt],
                                        ]
                                    else:
                                        if switch_case_34 is 7:
                                            pad_opt__6 = ign[1]
                                            return [
                                                0,
                                                [9, pad_of_pad_opt(pad_opt__6), fmt],
                                            ]
                                        else:
                                            if switch_case_34 is 8:
                                                fmtty = ign[2]
                                                pad_opt__7 = ign[1]
                                                return [0, [13, pad_opt__7, fmtty, fmt]]
                                            else:
                                                if switch_case_34 is 9:
                                                    fmtty__0 = ign[2]
                                                    pad_opt__8 = ign[1]
                                                    return [
                                                        0,
                                                        [14, pad_opt__8, fmtty__0, fmt],
                                                    ]
                                                else:
                                                    if switch_case_34 is 10:
                                                        char_set = ign[2]
                                                        width_opt = ign[1]
                                                        return [
                                                            0,
                                                            [
                                                                20,
                                                                width_opt,
                                                                char_set,
                                                                fmt,
                                                            ],
                                                        ]
                                                    else:
                                                        counter = ign[1]
                                                        return [0, [21, counter, fmt]]
            break


default_float_precision = -6


def buffer_create(init_size):
    return [0, 0, caml_create_bytes(init_size)]


def buffer_check_size(buf, overhead):
    len = empty["caml_ml_bytes_length"](buf[2])
    min_len = int(buf[1] + overhead)
    eN = 1 if len < min_len else 0
    if eN:
        new_len = call2(Pervasives[5], int(len * 2), min_len)
        new_str = caml_create_bytes(new_len)
        call5(Bytes[11], buf[2], 0, new_str, 0, len)
        buf[2] = new_str
        eO = 0
    else:
        eO = eN
    return eO


def buffer_add_char(buf, c):
    buffer_check_size(buf, 1)
    caml_bytes_set(buf[2], buf[1], c)
    buf[1] = int(buf[1] + 1)
    return 0


def buffer_add_string(buf, s):
    str_len = caml_ml_string_length(s)
    buffer_check_size(buf, str_len)
    call5(String[6], s, 0, buf[2], buf[1], str_len)
    buf[1] = int(buf[1] + str_len)
    return 0


def buffer_contents(buf):
    return call3(Bytes[8], buf[2], 0, buf[1])


def char_of_iconv(iconv):
    while True:
        if iconv is 12:
            return 117
        else:
            if iconv is 6:
                pass
            else:
                if iconv is 7:
                    return 120
                else:
                    if iconv is 8:
                        pass
                    else:
                        if iconv is 9:
                            return 88
                        else:
                            if iconv is 10:
                                pass
                            else:
                                if iconv is 11:
                                    return 111
                                else:
                                    if iconv is 0:
                                        pass
                                    else:
                                        if iconv is 1:
                                            pass
                                        else:
                                            if iconv is 2:
                                                return 100
                                            else:
                                                return 105
        break


def char_of_fconv(fconv):
    while True:
        if fconv is 15:
            return 70
        else:
            if fconv is 0:
                pass
            else:
                if fconv is 1:
                    pass
                else:
                    if fconv is 2:
                        return 102
                    else:
                        if fconv is 3:
                            pass
                        else:
                            if fconv is 4:
                                pass
                            else:
                                if fconv is 5:
                                    return 101
                                else:
                                    if fconv is 6:
                                        pass
                                    else:
                                        if fconv is 7:
                                            pass
                                        else:
                                            if fconv is 8:
                                                return 69
                                            else:
                                                if fconv is 9:
                                                    pass
                                                else:
                                                    if fconv is 10:
                                                        pass
                                                    else:
                                                        if fconv is 11:
                                                            return 103
                                                        else:
                                                            if fconv is 12:
                                                                pass
                                                            else:
                                                                if fconv is 13:
                                                                    pass
                                                                else:
                                                                    if fconv is 14:
                                                                        return 71
                                                                    else:
                                                                        if fconv is 16:
                                                                            pass
                                                                        else:
                                                                            if (
                                                                                fconv
                                                                                is 17
                                                                            ):
                                                                                pass
                                                                            else:
                                                                                if (
                                                                                    fconv
                                                                                    is 18
                                                                                ):
                                                                                    return 104
                                                                                else:
                                                                                    return 72
        break


def char_of_counter(counter):
    while True:
        if counter is 0:
            return 108
        else:
            if counter is 1:
                return 110
            else:
                return 78
        break


def bprint_char_set(buf, char_set):
    def print_start(set):
        def is_alone(c):
            after = call1(Char[1], int(c + 1))
            before = call1(Char[1], int(c + -1))
            eJ = is_in_char_set(set, c)
            if eJ:
                eK = is_in_char_set(set, before)
                eL = is_in_char_set(set, after) if eK else eK
                eM = 1 - eL
            else:
                eM = eJ
            return eM

        if is_alone(93):
            buffer_add_char(buf, 93)
        print_out(set, 1)
        eI = is_alone(45)
        return buffer_add_char(buf, 45) if eI else eI

    def print_char(buf, i):
        c = call1(Pervasives[17], i)
        return (
            (
                buffer_add_char(buf, 37)
                if buffer_add_char(buf, 37) or true
                else buffer_add_char(buf, 37)
            )
            if 37 is c
            else (
                (
                    buffer_add_char(buf, 64)
                    if buffer_add_char(buf, 37) or true
                    else buffer_add_char(buf, 64)
                )
                if 64 is c
                else buffer_add_char(buf, c)
            )
        )

    def print_out__0(counter, set, i):
        i__0 = i
        while True:
            eH = 1 if i__0 < 256 else 0
            if eH:
                if is_in_char_set(set, call1(Pervasives[17], i__0)):
                    if counter < 50:
                        counter__0 = int(counter + 1)
                        return print_first(counter__0, set, i__0)
                    return caml_trampoline_return(print_first, [0, set, i__0])
                i__1 = int(i__0 + 1)
                i__0 = i__1
                continue
            return eH

    def print_first(counter, set, i):
        match = call1(Pervasives[17], i)
        switcher = int(match + -45)
        if 48 < lsr(switcher, 0):
            if 210 <= switcher:
                return print_char(buf, 255)
        else:
            switcher__0 = int(switcher + -1)
            if 46 < lsr(switcher__0, 0):
                eG = int(i + 1)
                if counter < 50:
                    counter__1 = int(counter + 1)
                    return print_out__0(counter__1, set, eG)
                return caml_trampoline_return(print_out__0, [0, set, eG])
        eF = int(i + 1)
        if counter < 50:
            counter__0 = int(counter + 1)
            return print_second(counter__0, set, eF)
        return caml_trampoline_return(print_second, [0, set, eF])

    def print_second(counter, set, i):
        if is_in_char_set(set, call1(Pervasives[17], i)):
            match = call1(Pervasives[17], i)
            switcher = int(match + -45)
            if 48 < lsr(switcher, 0):
                if 210 <= switcher:
                    print_char(buf, 254)
                    return print_char(buf, 255)
            else:
                switcher__0 = int(switcher + -1)
                if 46 < lsr(switcher__0, 0):
                    if not (is_in_char_set(set, call1(Pervasives[17], int(i + 1)))):
                        print_char(buf, int(i + -1))
                        eD = int(i + 1)
                        if counter < 50:
                            counter__1 = int(counter + 1)
                            return print_out__0(counter__1, set, eD)
                        return caml_trampoline_return(print_out__0, [0, set, eD])
            if is_in_char_set(set, call1(Pervasives[17], int(i + 1))):
                eA = int(i + 2)
                eB = int(i + -1)
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return print_in(counter__0, set, eB, eA)
                return caml_trampoline_return(print_in, [0, set, eB, eA])
            print_char(buf, int(i + -1))
            print_char(buf, i)
            eC = int(i + 2)
            if counter < 50:
                counter__2 = int(counter + 1)
                return print_out__0(counter__2, set, eC)
            return caml_trampoline_return(print_out__0, [0, set, eC])
        print_char(buf, int(i + -1))
        eE = int(i + 1)
        if counter < 50:
            counter__3 = int(counter + 1)
            return print_out__0(counter__3, set, eE)
        return caml_trampoline_return(print_out__0, [0, set, eE])

    def print_in(counter, set, i, j):
        j__0 = j
        while True:
            if 256 is not j__0:
                if is_in_char_set(set, call1(Pervasives[17], j__0)):
                    j__1 = int(j__0 + 1)
                    j__0 = j__1
                    continue
            print_char(buf, i)
            print_char(buf, 45)
            print_char(buf, int(j__0 + -1))
            ey = 1 if j__0 < 256 else 0
            if ey:
                ez = int(j__0 + 1)
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return print_out__0(counter__0, set, ez)
                return caml_trampoline_return(print_out__0, [0, set, ez])
            return ey

    def print_out(set, i):
        return caml_trampoline(print_out__0(0, set, i))

    buffer_add_char(buf, 91)
    ex = (
        (
            rev_char_set(char_set)
            if buffer_add_char(buf, 94) or true
            else rev_char_set(char_set)
        )
        if is_in_char_set(char_set, 0)
        else char_set
    )
    print_start(ex)
    return buffer_add_char(buf, 93)


def bprint_padty(buf, padty):
    while True:
        if padty is 0:
            return buffer_add_char(buf, 45)
        else:
            if padty is 1:
                return 0
            else:
                return buffer_add_char(buf, 48)
        break


def bprint_ignored_flag(buf, ign_flag):
    return buffer_add_char(buf, 95) if ign_flag else ign_flag


def bprint_pad_opt(buf, pad_opt):
    if pad_opt:
        width = pad_opt[1]
        return buffer_add_string(buf, call1(Pervasives[21], width))
    return 0


def bprint_padding(buf, pad):
    if is_int(pad):
        return 0
    else:
        if 0 is pad[0]:
            n = pad[2]
            padty = pad[1]
            bprint_padty(buf, padty)
            return buffer_add_string(buf, call1(Pervasives[21], n))
        padty__0 = pad[1]
        bprint_padty(buf, padty__0)
        return buffer_add_char(buf, 42)


def bprint_precision(buf, prec):
    if is_int(prec):
        return 0 if 0 is prec else buffer_add_string(buf, cst)
    n = prec[1]
    buffer_add_char(buf, 46)
    return buffer_add_string(buf, call1(Pervasives[21], n))


def bprint_iconv_flag(buf, iconv):
    while True:
        if iconv is 1:
            pass
        else:
            if iconv is 4:
                return buffer_add_char(buf, 43)
            else:
                if iconv is 2:
                    pass
                else:
                    if iconv is 5:
                        return buffer_add_char(buf, 32)
                    else:
                        if iconv is 7:
                            pass
                        else:
                            if iconv is 9:
                                pass
                            else:
                                if iconv is 11:
                                    return buffer_add_char(buf, 35)
                                else:
                                    return 0
        break


def bprint_int_fmt(buf, ign_flag, iconv, pad, prec):
    buffer_add_char(buf, 37)
    bprint_ignored_flag(buf, ign_flag)
    bprint_iconv_flag(buf, iconv)
    bprint_padding(buf, pad)
    bprint_precision(buf, prec)
    return buffer_add_char(buf, char_of_iconv(iconv))


def bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c):
    buffer_add_char(buf, 37)
    bprint_ignored_flag(buf, ign_flag)
    bprint_iconv_flag(buf, iconv)
    bprint_padding(buf, pad)
    bprint_precision(buf, prec)
    buffer_add_char(buf, c)
    return buffer_add_char(buf, char_of_iconv(iconv))


def bprint_fconv_flag(buf, fconv):
    while True:
        if fconv is 1:
            pass
        else:
            if fconv is 4:
                pass
            else:
                if fconv is 7:
                    pass
                else:
                    if fconv is 10:
                        pass
                    else:
                        if fconv is 13:
                            pass
                        else:
                            if fconv is 17:
                                pass
                            else:
                                if fconv is 20:
                                    return buffer_add_char(buf, 43)
                                else:
                                    if fconv is 2:
                                        pass
                                    else:
                                        if fconv is 5:
                                            pass
                                        else:
                                            if fconv is 8:
                                                pass
                                            else:
                                                if fconv is 11:
                                                    pass
                                                else:
                                                    if fconv is 14:
                                                        pass
                                                    else:
                                                        if fconv is 18:
                                                            pass
                                                        else:
                                                            if fconv is 21:
                                                                return buffer_add_char(
                                                                    buf, 32
                                                                )
                                                            else:
                                                                return 0
        break


def bprint_float_fmt(buf, ign_flag, fconv, pad, prec):
    buffer_add_char(buf, 37)
    bprint_ignored_flag(buf, ign_flag)
    bprint_fconv_flag(buf, fconv)
    bprint_padding(buf, pad)
    bprint_precision(buf, prec)
    return buffer_add_char(buf, char_of_fconv(fconv))


def string_of_formatting_lit(formatting_lit):
    if is_int(formatting_lit):
        while True:
            if formatting_lit is 0:
                return cst__0
            else:
                if formatting_lit is 1:
                    return cst__1
                else:
                    if formatting_lit is 2:
                        return cst__2
                    else:
                        if formatting_lit is 3:
                            return cst__3
                        else:
                            if formatting_lit is 4:
                                return cst__4
                            else:
                                if formatting_lit is 5:
                                    return cst__5
                                else:
                                    return cst__6
            break
    else:
        while True:
            switch_case_35 = formatting_lit[0]
            if switch_case_35 is 0:
                str = formatting_lit[1]
                return str
            else:
                if switch_case_35 is 1:
                    str__0 = formatting_lit[1]
                    return str__0
                else:
                    c = formatting_lit[1]
                    ew = call2(String[1], 1, c)
                    return call2(Pervasives[16], cst__7, ew)
            break


def string_of_formatting_gen(formatting_gen):
    if 0 is formatting_gen[0]:
        match = formatting_gen[1]
        str = match[2]
        return str
    match__0 = formatting_gen[1]
    str__0 = match__0[2]
    return str__0


def bprint_char_literal(buf, chr):
    return buffer_add_string(buf, cst__8) if 37 is chr else buffer_add_char(buf, chr)


def bprint_string_literal(buf, str):
    eu = int(caml_ml_string_length(str) + -1)
    et = 0
    if not (eu < 0):
        i = et
        while True:
            bprint_char_literal(buf, caml_string_get(str, i))
            ev = int(i + 1)
            if eu is not i:
                i = ev
                continue
            break
    return 0


def bprint_fmtty(buf, fmtty):
    fmtty__0 = fmtty
    while True:
        if is_int(fmtty__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_36 = fmtty__0[0]
                if switch_case_36 is 0:
                    fmtty__1 = fmtty__0[1]
                    buffer_add_string(buf, cst_c)
                    fmtty__0 = fmtty__1
                    continue_label = "switch"
                    break
                else:
                    if switch_case_36 is 1:
                        fmtty__2 = fmtty__0[1]
                        buffer_add_string(buf, cst_s)
                        fmtty__0 = fmtty__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_36 is 2:
                            fmtty__3 = fmtty__0[1]
                            buffer_add_string(buf, cst_i)
                            fmtty__0 = fmtty__3
                            continue_label = "switch"
                            break
                        else:
                            if switch_case_36 is 3:
                                fmtty__4 = fmtty__0[1]
                                buffer_add_string(buf, cst_li)
                                fmtty__0 = fmtty__4
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_36 is 4:
                                    fmtty__5 = fmtty__0[1]
                                    buffer_add_string(buf, cst_ni)
                                    fmtty__0 = fmtty__5
                                    continue_label = "switch"
                                    break
                                else:
                                    if switch_case_36 is 5:
                                        fmtty__6 = fmtty__0[1]
                                        buffer_add_string(buf, cst_Li)
                                        fmtty__0 = fmtty__6
                                        continue_label = "switch"
                                        break
                                    else:
                                        if switch_case_36 is 6:
                                            fmtty__7 = fmtty__0[1]
                                            buffer_add_string(buf, cst_f)
                                            fmtty__0 = fmtty__7
                                            continue_label = "switch"
                                            break
                                        else:
                                            if switch_case_36 is 7:
                                                fmtty__8 = fmtty__0[1]
                                                buffer_add_string(buf, cst_B)
                                                fmtty__0 = fmtty__8
                                                continue_label = "switch"
                                                break
                                            else:
                                                if switch_case_36 is 8:
                                                    fmtty__9 = fmtty__0[2]
                                                    sub_fmtty = fmtty__0[1]
                                                    buffer_add_string(buf, cst__9)
                                                    bprint_fmtty(buf, sub_fmtty)
                                                    buffer_add_string(buf, cst__10)
                                                    fmtty__0 = fmtty__9
                                                    continue_label = "switch"
                                                    break
                                                else:
                                                    if switch_case_36 is 9:
                                                        fmtty__10 = fmtty__0[3]
                                                        sub_fmtty__0 = fmtty__0[1]
                                                        buffer_add_string(buf, cst__11)
                                                        bprint_fmtty(buf, sub_fmtty__0)
                                                        buffer_add_string(buf, cst__12)
                                                        fmtty__0 = fmtty__10
                                                        continue_label = "switch"
                                                        break
                                                    else:
                                                        if switch_case_36 is 10:
                                                            fmtty__11 = fmtty__0[1]
                                                            buffer_add_string(
                                                                buf, cst_a
                                                            )
                                                            fmtty__0 = fmtty__11
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_36 is 11:
                                                                fmtty__12 = fmtty__0[1]
                                                                buffer_add_string(
                                                                    buf, cst_t
                                                                )
                                                                fmtty__0 = fmtty__12
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if switch_case_36 is 12:
                                                                    fmtty__13 = fmtty__0[
                                                                        1
                                                                    ]
                                                                    buffer_add_string(
                                                                        buf, cst__13
                                                                    )
                                                                    fmtty__0 = fmtty__13
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_36
                                                                        is 13
                                                                    ):
                                                                        fmtty__14 = fmtty__0[
                                                                            1
                                                                        ]
                                                                        buffer_add_string(
                                                                            buf, cst_r
                                                                        )
                                                                        fmtty__0 = (
                                                                            fmtty__14
                                                                        )
                                                                        continue_label = (
                                                                            "switch"
                                                                        )
                                                                        break
                                                                    else:
                                                                        fmtty__15 = fmtty__0[
                                                                            1
                                                                        ]
                                                                        buffer_add_string(
                                                                            buf,
                                                                            cst_r__0,
                                                                        )
                                                                        fmtty__0 = (
                                                                            fmtty__15
                                                                        )
                                                                        continue_label = (
                                                                            "switch"
                                                                        )
                                                                        break
                break
            if label == "switch":
                continue


def int_of_custom_arity(param):
    if param:
        x = param[1]
        return int(1 + int_of_custom_arity(x))
    return 0


def bprint_fmt(buf, fmt):
    def fmtiter(fmt, ign_flag):
        fmt__0 = fmt
        ign_flag__0 = ign_flag
        while True:
            if is_int(fmt__0):
                return 0
            else:
                continue_label = None
                while True:
                    switch_case_37 = fmt__0[0]
                    if switch_case_37 is 0:
                        fmt__1 = fmt__0[1]
                        buffer_add_char(buf, 37)
                        bprint_ignored_flag(buf, ign_flag__0)
                        buffer_add_char(buf, 99)
                        fmt__0 = fmt__1
                        ign_flag__0 = 0
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_37 is 1:
                            fmt__2 = fmt__0[1]
                            buffer_add_char(buf, 37)
                            bprint_ignored_flag(buf, ign_flag__0)
                            buffer_add_char(buf, 67)
                            fmt__0 = fmt__2
                            ign_flag__0 = 0
                            continue_label = "switch"
                            break
                        else:
                            if switch_case_37 is 2:
                                fmt__3 = fmt__0[2]
                                pad = fmt__0[1]
                                buffer_add_char(buf, 37)
                                bprint_ignored_flag(buf, ign_flag__0)
                                bprint_padding(buf, pad)
                                buffer_add_char(buf, 115)
                                fmt__0 = fmt__3
                                ign_flag__0 = 0
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_37 is 3:
                                    fmt__4 = fmt__0[2]
                                    pad__0 = fmt__0[1]
                                    buffer_add_char(buf, 37)
                                    bprint_ignored_flag(buf, ign_flag__0)
                                    bprint_padding(buf, pad__0)
                                    buffer_add_char(buf, 83)
                                    fmt__0 = fmt__4
                                    ign_flag__0 = 0
                                    continue_label = "switch"
                                    break
                                else:
                                    if switch_case_37 is 4:
                                        fmt__5 = fmt__0[4]
                                        prec = fmt__0[3]
                                        pad__1 = fmt__0[2]
                                        iconv = fmt__0[1]
                                        bprint_int_fmt(
                                            buf, ign_flag__0, iconv, pad__1, prec
                                        )
                                        fmt__0 = fmt__5
                                        ign_flag__0 = 0
                                        continue_label = "switch"
                                        break
                                    else:
                                        if switch_case_37 is 5:
                                            fmt__6 = fmt__0[4]
                                            prec__0 = fmt__0[3]
                                            pad__2 = fmt__0[2]
                                            iconv__0 = fmt__0[1]
                                            bprint_altint_fmt(
                                                buf,
                                                ign_flag__0,
                                                iconv__0,
                                                pad__2,
                                                prec__0,
                                                108,
                                            )
                                            fmt__0 = fmt__6
                                            ign_flag__0 = 0
                                            continue_label = "switch"
                                            break
                                        else:
                                            if switch_case_37 is 6:
                                                fmt__7 = fmt__0[4]
                                                prec__1 = fmt__0[3]
                                                pad__3 = fmt__0[2]
                                                iconv__1 = fmt__0[1]
                                                bprint_altint_fmt(
                                                    buf,
                                                    ign_flag__0,
                                                    iconv__1,
                                                    pad__3,
                                                    prec__1,
                                                    110,
                                                )
                                                fmt__0 = fmt__7
                                                ign_flag__0 = 0
                                                continue_label = "switch"
                                                break
                                            else:
                                                if switch_case_37 is 7:
                                                    fmt__8 = fmt__0[4]
                                                    prec__2 = fmt__0[3]
                                                    pad__4 = fmt__0[2]
                                                    iconv__2 = fmt__0[1]
                                                    bprint_altint_fmt(
                                                        buf,
                                                        ign_flag__0,
                                                        iconv__2,
                                                        pad__4,
                                                        prec__2,
                                                        76,
                                                    )
                                                    fmt__0 = fmt__8
                                                    ign_flag__0 = 0
                                                    continue_label = "switch"
                                                    break
                                                else:
                                                    if switch_case_37 is 8:
                                                        fmt__9 = fmt__0[4]
                                                        prec__3 = fmt__0[3]
                                                        pad__5 = fmt__0[2]
                                                        fconv = fmt__0[1]
                                                        bprint_float_fmt(
                                                            buf,
                                                            ign_flag__0,
                                                            fconv,
                                                            pad__5,
                                                            prec__3,
                                                        )
                                                        fmt__0 = fmt__9
                                                        ign_flag__0 = 0
                                                        continue_label = "switch"
                                                        break
                                                    else:
                                                        if switch_case_37 is 9:
                                                            fmt__10 = fmt__0[2]
                                                            pad__6 = fmt__0[1]
                                                            buffer_add_char(buf, 37)
                                                            bprint_ignored_flag(
                                                                buf, ign_flag__0
                                                            )
                                                            bprint_padding(buf, pad__6)
                                                            buffer_add_char(buf, 66)
                                                            fmt__0 = fmt__10
                                                            ign_flag__0 = 0
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_37 is 10:
                                                                fmt__11 = fmt__0[1]
                                                                buffer_add_string(
                                                                    buf, cst__14
                                                                )
                                                                fmt__0 = fmt__11
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if switch_case_37 is 11:
                                                                    fmt__12 = fmt__0[2]
                                                                    str = fmt__0[1]
                                                                    bprint_string_literal(
                                                                        buf, str
                                                                    )
                                                                    fmt__0 = fmt__12
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_37
                                                                        is 12
                                                                    ):
                                                                        fmt__13 = fmt__0[
                                                                            2
                                                                        ]
                                                                        chr = fmt__0[1]
                                                                        bprint_char_literal(
                                                                            buf, chr
                                                                        )
                                                                        fmt__0 = fmt__13
                                                                        continue_label = (
                                                                            "switch"
                                                                        )
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_37
                                                                            is 13
                                                                        ):
                                                                            fmt__14 = fmt__0[
                                                                                3
                                                                            ]
                                                                            fmtty = fmt__0[
                                                                                2
                                                                            ]
                                                                            pad_opt = fmt__0[
                                                                                1
                                                                            ]
                                                                            buffer_add_char(
                                                                                buf, 37
                                                                            )
                                                                            bprint_ignored_flag(
                                                                                buf,
                                                                                ign_flag__0,
                                                                            )
                                                                            bprint_pad_opt(
                                                                                buf,
                                                                                pad_opt,
                                                                            )
                                                                            buffer_add_char(
                                                                                buf, 123
                                                                            )
                                                                            bprint_fmtty(
                                                                                buf,
                                                                                fmtty,
                                                                            )
                                                                            buffer_add_char(
                                                                                buf, 37
                                                                            )
                                                                            buffer_add_char(
                                                                                buf, 125
                                                                            )
                                                                            fmt__0 = (
                                                                                fmt__14
                                                                            )
                                                                            ign_flag__0 = (
                                                                                0
                                                                            )
                                                                            continue_label = (
                                                                                "switch"
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_37
                                                                                is 14
                                                                            ):
                                                                                fmt__15 = fmt__0[
                                                                                    3
                                                                                ]
                                                                                fmtty__0 = fmt__0[
                                                                                    2
                                                                                ]
                                                                                pad_opt__0 = fmt__0[
                                                                                    1
                                                                                ]
                                                                                buffer_add_char(
                                                                                    buf,
                                                                                    37,
                                                                                )
                                                                                bprint_ignored_flag(
                                                                                    buf,
                                                                                    ign_flag__0,
                                                                                )
                                                                                bprint_pad_opt(
                                                                                    buf,
                                                                                    pad_opt__0,
                                                                                )
                                                                                buffer_add_char(
                                                                                    buf,
                                                                                    40,
                                                                                )
                                                                                bprint_fmtty(
                                                                                    buf,
                                                                                    fmtty__0,
                                                                                )
                                                                                buffer_add_char(
                                                                                    buf,
                                                                                    37,
                                                                                )
                                                                                buffer_add_char(
                                                                                    buf,
                                                                                    41,
                                                                                )
                                                                                fmt__0 = fmt__15
                                                                                ign_flag__0 = (
                                                                                    0
                                                                                )
                                                                                continue_label = "switch"
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_37
                                                                                    is 15
                                                                                ):
                                                                                    fmt__16 = fmt__0[
                                                                                        1
                                                                                    ]
                                                                                    buffer_add_char(
                                                                                        buf,
                                                                                        37,
                                                                                    )
                                                                                    bprint_ignored_flag(
                                                                                        buf,
                                                                                        ign_flag__0,
                                                                                    )
                                                                                    buffer_add_char(
                                                                                        buf,
                                                                                        97,
                                                                                    )
                                                                                    fmt__0 = fmt__16
                                                                                    ign_flag__0 = 0
                                                                                    continue_label = "switch"
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        switch_case_37
                                                                                        is 16
                                                                                    ):
                                                                                        fmt__17 = fmt__0[
                                                                                            1
                                                                                        ]
                                                                                        buffer_add_char(
                                                                                            buf,
                                                                                            37,
                                                                                        )
                                                                                        bprint_ignored_flag(
                                                                                            buf,
                                                                                            ign_flag__0,
                                                                                        )
                                                                                        buffer_add_char(
                                                                                            buf,
                                                                                            116,
                                                                                        )
                                                                                        fmt__0 = fmt__17
                                                                                        ign_flag__0 = 0
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_37
                                                                                            is 17
                                                                                        ):
                                                                                            fmt__18 = fmt__0[
                                                                                                2
                                                                                            ]
                                                                                            fmting_lit = fmt__0[
                                                                                                1
                                                                                            ]
                                                                                            bprint_string_literal(
                                                                                                buf,
                                                                                                string_of_formatting_lit(
                                                                                                    fmting_lit
                                                                                                ),
                                                                                            )
                                                                                            fmt__0 = fmt__18
                                                                                            continue_label = "switch"
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_37
                                                                                                is 18
                                                                                            ):
                                                                                                fmt__19 = fmt__0[
                                                                                                    2
                                                                                                ]
                                                                                                fmting_gen = fmt__0[
                                                                                                    1
                                                                                                ]
                                                                                                bprint_string_literal(
                                                                                                    buf,
                                                                                                    cst__15,
                                                                                                )
                                                                                                bprint_string_literal(
                                                                                                    buf,
                                                                                                    string_of_formatting_gen(
                                                                                                        fmting_gen
                                                                                                    ),
                                                                                                )
                                                                                                fmt__0 = fmt__19
                                                                                                continue_label = "switch"
                                                                                                break
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_37
                                                                                                    is 19
                                                                                                ):
                                                                                                    fmt__20 = fmt__0[
                                                                                                        1
                                                                                                    ]
                                                                                                    buffer_add_char(
                                                                                                        buf,
                                                                                                        37,
                                                                                                    )
                                                                                                    bprint_ignored_flag(
                                                                                                        buf,
                                                                                                        ign_flag__0,
                                                                                                    )
                                                                                                    buffer_add_char(
                                                                                                        buf,
                                                                                                        114,
                                                                                                    )
                                                                                                    fmt__0 = fmt__20
                                                                                                    ign_flag__0 = 0
                                                                                                    continue_label = "switch"
                                                                                                    break
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_37
                                                                                                        is 20
                                                                                                    ):
                                                                                                        fmt__21 = fmt__0[
                                                                                                            3
                                                                                                        ]
                                                                                                        char_set = fmt__0[
                                                                                                            2
                                                                                                        ]
                                                                                                        width_opt = fmt__0[
                                                                                                            1
                                                                                                        ]
                                                                                                        buffer_add_char(
                                                                                                            buf,
                                                                                                            37,
                                                                                                        )
                                                                                                        bprint_ignored_flag(
                                                                                                            buf,
                                                                                                            ign_flag__0,
                                                                                                        )
                                                                                                        bprint_pad_opt(
                                                                                                            buf,
                                                                                                            width_opt,
                                                                                                        )
                                                                                                        bprint_char_set(
                                                                                                            buf,
                                                                                                            char_set,
                                                                                                        )
                                                                                                        fmt__0 = fmt__21
                                                                                                        ign_flag__0 = 0
                                                                                                        continue_label = "switch"
                                                                                                        break
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_37
                                                                                                            is 21
                                                                                                        ):
                                                                                                            fmt__22 = fmt__0[
                                                                                                                2
                                                                                                            ]
                                                                                                            counter = fmt__0[
                                                                                                                1
                                                                                                            ]
                                                                                                            buffer_add_char(
                                                                                                                buf,
                                                                                                                37,
                                                                                                            )
                                                                                                            bprint_ignored_flag(
                                                                                                                buf,
                                                                                                                ign_flag__0,
                                                                                                            )
                                                                                                            buffer_add_char(
                                                                                                                buf,
                                                                                                                char_of_counter(
                                                                                                                    counter
                                                                                                                ),
                                                                                                            )
                                                                                                            fmt__0 = fmt__22
                                                                                                            ign_flag__0 = 0
                                                                                                            continue_label = "switch"
                                                                                                            break
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_37
                                                                                                                is 22
                                                                                                            ):
                                                                                                                fmt__23 = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                buffer_add_char(
                                                                                                                    buf,
                                                                                                                    37,
                                                                                                                )
                                                                                                                bprint_ignored_flag(
                                                                                                                    buf,
                                                                                                                    ign_flag__0,
                                                                                                                )
                                                                                                                bprint_string_literal(
                                                                                                                    buf,
                                                                                                                    cst_0c,
                                                                                                                )
                                                                                                                fmt__0 = fmt__23
                                                                                                                ign_flag__0 = 0
                                                                                                                continue_label = "switch"
                                                                                                                break
                                                                                                            else:
                                                                                                                if (
                                                                                                                    switch_case_37
                                                                                                                    is 23
                                                                                                                ):
                                                                                                                    rest = fmt__0[
                                                                                                                        2
                                                                                                                    ]
                                                                                                                    ign = fmt__0[
                                                                                                                        1
                                                                                                                    ]
                                                                                                                    match = param_format_of_ignored_format(
                                                                                                                        ign,
                                                                                                                        rest,
                                                                                                                    )
                                                                                                                    fmt__24 = match[
                                                                                                                        1
                                                                                                                    ]
                                                                                                                    fmt__0 = fmt__24
                                                                                                                    ign_flag__0 = 1
                                                                                                                    continue_label = "switch"
                                                                                                                    break
                                                                                                                else:
                                                                                                                    rest__0 = fmt__0[
                                                                                                                        3
                                                                                                                    ]
                                                                                                                    arity = fmt__0[
                                                                                                                        1
                                                                                                                    ]
                                                                                                                    er = int_of_custom_arity(
                                                                                                                        arity
                                                                                                                    )
                                                                                                                    eq = 1
                                                                                                                    if not (
                                                                                                                        er
                                                                                                                        < 1
                                                                                                                    ):
                                                                                                                        i = eq
                                                                                                                        while True:
                                                                                                                            buffer_add_char(
                                                                                                                                buf,
                                                                                                                                37,
                                                                                                                            )
                                                                                                                            bprint_ignored_flag(
                                                                                                                                buf,
                                                                                                                                ign_flag__0,
                                                                                                                            )
                                                                                                                            buffer_add_char(
                                                                                                                                buf,
                                                                                                                                63,
                                                                                                                            )
                                                                                                                            es = int(
                                                                                                                                i
                                                                                                                                + 1
                                                                                                                            )
                                                                                                                            if (
                                                                                                                                er
                                                                                                                                is not i
                                                                                                                            ):
                                                                                                                                i = es
                                                                                                                                continue
                                                                                                                            break
                                                                                                                    fmt__0 = rest__0
                                                                                                                    ign_flag__0 = 0
                                                                                                                    continue_label = "switch"
                                                                                                                    break
                    break
                if label == "switch":
                    continue

    return fmtiter(fmt, 0)


def string_of_fmt(fmt):
    buf = buffer_create(16)
    bprint_fmt(buf, fmt)
    return buffer_contents(buf)


def symm(param):
    if is_int(param):
        return 0
    else:
        while True:
            switch_case_38 = param[0]
            if switch_case_38 is 0:
                rest = param[1]
                return [0, symm(rest)]
            else:
                if switch_case_38 is 1:
                    rest__0 = param[1]
                    return [1, symm(rest__0)]
                else:
                    if switch_case_38 is 2:
                        rest__1 = param[1]
                        return [2, symm(rest__1)]
                    else:
                        if switch_case_38 is 3:
                            rest__2 = param[1]
                            return [3, symm(rest__2)]
                        else:
                            if switch_case_38 is 4:
                                rest__3 = param[1]
                                return [4, symm(rest__3)]
                            else:
                                if switch_case_38 is 5:
                                    rest__4 = param[1]
                                    return [5, symm(rest__4)]
                                else:
                                    if switch_case_38 is 6:
                                        rest__5 = param[1]
                                        return [6, symm(rest__5)]
                                    else:
                                        if switch_case_38 is 7:
                                            rest__6 = param[1]
                                            return [7, symm(rest__6)]
                                        else:
                                            if switch_case_38 is 8:
                                                rest__7 = param[2]
                                                ty = param[1]
                                                return [8, ty, symm(rest__7)]
                                            else:
                                                if switch_case_38 is 9:
                                                    rest__8 = param[3]
                                                    ty2 = param[2]
                                                    ty1 = param[1]
                                                    return [9, ty2, ty1, symm(rest__8)]
                                                else:
                                                    if switch_case_38 is 10:
                                                        rest__9 = param[1]
                                                        return [10, symm(rest__9)]
                                                    else:
                                                        if switch_case_38 is 11:
                                                            rest__10 = param[1]
                                                            return [11, symm(rest__10)]
                                                        else:
                                                            if switch_case_38 is 12:
                                                                rest__11 = param[1]
                                                                return [
                                                                    12,
                                                                    symm(rest__11),
                                                                ]
                                                            else:
                                                                if switch_case_38 is 13:
                                                                    rest__12 = param[1]
                                                                    return [
                                                                        13,
                                                                        symm(rest__12),
                                                                    ]
                                                                else:
                                                                    rest__13 = param[1]
                                                                    return [
                                                                        14,
                                                                        symm(rest__13),
                                                                    ]
            break


def fmtty_rel_det(param):
    if is_int(param):

        def d3(param):
            return 0

        def d4(param):
            return 0

        def d5(param):
            return 0

        def function_expression_39(param):
            return 0

        return [0, function_expression_39, d5, d4, d3]
    else:
        while True:
            switch_case_55 = param[0]
            if switch_case_55 is 0:
                rest = param[1]
                match = fmtty_rel_det(rest)
                de = match[4]
                ed = match[3]
                af = match[2]
                fa = match[1]

                def d6(param):
                    call1(af, 0)
                    return 0

                def function_expression_40(param):
                    call1(fa, 0)
                    return 0

                return [0, function_expression_40, d6, ed, de]
            else:
                if switch_case_55 is 1:
                    rest__0 = param[1]
                    match__0 = fmtty_rel_det(rest__0)
                    de__0 = match__0[4]
                    ed__0 = match__0[3]
                    af__0 = match__0[2]
                    fa__0 = match__0[1]

                    def d7(param):
                        call1(af__0, 0)
                        return 0

                    def function_expression_41(param):
                        call1(fa__0, 0)
                        return 0

                    return [0, function_expression_41, d7, ed__0, de__0]
                else:
                    if switch_case_55 is 2:
                        rest__1 = param[1]
                        match__1 = fmtty_rel_det(rest__1)
                        de__1 = match__1[4]
                        ed__1 = match__1[3]
                        af__1 = match__1[2]
                        fa__1 = match__1[1]

                        def d8(param):
                            call1(af__1, 0)
                            return 0

                        def function_expression_42(param):
                            call1(fa__1, 0)
                            return 0

                        return [0, function_expression_42, d8, ed__1, de__1]
                    else:
                        if switch_case_55 is 3:
                            rest__2 = param[1]
                            match__2 = fmtty_rel_det(rest__2)
                            de__2 = match__2[4]
                            ed__2 = match__2[3]
                            af__2 = match__2[2]
                            fa__2 = match__2[1]

                            def d9(param):
                                call1(af__2, 0)
                                return 0

                            def function_expression_43(param):
                                call1(fa__2, 0)
                                return 0

                            return [0, function_expression_43, d9, ed__2, de__2]
                        else:
                            if switch_case_55 is 4:
                                rest__3 = param[1]
                                match__3 = fmtty_rel_det(rest__3)
                                de__3 = match__3[4]
                                ed__3 = match__3[3]
                                af__3 = match__3[2]
                                fa__3 = match__3[1]

                                def d_(param):
                                    call1(af__3, 0)
                                    return 0

                                def function_expression_44(param):
                                    call1(fa__3, 0)
                                    return 0

                                return [0, function_expression_44, d_, ed__3, de__3]
                            else:
                                if switch_case_55 is 5:
                                    rest__4 = param[1]
                                    match__4 = fmtty_rel_det(rest__4)
                                    de__4 = match__4[4]
                                    ed__4 = match__4[3]
                                    af__4 = match__4[2]
                                    fa__4 = match__4[1]

                                    def ea(param):
                                        call1(af__4, 0)
                                        return 0

                                    def function_expression_45(param):
                                        call1(fa__4, 0)
                                        return 0

                                    return [0, function_expression_45, ea, ed__4, de__4]
                                else:
                                    if switch_case_55 is 6:
                                        rest__5 = param[1]
                                        match__5 = fmtty_rel_det(rest__5)
                                        de__5 = match__5[4]
                                        ed__5 = match__5[3]
                                        af__5 = match__5[2]
                                        fa__5 = match__5[1]

                                        def eb(param):
                                            call1(af__5, 0)
                                            return 0

                                        def function_expression_46(param):
                                            call1(fa__5, 0)
                                            return 0

                                        return [
                                            0,
                                            function_expression_46,
                                            eb,
                                            ed__5,
                                            de__5,
                                        ]
                                    else:
                                        if switch_case_55 is 7:
                                            rest__6 = param[1]
                                            match__6 = fmtty_rel_det(rest__6)
                                            de__6 = match__6[4]
                                            ed__6 = match__6[3]
                                            af__6 = match__6[2]
                                            fa__6 = match__6[1]

                                            def ec(param):
                                                call1(af__6, 0)
                                                return 0

                                            def function_expression_47(param):
                                                call1(fa__6, 0)
                                                return 0

                                            return [
                                                0,
                                                function_expression_47,
                                                ec,
                                                ed__6,
                                                de__6,
                                            ]
                                        else:
                                            if switch_case_55 is 8:
                                                rest__7 = param[2]
                                                match__7 = fmtty_rel_det(rest__7)
                                                de__7 = match__7[4]
                                                ed__7 = match__7[3]
                                                af__7 = match__7[2]
                                                fa__7 = match__7[1]

                                                def ed(param):
                                                    call1(af__7, 0)
                                                    return 0

                                                def function_expression_48(param):
                                                    call1(fa__7, 0)
                                                    return 0

                                                return [
                                                    0,
                                                    function_expression_48,
                                                    ed,
                                                    ed__7,
                                                    de__7,
                                                ]
                                            else:
                                                if switch_case_55 is 9:
                                                    rest__8 = param[3]
                                                    ty2 = param[2]
                                                    ty1 = param[1]
                                                    match__8 = fmtty_rel_det(rest__8)
                                                    de__8 = match__8[4]
                                                    ed__8 = match__8[3]
                                                    af__8 = match__8[2]
                                                    fa__8 = match__8[1]
                                                    ty = trans(symm(ty1), ty2)
                                                    match__9 = fmtty_rel_det(ty)
                                                    jd = match__9[4]
                                                    dj = match__9[3]
                                                    ga = match__9[2]
                                                    ag = match__9[1]

                                                    def ee(param):
                                                        call1(jd, 0)
                                                        call1(de__8, 0)
                                                        return 0

                                                    def ef(param):
                                                        call1(ed__8, 0)
                                                        call1(dj, 0)
                                                        return 0

                                                    def eg(param):
                                                        call1(ga, 0)
                                                        call1(af__8, 0)
                                                        return 0

                                                    def function_expression_49(param):
                                                        call1(fa__8, 0)
                                                        call1(ag, 0)
                                                        return 0

                                                    return [
                                                        0,
                                                        function_expression_49,
                                                        eg,
                                                        ef,
                                                        ee,
                                                    ]
                                                else:
                                                    if switch_case_55 is 10:
                                                        rest__9 = param[1]
                                                        match__10 = fmtty_rel_det(
                                                            rest__9
                                                        )
                                                        de__9 = match__10[4]
                                                        ed__9 = match__10[3]
                                                        af__9 = match__10[2]
                                                        fa__9 = match__10[1]

                                                        def eh(param):
                                                            call1(af__9, 0)
                                                            return 0

                                                        def function_expression_50(
                                                            param
                                                        ):
                                                            call1(fa__9, 0)
                                                            return 0

                                                        return [
                                                            0,
                                                            function_expression_50,
                                                            eh,
                                                            ed__9,
                                                            de__9,
                                                        ]
                                                    else:
                                                        if switch_case_55 is 11:
                                                            rest__10 = param[1]
                                                            match__11 = fmtty_rel_det(
                                                                rest__10
                                                            )
                                                            de__10 = match__11[4]
                                                            ed__10 = match__11[3]
                                                            af__10 = match__11[2]
                                                            fa__10 = match__11[1]

                                                            def ei(param):
                                                                call1(af__10, 0)
                                                                return 0

                                                            def function_expression_51(
                                                                param
                                                            ):
                                                                call1(fa__10, 0)
                                                                return 0

                                                            return [
                                                                0,
                                                                function_expression_51,
                                                                ei,
                                                                ed__10,
                                                                de__10,
                                                            ]
                                                        else:
                                                            if switch_case_55 is 12:
                                                                rest__11 = param[1]
                                                                match__12 = fmtty_rel_det(
                                                                    rest__11
                                                                )
                                                                de__11 = match__12[4]
                                                                ed__11 = match__12[3]
                                                                af__11 = match__12[2]
                                                                fa__11 = match__12[1]

                                                                def ej(param):
                                                                    call1(af__11, 0)
                                                                    return 0

                                                                def function_expression_52(
                                                                    param
                                                                ):
                                                                    call1(fa__11, 0)
                                                                    return 0

                                                                return [
                                                                    0,
                                                                    function_expression_52,
                                                                    ej,
                                                                    ed__11,
                                                                    de__11,
                                                                ]
                                                            else:
                                                                if switch_case_55 is 13:
                                                                    rest__12 = param[1]
                                                                    match__13 = fmtty_rel_det(
                                                                        rest__12
                                                                    )
                                                                    de__12 = match__13[
                                                                        4
                                                                    ]
                                                                    ed__12 = match__13[
                                                                        3
                                                                    ]
                                                                    af__12 = match__13[
                                                                        2
                                                                    ]
                                                                    fa__12 = match__13[
                                                                        1
                                                                    ]

                                                                    def ek(param):
                                                                        call1(de__12, 0)
                                                                        return 0

                                                                    def el(param):
                                                                        call1(ed__12, 0)
                                                                        return 0

                                                                    def em(param):
                                                                        call1(af__12, 0)
                                                                        return 0

                                                                    def function_expression_53(
                                                                        param
                                                                    ):
                                                                        call1(fa__12, 0)
                                                                        return 0

                                                                    return [
                                                                        0,
                                                                        function_expression_53,
                                                                        em,
                                                                        el,
                                                                        ek,
                                                                    ]
                                                                else:
                                                                    rest__13 = param[1]
                                                                    match__14 = fmtty_rel_det(
                                                                        rest__13
                                                                    )
                                                                    de__13 = match__14[
                                                                        4
                                                                    ]
                                                                    ed__13 = match__14[
                                                                        3
                                                                    ]
                                                                    af__13 = match__14[
                                                                        2
                                                                    ]
                                                                    fa__13 = match__14[
                                                                        1
                                                                    ]

                                                                    def en(param):
                                                                        call1(de__13, 0)
                                                                        return 0

                                                                    def eo(param):
                                                                        call1(ed__13, 0)
                                                                        return 0

                                                                    def ep(param):
                                                                        call1(af__13, 0)
                                                                        return 0

                                                                    def function_expression_54(
                                                                        param
                                                                    ):
                                                                        call1(fa__13, 0)
                                                                        return 0

                                                                    return [
                                                                        0,
                                                                        function_expression_54,
                                                                        ep,
                                                                        eo,
                                                                        en,
                                                                    ]
            break


def trans(ty1, match):
    if is_int(ty1):
        if is_int(match):
            return 0
        else:
            while True:
                switch_case_56 = match[0]
                if switch_case_56 is 10:
                    switch__0 = 0
                    break
                else:
                    if switch_case_56 is 11:
                        switch__0 = 1
                        break
                    else:
                        if switch_case_56 is 12:
                            switch__0 = 2
                            break
                        else:
                            if switch_case_56 is 13:
                                switch__0 = 3
                                break
                            else:
                                if switch_case_56 is 14:
                                    switch__0 = 4
                                    break
                                else:
                                    if switch_case_56 is 8:
                                        switch__0 = 5
                                        break
                                    else:
                                        if switch_case_56 is 9:
                                            switch__0 = 6
                                            break
                                        else:
                                            raise (
                                                empty["caml_wrap_thrown_exception"](
                                                    [0, Assert_failure, b]
                                                )
                                            )
                break
    else:
        while True:
            switch_case_71 = ty1[0]
            if switch_case_71 is 0:
                dK = ty1[1]
                if is_int(match):
                    switch__1 = 1
                else:
                    while True:
                        switch_case_57 = match[0]
                        if switch_case_57 is 0:
                            rest2 = match[1]
                            return [0, trans(dK, rest2)]
                        else:
                            if switch_case_57 is 8:
                                switch__0 = 5
                                switch__1 = 0
                                break
                            else:
                                if switch_case_57 is 9:
                                    switch__0 = 6
                                    switch__1 = 0
                                    break
                                else:
                                    if switch_case_57 is 10:
                                        switch__0 = 0
                                        switch__1 = 0
                                        break
                                    else:
                                        if switch_case_57 is 11:
                                            switch__0 = 1
                                            switch__1 = 0
                                            break
                                        else:
                                            if switch_case_57 is 12:
                                                switch__0 = 2
                                                switch__1 = 0
                                                break
                                            else:
                                                if switch_case_57 is 13:
                                                    switch__0 = 3
                                                    switch__1 = 0
                                                    break
                                                else:
                                                    if switch_case_57 is 14:
                                                        switch__0 = 4
                                                        switch__1 = 0
                                                        break
                                                    else:
                                                        switch__1 = 1
                        break
                if switch__1:
                    switch__0 = 7
                break
            else:
                if switch_case_71 is 1:
                    dL = ty1[1]
                    if is_int(match):
                        switch__2 = 1
                    else:
                        while True:
                            switch_case_58 = match[0]
                            if switch_case_58 is 1:
                                rest2__0 = match[1]
                                return [1, trans(dL, rest2__0)]
                            else:
                                if switch_case_58 is 8:
                                    switch__0 = 5
                                    switch__2 = 0
                                    break
                                else:
                                    if switch_case_58 is 9:
                                        switch__0 = 6
                                        switch__2 = 0
                                        break
                                    else:
                                        if switch_case_58 is 10:
                                            switch__0 = 0
                                            switch__2 = 0
                                            break
                                        else:
                                            if switch_case_58 is 11:
                                                switch__0 = 1
                                                switch__2 = 0
                                                break
                                            else:
                                                if switch_case_58 is 12:
                                                    switch__0 = 2
                                                    switch__2 = 0
                                                    break
                                                else:
                                                    if switch_case_58 is 13:
                                                        switch__0 = 3
                                                        switch__2 = 0
                                                        break
                                                    else:
                                                        if switch_case_58 is 14:
                                                            switch__0 = 4
                                                            switch__2 = 0
                                                            break
                                                        else:
                                                            switch__2 = 1
                            break
                    if switch__2:
                        switch__0 = 7
                    break
                else:
                    if switch_case_71 is 2:
                        dM = ty1[1]
                        if is_int(match):
                            switch__3 = 1
                        else:
                            while True:
                                switch_case_59 = match[0]
                                if switch_case_59 is 2:
                                    rest2__1 = match[1]
                                    return [2, trans(dM, rest2__1)]
                                else:
                                    if switch_case_59 is 8:
                                        switch__0 = 5
                                        switch__3 = 0
                                        break
                                    else:
                                        if switch_case_59 is 9:
                                            switch__0 = 6
                                            switch__3 = 0
                                            break
                                        else:
                                            if switch_case_59 is 10:
                                                switch__0 = 0
                                                switch__3 = 0
                                                break
                                            else:
                                                if switch_case_59 is 11:
                                                    switch__0 = 1
                                                    switch__3 = 0
                                                    break
                                                else:
                                                    if switch_case_59 is 12:
                                                        switch__0 = 2
                                                        switch__3 = 0
                                                        break
                                                    else:
                                                        if switch_case_59 is 13:
                                                            switch__0 = 3
                                                            switch__3 = 0
                                                            break
                                                        else:
                                                            if switch_case_59 is 14:
                                                                switch__0 = 4
                                                                switch__3 = 0
                                                                break
                                                            else:
                                                                switch__3 = 1
                                break
                        if switch__3:
                            switch__0 = 7
                        break
                    else:
                        if switch_case_71 is 3:
                            dN = ty1[1]
                            if is_int(match):
                                switch__4 = 1
                            else:
                                while True:
                                    switch_case_60 = match[0]
                                    if switch_case_60 is 3:
                                        rest2__2 = match[1]
                                        return [3, trans(dN, rest2__2)]
                                    else:
                                        if switch_case_60 is 8:
                                            switch__0 = 5
                                            switch__4 = 0
                                            break
                                        else:
                                            if switch_case_60 is 9:
                                                switch__0 = 6
                                                switch__4 = 0
                                                break
                                            else:
                                                if switch_case_60 is 10:
                                                    switch__0 = 0
                                                    switch__4 = 0
                                                    break
                                                else:
                                                    if switch_case_60 is 11:
                                                        switch__0 = 1
                                                        switch__4 = 0
                                                        break
                                                    else:
                                                        if switch_case_60 is 12:
                                                            switch__0 = 2
                                                            switch__4 = 0
                                                            break
                                                        else:
                                                            if switch_case_60 is 13:
                                                                switch__0 = 3
                                                                switch__4 = 0
                                                                break
                                                            else:
                                                                if switch_case_60 is 14:
                                                                    switch__0 = 4
                                                                    switch__4 = 0
                                                                    break
                                                                else:
                                                                    switch__4 = 1
                                    break
                            if switch__4:
                                switch__0 = 7
                            break
                        else:
                            if switch_case_71 is 4:
                                dO = ty1[1]
                                if is_int(match):
                                    switch__5 = 1
                                else:
                                    while True:
                                        switch_case_61 = match[0]
                                        if switch_case_61 is 4:
                                            rest2__3 = match[1]
                                            return [4, trans(dO, rest2__3)]
                                        else:
                                            if switch_case_61 is 8:
                                                switch__0 = 5
                                                switch__5 = 0
                                                break
                                            else:
                                                if switch_case_61 is 9:
                                                    switch__0 = 6
                                                    switch__5 = 0
                                                    break
                                                else:
                                                    if switch_case_61 is 10:
                                                        switch__0 = 0
                                                        switch__5 = 0
                                                        break
                                                    else:
                                                        if switch_case_61 is 11:
                                                            switch__0 = 1
                                                            switch__5 = 0
                                                            break
                                                        else:
                                                            if switch_case_61 is 12:
                                                                switch__0 = 2
                                                                switch__5 = 0
                                                                break
                                                            else:
                                                                if switch_case_61 is 13:
                                                                    switch__0 = 3
                                                                    switch__5 = 0
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_61
                                                                        is 14
                                                                    ):
                                                                        switch__0 = 4
                                                                        switch__5 = 0
                                                                        break
                                                                    else:
                                                                        switch__5 = 1
                                        break
                                if switch__5:
                                    switch__0 = 7
                                break
                            else:
                                if switch_case_71 is 5:
                                    dP = ty1[1]
                                    if is_int(match):
                                        switch__6 = 1
                                    else:
                                        while True:
                                            switch_case_62 = match[0]
                                            if switch_case_62 is 5:
                                                rest2__4 = match[1]
                                                return [5, trans(dP, rest2__4)]
                                            else:
                                                if switch_case_62 is 8:
                                                    switch__0 = 5
                                                    switch__6 = 0
                                                    break
                                                else:
                                                    if switch_case_62 is 9:
                                                        switch__0 = 6
                                                        switch__6 = 0
                                                        break
                                                    else:
                                                        if switch_case_62 is 10:
                                                            switch__0 = 0
                                                            switch__6 = 0
                                                            break
                                                        else:
                                                            if switch_case_62 is 11:
                                                                switch__0 = 1
                                                                switch__6 = 0
                                                                break
                                                            else:
                                                                if switch_case_62 is 12:
                                                                    switch__0 = 2
                                                                    switch__6 = 0
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_62
                                                                        is 13
                                                                    ):
                                                                        switch__0 = 3
                                                                        switch__6 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_62
                                                                            is 14
                                                                        ):
                                                                            switch__0 = (
                                                                                4
                                                                            )
                                                                            switch__6 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            switch__6 = (
                                                                                1
                                                                            )
                                            break
                                    if switch__6:
                                        switch__0 = 7
                                    break
                                else:
                                    if switch_case_71 is 6:
                                        dQ = ty1[1]
                                        if is_int(match):
                                            switch__7 = 1
                                        else:
                                            while True:
                                                switch_case_63 = match[0]
                                                if switch_case_63 is 6:
                                                    rest2__5 = match[1]
                                                    return [6, trans(dQ, rest2__5)]
                                                else:
                                                    if switch_case_63 is 8:
                                                        switch__0 = 5
                                                        switch__7 = 0
                                                        break
                                                    else:
                                                        if switch_case_63 is 9:
                                                            switch__0 = 6
                                                            switch__7 = 0
                                                            break
                                                        else:
                                                            if switch_case_63 is 10:
                                                                switch__0 = 0
                                                                switch__7 = 0
                                                                break
                                                            else:
                                                                if switch_case_63 is 11:
                                                                    switch__0 = 1
                                                                    switch__7 = 0
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_63
                                                                        is 12
                                                                    ):
                                                                        switch__0 = 2
                                                                        switch__7 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_63
                                                                            is 13
                                                                        ):
                                                                            switch__0 = (
                                                                                3
                                                                            )
                                                                            switch__7 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_63
                                                                                is 14
                                                                            ):
                                                                                switch__0 = (
                                                                                    4
                                                                                )
                                                                                switch__7 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                switch__7 = (
                                                                                    1
                                                                                )
                                                break
                                        if switch__7:
                                            switch__0 = 7
                                        break
                                    else:
                                        if switch_case_71 is 7:
                                            dR = ty1[1]
                                            if is_int(match):
                                                switch__8 = 1
                                            else:
                                                while True:
                                                    switch_case_64 = match[0]
                                                    if switch_case_64 is 7:
                                                        rest2__6 = match[1]
                                                        return [7, trans(dR, rest2__6)]
                                                    else:
                                                        if switch_case_64 is 8:
                                                            switch__0 = 5
                                                            switch__8 = 0
                                                            break
                                                        else:
                                                            if switch_case_64 is 9:
                                                                switch__0 = 6
                                                                switch__8 = 0
                                                                break
                                                            else:
                                                                if switch_case_64 is 10:
                                                                    switch__0 = 0
                                                                    switch__8 = 0
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_64
                                                                        is 11
                                                                    ):
                                                                        switch__0 = 1
                                                                        switch__8 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_64
                                                                            is 12
                                                                        ):
                                                                            switch__0 = (
                                                                                2
                                                                            )
                                                                            switch__8 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_64
                                                                                is 13
                                                                            ):
                                                                                switch__0 = (
                                                                                    3
                                                                                )
                                                                                switch__8 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_64
                                                                                    is 14
                                                                                ):
                                                                                    switch__0 = 4
                                                                                    switch__8 = 0
                                                                                    break
                                                                                else:
                                                                                    switch__8 = 1
                                                    break
                                            if switch__8:
                                                switch__0 = 7
                                            break
                                        else:
                                            if switch_case_71 is 8:
                                                dS = ty1[2]
                                                dT = ty1[1]
                                                if is_int(match):
                                                    switch__9 = 1
                                                else:
                                                    while True:
                                                        switch_case_65 = match[0]
                                                        if switch_case_65 is 8:
                                                            rest2__7 = match[2]
                                                            ty2 = match[1]
                                                            dU = trans(dS, rest2__7)
                                                            return [
                                                                8,
                                                                trans(dT, ty2),
                                                                dU,
                                                            ]
                                                        else:
                                                            if switch_case_65 is 10:
                                                                switch__0 = 0
                                                                switch__9 = 0
                                                                break
                                                            else:
                                                                if switch_case_65 is 11:
                                                                    switch__0 = 1
                                                                    switch__9 = 0
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_65
                                                                        is 12
                                                                    ):
                                                                        switch__0 = 2
                                                                        switch__9 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_65
                                                                            is 13
                                                                        ):
                                                                            switch__0 = (
                                                                                3
                                                                            )
                                                                            switch__9 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_65
                                                                                is 14
                                                                            ):
                                                                                switch__0 = (
                                                                                    4
                                                                                )
                                                                                switch__9 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                switch__9 = (
                                                                                    1
                                                                                )
                                                        break
                                                if switch__9:
                                                    raise (
                                                        empty[
                                                            "caml_wrap_thrown_exception"
                                                        ]([0, Assert_failure, k])
                                                    )
                                                break
                                            else:
                                                if switch_case_71 is 9:
                                                    dV = ty1[3]
                                                    dW = ty1[2]
                                                    dX = ty1[1]
                                                    if is_int(match):
                                                        switch__10 = 1
                                                    else:
                                                        while True:
                                                            switch_case_66 = match[0]
                                                            if switch_case_66 is 8:
                                                                switch__0 = 5
                                                                switch__10 = 0
                                                                break
                                                            else:
                                                                if switch_case_66 is 9:
                                                                    rest2__8 = match[3]
                                                                    ty22 = match[2]
                                                                    ty21 = match[1]
                                                                    ty = trans(
                                                                        symm(dW), ty21
                                                                    )
                                                                    match__0 = fmtty_rel_det(
                                                                        ty
                                                                    )
                                                                    f4 = match__0[4]
                                                                    f2 = match__0[2]
                                                                    call1(f2, 0)
                                                                    call1(f4, 0)
                                                                    return [
                                                                        9,
                                                                        dX,
                                                                        ty22,
                                                                        trans(
                                                                            dV, rest2__8
                                                                        ),
                                                                    ]
                                                                else:
                                                                    if (
                                                                        switch_case_66
                                                                        is 10
                                                                    ):
                                                                        switch__0 = 0
                                                                        switch__10 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_66
                                                                            is 11
                                                                        ):
                                                                            switch__0 = (
                                                                                1
                                                                            )
                                                                            switch__10 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_66
                                                                                is 12
                                                                            ):
                                                                                switch__0 = (
                                                                                    2
                                                                                )
                                                                                switch__10 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_66
                                                                                    is 13
                                                                                ):
                                                                                    switch__0 = 3
                                                                                    switch__10 = 0
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        switch_case_66
                                                                                        is 14
                                                                                    ):
                                                                                        switch__0 = 4
                                                                                        switch__10 = 0
                                                                                        break
                                                                                    else:
                                                                                        switch__10 = 1
                                                            break
                                                    if switch__10:
                                                        raise (
                                                            empty[
                                                                "caml_wrap_thrown_exception"
                                                            ]([0, Assert_failure, l])
                                                        )
                                                    break
                                                else:
                                                    if switch_case_71 is 10:
                                                        dY = ty1[1]
                                                        if (
                                                            not (is_int(match))
                                                            and 10 is match[0]
                                                        ):
                                                            rest2__9 = match[1]
                                                            return [
                                                                10,
                                                                trans(dY, rest2__9),
                                                            ]
                                                        raise (
                                                            empty[
                                                                "caml_wrap_thrown_exception"
                                                            ]([0, Assert_failure, m])
                                                        )
                                                    else:
                                                        if switch_case_71 is 11:
                                                            dZ = ty1[1]
                                                            if is_int(match):
                                                                switch__11 = 1
                                                            else:
                                                                while True:
                                                                    switch_case_67 = match[
                                                                        0
                                                                    ]
                                                                    if (
                                                                        switch_case_67
                                                                        is 10
                                                                    ):
                                                                        switch__0 = 0
                                                                        switch__11 = 0
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_67
                                                                            is 11
                                                                        ):
                                                                            rest2__10 = match[
                                                                                1
                                                                            ]
                                                                            return [
                                                                                11,
                                                                                trans(
                                                                                    dZ,
                                                                                    rest2__10,
                                                                                ),
                                                                            ]
                                                                        else:
                                                                            switch__11 = (
                                                                                1
                                                                            )
                                                                    break
                                                            if switch__11:
                                                                raise (
                                                                    empty[
                                                                        "caml_wrap_thrown_exception"
                                                                    ](
                                                                        [
                                                                            0,
                                                                            Assert_failure,
                                                                            n,
                                                                        ]
                                                                    )
                                                                )
                                                            break
                                                        else:
                                                            if switch_case_71 is 12:
                                                                d0 = ty1[1]
                                                                if is_int(match):
                                                                    switch__12 = 1
                                                                else:
                                                                    while True:
                                                                        switch_case_68 = match[
                                                                            0
                                                                        ]
                                                                        if (
                                                                            switch_case_68
                                                                            is 10
                                                                        ):
                                                                            switch__0 = (
                                                                                0
                                                                            )
                                                                            switch__12 = (
                                                                                0
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_68
                                                                                is 11
                                                                            ):
                                                                                switch__0 = (
                                                                                    1
                                                                                )
                                                                                switch__12 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_68
                                                                                    is 12
                                                                                ):
                                                                                    rest2__11 = match[
                                                                                        1
                                                                                    ]
                                                                                    return [
                                                                                        12,
                                                                                        trans(
                                                                                            d0,
                                                                                            rest2__11,
                                                                                        ),
                                                                                    ]
                                                                                else:
                                                                                    switch__12 = 1
                                                                        break
                                                                if switch__12:
                                                                    raise (
                                                                        empty[
                                                                            "caml_wrap_thrown_exception"
                                                                        ](
                                                                            [
                                                                                0,
                                                                                Assert_failure,
                                                                                o,
                                                                            ]
                                                                        )
                                                                    )
                                                                break
                                                            else:
                                                                if switch_case_71 is 13:
                                                                    d1 = ty1[1]
                                                                    if is_int(match):
                                                                        switch__13 = 1
                                                                    else:
                                                                        while True:
                                                                            switch_case_69 = match[
                                                                                0
                                                                            ]
                                                                            if (
                                                                                switch_case_69
                                                                                is 10
                                                                            ):
                                                                                switch__0 = (
                                                                                    0
                                                                                )
                                                                                switch__13 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_69
                                                                                    is 11
                                                                                ):
                                                                                    switch__0 = 1
                                                                                    switch__13 = 0
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        switch_case_69
                                                                                        is 12
                                                                                    ):
                                                                                        switch__0 = 2
                                                                                        switch__13 = 0
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_69
                                                                                            is 13
                                                                                        ):
                                                                                            rest2__12 = match[
                                                                                                1
                                                                                            ]
                                                                                            return [
                                                                                                13,
                                                                                                trans(
                                                                                                    d1,
                                                                                                    rest2__12,
                                                                                                ),
                                                                                            ]
                                                                                        else:
                                                                                            switch__13 = 1
                                                                            break
                                                                    if switch__13:
                                                                        raise (
                                                                            empty[
                                                                                "caml_wrap_thrown_exception"
                                                                            ](
                                                                                [
                                                                                    0,
                                                                                    Assert_failure,
                                                                                    p,
                                                                                ]
                                                                            )
                                                                        )
                                                                    break
                                                                else:
                                                                    d2 = ty1[1]
                                                                    if is_int(match):
                                                                        switch__14 = 1
                                                                    else:
                                                                        while True:
                                                                            switch_case_70 = match[
                                                                                0
                                                                            ]
                                                                            if (
                                                                                switch_case_70
                                                                                is 10
                                                                            ):
                                                                                switch__0 = (
                                                                                    0
                                                                                )
                                                                                switch__14 = (
                                                                                    0
                                                                                )
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_70
                                                                                    is 11
                                                                                ):
                                                                                    switch__0 = 1
                                                                                    switch__14 = 0
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        switch_case_70
                                                                                        is 12
                                                                                    ):
                                                                                        switch__0 = 2
                                                                                        switch__14 = 0
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_70
                                                                                            is 13
                                                                                        ):
                                                                                            switch__0 = 3
                                                                                            switch__14 = 0
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_70
                                                                                                is 14
                                                                                            ):
                                                                                                rest2__13 = match[
                                                                                                    1
                                                                                                ]
                                                                                                return [
                                                                                                    14,
                                                                                                    trans(
                                                                                                        d2,
                                                                                                        rest2__13,
                                                                                                    ),
                                                                                                ]
                                                                                            else:
                                                                                                switch__14 = 1
                                                                            break
                                                                    if switch__14:
                                                                        raise (
                                                                            empty[
                                                                                "caml_wrap_thrown_exception"
                                                                            ](
                                                                                [
                                                                                    0,
                                                                                    Assert_failure,
                                                                                    q,
                                                                                ]
                                                                            )
                                                                        )
            break
    while True:
        if switch__0 is 0:
            raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, e]))
        else:
            if switch__0 is 1:
                raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, f]))
            else:
                if switch__0 is 2:
                    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, g]))
                else:
                    if switch__0 is 3:
                        raise (
                            empty["caml_wrap_thrown_exception"]([0, Assert_failure, h])
                        )
                    else:
                        if switch__0 is 4:
                            raise (
                                empty["caml_wrap_thrown_exception"](
                                    [0, Assert_failure, i]
                                )
                            )
                        else:
                            if switch__0 is 5:
                                raise (
                                    empty["caml_wrap_thrown_exception"](
                                        [0, Assert_failure, c]
                                    )
                                )
                            else:
                                if switch__0 is 6:
                                    raise (
                                        empty["caml_wrap_thrown_exception"](
                                            [0, Assert_failure, d]
                                        )
                                    )
                                else:
                                    raise (
                                        empty["caml_wrap_thrown_exception"](
                                            [0, Assert_failure, j]
                                        )
                                    )
        break


def fmtty_of_padding_fmtty(pad, fmtty):
    return fmtty if is_int(pad) else (fmtty if 0 is pad[0] else [2, fmtty])


def fmtty_of_custom(arity, fmtty):
    if arity:
        arity__0 = arity[1]
        return [12, fmtty_of_custom(arity__0, fmtty)]
    return fmtty


def fmtty_of_fmt__0(counter, fmtty):
    fmtty__0 = fmtty
    while True:
        if is_int(fmtty__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_72 = fmtty__0[0]
                if switch_case_72 is 0:
                    rest = fmtty__0[1]
                    return [0, fmtty_of_fmt(rest)]
                else:
                    if switch_case_72 is 1:
                        rest__0 = fmtty__0[1]
                        return [0, fmtty_of_fmt(rest__0)]
                    else:
                        if switch_case_72 is 2:
                            rest__1 = fmtty__0[2]
                            pad = fmtty__0[1]
                            return fmtty_of_padding_fmtty(
                                pad, [1, fmtty_of_fmt(rest__1)]
                            )
                        else:
                            if switch_case_72 is 3:
                                rest__2 = fmtty__0[2]
                                pad__0 = fmtty__0[1]
                                return fmtty_of_padding_fmtty(
                                    pad__0, [1, fmtty_of_fmt(rest__2)]
                                )
                            else:
                                if switch_case_72 is 4:
                                    rest__3 = fmtty__0[4]
                                    prec = fmtty__0[3]
                                    pad__1 = fmtty__0[2]
                                    ty_rest = fmtty_of_fmt(rest__3)
                                    prec_ty = fmtty_of_precision_fmtty(
                                        prec, [2, ty_rest]
                                    )
                                    return fmtty_of_padding_fmtty(pad__1, prec_ty)
                                else:
                                    if switch_case_72 is 5:
                                        rest__4 = fmtty__0[4]
                                        prec__0 = fmtty__0[3]
                                        pad__2 = fmtty__0[2]
                                        ty_rest__0 = fmtty_of_fmt(rest__4)
                                        prec_ty__0 = fmtty_of_precision_fmtty(
                                            prec__0, [3, ty_rest__0]
                                        )
                                        return fmtty_of_padding_fmtty(
                                            pad__2, prec_ty__0
                                        )
                                    else:
                                        if switch_case_72 is 6:
                                            rest__5 = fmtty__0[4]
                                            prec__1 = fmtty__0[3]
                                            pad__3 = fmtty__0[2]
                                            ty_rest__1 = fmtty_of_fmt(rest__5)
                                            prec_ty__1 = fmtty_of_precision_fmtty(
                                                prec__1, [4, ty_rest__1]
                                            )
                                            return fmtty_of_padding_fmtty(
                                                pad__3, prec_ty__1
                                            )
                                        else:
                                            if switch_case_72 is 7:
                                                rest__6 = fmtty__0[4]
                                                prec__2 = fmtty__0[3]
                                                pad__4 = fmtty__0[2]
                                                ty_rest__2 = fmtty_of_fmt(rest__6)
                                                prec_ty__2 = fmtty_of_precision_fmtty(
                                                    prec__2, [5, ty_rest__2]
                                                )
                                                return fmtty_of_padding_fmtty(
                                                    pad__4, prec_ty__2
                                                )
                                            else:
                                                if switch_case_72 is 8:
                                                    rest__7 = fmtty__0[4]
                                                    prec__3 = fmtty__0[3]
                                                    pad__5 = fmtty__0[2]
                                                    ty_rest__3 = fmtty_of_fmt(rest__7)
                                                    prec_ty__3 = fmtty_of_precision_fmtty(
                                                        prec__3, [6, ty_rest__3]
                                                    )
                                                    return fmtty_of_padding_fmtty(
                                                        pad__5, prec_ty__3
                                                    )
                                                else:
                                                    if switch_case_72 is 9:
                                                        rest__8 = fmtty__0[2]
                                                        pad__6 = fmtty__0[1]
                                                        return fmtty_of_padding_fmtty(
                                                            pad__6,
                                                            [7, fmtty_of_fmt(rest__8)],
                                                        )
                                                    else:
                                                        if switch_case_72 is 10:
                                                            fmtty__1 = fmtty__0[1]
                                                            fmtty__0 = fmtty__1
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_72 is 11:
                                                                fmtty__2 = fmtty__0[2]
                                                                fmtty__0 = fmtty__2
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if switch_case_72 is 12:
                                                                    fmtty__3 = fmtty__0[
                                                                        2
                                                                    ]
                                                                    fmtty__0 = fmtty__3
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_72
                                                                        is 13
                                                                    ):
                                                                        rest__9 = fmtty__0[
                                                                            3
                                                                        ]
                                                                        ty = fmtty__0[2]
                                                                        return [
                                                                            8,
                                                                            ty,
                                                                            fmtty_of_fmt(
                                                                                rest__9
                                                                            ),
                                                                        ]
                                                                    else:
                                                                        if (
                                                                            switch_case_72
                                                                            is 14
                                                                        ):
                                                                            rest__10 = fmtty__0[
                                                                                3
                                                                            ]
                                                                            ty__0 = fmtty__0[
                                                                                2
                                                                            ]
                                                                            return [
                                                                                9,
                                                                                ty__0,
                                                                                ty__0,
                                                                                fmtty_of_fmt(
                                                                                    rest__10
                                                                                ),
                                                                            ]
                                                                        else:
                                                                            if (
                                                                                switch_case_72
                                                                                is 15
                                                                            ):
                                                                                rest__11 = fmtty__0[
                                                                                    1
                                                                                ]
                                                                                return [
                                                                                    10,
                                                                                    fmtty_of_fmt(
                                                                                        rest__11
                                                                                    ),
                                                                                ]
                                                                            else:
                                                                                if (
                                                                                    switch_case_72
                                                                                    is 16
                                                                                ):
                                                                                    rest__12 = fmtty__0[
                                                                                        1
                                                                                    ]
                                                                                    return [
                                                                                        11,
                                                                                        fmtty_of_fmt(
                                                                                            rest__12
                                                                                        ),
                                                                                    ]
                                                                                else:
                                                                                    if (
                                                                                        switch_case_72
                                                                                        is 17
                                                                                    ):
                                                                                        fmtty__4 = fmtty__0[
                                                                                            2
                                                                                        ]
                                                                                        fmtty__0 = fmtty__4
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_72
                                                                                            is 18
                                                                                        ):
                                                                                            rest__13 = fmtty__0[
                                                                                                2
                                                                                            ]
                                                                                            fmting_gen = fmtty__0[
                                                                                                1
                                                                                            ]
                                                                                            dI = fmtty_of_fmt(
                                                                                                rest__13
                                                                                            )
                                                                                            dJ = fmtty_of_formatting_gen(
                                                                                                fmting_gen
                                                                                            )
                                                                                            return call2(
                                                                                                CamlinternalFormatBasics[
                                                                                                    1
                                                                                                ],
                                                                                                dJ,
                                                                                                dI,
                                                                                            )
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_72
                                                                                                is 19
                                                                                            ):
                                                                                                rest__14 = fmtty__0[
                                                                                                    1
                                                                                                ]
                                                                                                return [
                                                                                                    13,
                                                                                                    fmtty_of_fmt(
                                                                                                        rest__14
                                                                                                    ),
                                                                                                ]
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_72
                                                                                                    is 20
                                                                                                ):
                                                                                                    rest__15 = fmtty__0[
                                                                                                        3
                                                                                                    ]
                                                                                                    return [
                                                                                                        1,
                                                                                                        fmtty_of_fmt(
                                                                                                            rest__15
                                                                                                        ),
                                                                                                    ]
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_72
                                                                                                        is 21
                                                                                                    ):
                                                                                                        rest__16 = fmtty__0[
                                                                                                            2
                                                                                                        ]
                                                                                                        return [
                                                                                                            2,
                                                                                                            fmtty_of_fmt(
                                                                                                                rest__16
                                                                                                            ),
                                                                                                        ]
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_72
                                                                                                            is 22
                                                                                                        ):
                                                                                                            rest__17 = fmtty__0[
                                                                                                                1
                                                                                                            ]
                                                                                                            return [
                                                                                                                0,
                                                                                                                fmtty_of_fmt(
                                                                                                                    rest__17
                                                                                                                ),
                                                                                                            ]
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_72
                                                                                                                is 23
                                                                                                            ):
                                                                                                                rest__18 = fmtty__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                ign = fmtty__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                if (
                                                                                                                    counter
                                                                                                                    < 50
                                                                                                                ):
                                                                                                                    counter__0 = int(
                                                                                                                        counter
                                                                                                                        + 1
                                                                                                                    )
                                                                                                                    return fmtty_of_ignored_format(
                                                                                                                        counter__0,
                                                                                                                        ign,
                                                                                                                        rest__18,
                                                                                                                    )
                                                                                                                return caml_trampoline_return(
                                                                                                                    fmtty_of_ignored_format,
                                                                                                                    [
                                                                                                                        0,
                                                                                                                        ign,
                                                                                                                        rest__18,
                                                                                                                    ],
                                                                                                                )
                                                                                                            else:
                                                                                                                rest__19 = fmtty__0[
                                                                                                                    3
                                                                                                                ]
                                                                                                                arity = fmtty__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                return fmtty_of_custom(
                                                                                                                    arity,
                                                                                                                    fmtty_of_fmt(
                                                                                                                        rest__19
                                                                                                                    ),
                                                                                                                )
                break
            if label == "switch":
                continue


def fmtty_of_ignored_format(counter, ign, fmt):
    if is_int(ign):
        while True:
            if ign is 0:
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return fmtty_of_fmt__0(counter__0, fmt)
                return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
            else:
                if ign is 1:
                    if counter < 50:
                        counter__1 = int(counter + 1)
                        return fmtty_of_fmt__0(counter__1, fmt)
                    return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
                else:
                    if ign is 2:
                        return [14, fmtty_of_fmt(fmt)]
                    else:
                        if counter < 50:
                            counter__2 = int(counter + 1)
                            return fmtty_of_fmt__0(counter__2, fmt)
                        return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
            break
    else:
        while True:
            switch_case_73 = ign[0]
            if switch_case_73 is 0:
                if counter < 50:
                    counter__3 = int(counter + 1)
                    return fmtty_of_fmt__0(counter__3, fmt)
                return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
            else:
                if switch_case_73 is 1:
                    if counter < 50:
                        counter__4 = int(counter + 1)
                        return fmtty_of_fmt__0(counter__4, fmt)
                    return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
                else:
                    if switch_case_73 is 2:
                        if counter < 50:
                            counter__5 = int(counter + 1)
                            return fmtty_of_fmt__0(counter__5, fmt)
                        return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
                    else:
                        if switch_case_73 is 3:
                            if counter < 50:
                                counter__6 = int(counter + 1)
                                return fmtty_of_fmt__0(counter__6, fmt)
                            return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
                        else:
                            if switch_case_73 is 4:
                                if counter < 50:
                                    counter__7 = int(counter + 1)
                                    return fmtty_of_fmt__0(counter__7, fmt)
                                return caml_trampoline_return(fmtty_of_fmt__0, [0, fmt])
                            else:
                                if switch_case_73 is 5:
                                    if counter < 50:
                                        counter__8 = int(counter + 1)
                                        return fmtty_of_fmt__0(counter__8, fmt)
                                    return caml_trampoline_return(
                                        fmtty_of_fmt__0, [0, fmt]
                                    )
                                else:
                                    if switch_case_73 is 6:
                                        if counter < 50:
                                            counter__9 = int(counter + 1)
                                            return fmtty_of_fmt__0(counter__9, fmt)
                                        return caml_trampoline_return(
                                            fmtty_of_fmt__0, [0, fmt]
                                        )
                                    else:
                                        if switch_case_73 is 7:
                                            if counter < 50:
                                                counter__10 = int(counter + 1)
                                                return fmtty_of_fmt__0(counter__10, fmt)
                                            return caml_trampoline_return(
                                                fmtty_of_fmt__0, [0, fmt]
                                            )
                                        else:
                                            if switch_case_73 is 8:
                                                if counter < 50:
                                                    counter__11 = int(counter + 1)
                                                    return fmtty_of_fmt__0(
                                                        counter__11, fmt
                                                    )
                                                return caml_trampoline_return(
                                                    fmtty_of_fmt__0, [0, fmt]
                                                )
                                            else:
                                                if switch_case_73 is 9:
                                                    fmtty = ign[2]
                                                    dH = fmtty_of_fmt(fmt)
                                                    return call2(
                                                        CamlinternalFormatBasics[1],
                                                        fmtty,
                                                        dH,
                                                    )
                                                else:
                                                    if switch_case_73 is 10:
                                                        if counter < 50:
                                                            counter__12 = int(
                                                                counter + 1
                                                            )
                                                            return fmtty_of_fmt__0(
                                                                counter__12, fmt
                                                            )
                                                        return caml_trampoline_return(
                                                            fmtty_of_fmt__0, [0, fmt]
                                                        )
                                                    else:
                                                        if counter < 50:
                                                            counter__13 = int(
                                                                counter + 1
                                                            )
                                                            return fmtty_of_fmt__0(
                                                                counter__13, fmt
                                                            )
                                                        return caml_trampoline_return(
                                                            fmtty_of_fmt__0, [0, fmt]
                                                        )
            break


def fmtty_of_fmt(fmtty):
    return caml_trampoline(fmtty_of_fmt__0(0, fmtty))


def fmtty_of_formatting_gen(formatting_gen):
    if 0 is formatting_gen[0]:
        match = formatting_gen[1]
        fmt = match[1]
        return fmtty_of_fmt(fmt)
    match__0 = formatting_gen[1]
    fmt__0 = match__0[1]
    return fmtty_of_fmt(fmt__0)


def fmtty_of_precision_fmtty(prec, fmtty):
    return (fmtty if 0 is prec else [2, fmtty]) if is_int(prec) else fmtty


Type_mismatch = [
    248,
    cst_CamlinternalFormat_Type_mismatch,
    empty["caml_fresh_oo_id"](0),
]


def type_padding(pad, match):
    if is_int(pad):
        return [0, 0, match]
    else:
        if 0 is pad[0]:
            w = pad[2]
            padty = pad[1]
            return [0, [0, padty, w], match]
        if not (is_int(match)) and 2 is match[0]:
            rest = match[1]
            padty__0 = pad[1]
            return [0, [1, padty__0], rest]
        raise (empty["caml_wrap_thrown_exception"](Type_mismatch))


def type_padprec(pad, prec, fmtty):
    match = type_padding(pad, fmtty)
    if is_int(prec):
        if 0 is prec:
            rest = match[2]
            pad__0 = match[1]
            return [0, pad__0, 0, rest]
        dG = match[2]
        if not (is_int(dG)) and 2 is dG[0]:
            rest__0 = dG[1]
            pad__1 = match[1]
            return [0, pad__1, 1, rest__0]
        raise (empty["caml_wrap_thrown_exception"](Type_mismatch))
    rest__1 = match[2]
    pad__2 = match[1]
    p = prec[1]
    return [0, pad__2, [0, p], rest__1]


def type_format(fmt, fmtty):
    dF = type_format_gen(fmt, fmtty)
    if is_int(dF[2]):
        fmt__0 = dF[1]
        return fmt__0
    raise (empty["caml_wrap_thrown_exception"](Type_mismatch))


def type_ignored_param_one(ign, fmt, fmtty):
    match = type_format_gen(fmt, fmtty)
    fmtty__0 = match[2]
    fmt__0 = match[1]
    return [0, [23, ign, fmt__0], fmtty__0]


def type_ignored_param(ign, fmt, fmtty):
    if is_int(ign):
        while True:
            if ign is 0:
                return type_ignored_param_one(ign, fmt, fmtty)
            else:
                if ign is 1:
                    return type_ignored_param_one(ign, fmt, fmtty)
                else:
                    if ign is 2:
                        if not (is_int(fmtty)) and 14 is fmtty[0]:
                            fmtty_rest = fmtty[1]
                            match = type_format_gen(fmt, fmtty_rest)
                            fmtty__0 = match[2]
                            fmt__0 = match[1]
                            return [0, [23, 2, fmt__0], fmtty__0]
                        raise (empty["caml_wrap_thrown_exception"](Type_mismatch))
                    else:
                        return type_ignored_param_one(ign, fmt, fmtty)
            break
    else:
        while True:
            switch_case_74 = ign[0]
            if switch_case_74 is 0:
                return type_ignored_param_one(ign, fmt, fmtty)
            else:
                if switch_case_74 is 1:
                    return type_ignored_param_one(ign, fmt, fmtty)
                else:
                    if switch_case_74 is 2:
                        return type_ignored_param_one(ign, fmt, fmtty)
                    else:
                        if switch_case_74 is 3:
                            return type_ignored_param_one(ign, fmt, fmtty)
                        else:
                            if switch_case_74 is 4:
                                return type_ignored_param_one(ign, fmt, fmtty)
                            else:
                                if switch_case_74 is 5:
                                    return type_ignored_param_one(ign, fmt, fmtty)
                                else:
                                    if switch_case_74 is 6:
                                        return type_ignored_param_one(ign, fmt, fmtty)
                                    else:
                                        if switch_case_74 is 7:
                                            return type_ignored_param_one(
                                                ign, fmt, fmtty
                                            )
                                        else:
                                            if switch_case_74 is 8:
                                                sub_fmtty = ign[2]
                                                pad_opt = ign[1]
                                                return type_ignored_param_one(
                                                    [8, pad_opt, sub_fmtty], fmt, fmtty
                                                )
                                            else:
                                                if switch_case_74 is 9:
                                                    sub_fmtty__0 = ign[2]
                                                    pad_opt__0 = ign[1]
                                                    dE = type_ignored_format_substitution(
                                                        sub_fmtty__0, fmt, fmtty
                                                    )
                                                    match__0 = dE[2]
                                                    fmtty__1 = match__0[2]
                                                    fmt__1 = match__0[1]
                                                    sub_fmtty__1 = dE[1]
                                                    return [
                                                        0,
                                                        [
                                                            23,
                                                            [
                                                                9,
                                                                pad_opt__0,
                                                                sub_fmtty__1,
                                                            ],
                                                            fmt__1,
                                                        ],
                                                        fmtty__1,
                                                    ]
                                                else:
                                                    if switch_case_74 is 10:
                                                        return type_ignored_param_one(
                                                            ign, fmt, fmtty
                                                        )
                                                    else:
                                                        return type_ignored_param_one(
                                                            ign, fmt, fmtty
                                                        )
            break


def type_formatting_gen(formatting_gen, fmt0, fmtty0):
    if 0 is formatting_gen[0]:
        match = formatting_gen[1]
        str = match[2]
        fmt1 = match[1]
        match__0 = type_format_gen(fmt1, fmtty0)
        fmtty2 = match__0[2]
        fmt2 = match__0[1]
        match__1 = type_format_gen(fmt0, fmtty2)
        fmtty3 = match__1[2]
        fmt3 = match__1[1]
        return [0, [18, [0, [0, fmt2, str]], fmt3], fmtty3]
    match__2 = formatting_gen[1]
    str__0 = match__2[2]
    fmt1__0 = match__2[1]
    match__3 = type_format_gen(fmt1__0, fmtty0)
    fmtty2__0 = match__3[2]
    fmt2__0 = match__3[1]
    match__4 = type_format_gen(fmt0, fmtty2__0)
    fmtty3__0 = match__4[2]
    fmt3__0 = match__4[1]
    return [0, [18, [1, [0, fmt2__0, str__0]], fmt3__0], fmtty3__0]


def type_format_gen(fmt, match):
    if is_int(fmt):
        return [0, 0, match]
    else:
        while True:
            switch_case_75 = fmt[0]
            if switch_case_75 is 0:
                if not (is_int(match)) and 0 is match[0]:
                    fmtty_rest = match[1]
                    fmt_rest = fmt[1]
                    match__0 = type_format_gen(fmt_rest, fmtty_rest)
                    fmtty = match__0[2]
                    fmt__0 = match__0[1]
                    return [0, [0, fmt__0], fmtty]
                break
            else:
                if switch_case_75 is 1:
                    if not (is_int(match)) and 0 is match[0]:
                        fmtty_rest__0 = match[1]
                        fmt_rest__0 = fmt[1]
                        match__1 = type_format_gen(fmt_rest__0, fmtty_rest__0)
                        fmtty__0 = match__1[2]
                        fmt__1 = match__1[1]
                        return [0, [1, fmt__1], fmtty__0]
                    break
                else:
                    if switch_case_75 is 2:
                        fmt_rest__1 = fmt[2]
                        pad = fmt[1]
                        c_ = type_padding(pad, match)
                        da = c_[2]
                        db = c_[1]
                        if not (is_int(da)) and 1 is da[0]:
                            fmtty_rest__1 = da[1]
                            match__2 = type_format_gen(fmt_rest__1, fmtty_rest__1)
                            fmtty__1 = match__2[2]
                            fmt__2 = match__2[1]
                            return [0, [2, db, fmt__2], fmtty__1]
                        raise (empty["caml_wrap_thrown_exception"](Type_mismatch))
                    else:
                        if switch_case_75 is 3:
                            fmt_rest__2 = fmt[2]
                            pad__0 = fmt[1]
                            dc = type_padding(pad__0, match)
                            dd = dc[2]
                            de = dc[1]
                            if not (is_int(dd)) and 1 is dd[0]:
                                fmtty_rest__2 = dd[1]
                                match__3 = type_format_gen(fmt_rest__2, fmtty_rest__2)
                                fmtty__2 = match__3[2]
                                fmt__3 = match__3[1]
                                return [0, [3, de, fmt__3], fmtty__2]
                            raise (empty["caml_wrap_thrown_exception"](Type_mismatch))
                        else:
                            if switch_case_75 is 4:
                                fmt_rest__3 = fmt[4]
                                prec = fmt[3]
                                pad__1 = fmt[2]
                                iconv = fmt[1]
                                df = type_padprec(pad__1, prec, match)
                                dg = df[3]
                                dh = df[2]
                                di = df[1]
                                if not (is_int(dg)) and 2 is dg[0]:
                                    fmtty_rest__3 = dg[1]
                                    match__4 = type_format_gen(
                                        fmt_rest__3, fmtty_rest__3
                                    )
                                    fmtty__3 = match__4[2]
                                    fmt__4 = match__4[1]
                                    return [0, [4, iconv, di, dh, fmt__4], fmtty__3]
                                raise (
                                    empty["caml_wrap_thrown_exception"](Type_mismatch)
                                )
                            else:
                                if switch_case_75 is 5:
                                    fmt_rest__4 = fmt[4]
                                    prec__0 = fmt[3]
                                    pad__2 = fmt[2]
                                    iconv__0 = fmt[1]
                                    dj = type_padprec(pad__2, prec__0, match)
                                    dk = dj[3]
                                    dl = dj[2]
                                    dm = dj[1]
                                    if not (is_int(dk)) and 3 is dk[0]:
                                        fmtty_rest__4 = dk[1]
                                        match__5 = type_format_gen(
                                            fmt_rest__4, fmtty_rest__4
                                        )
                                        fmtty__4 = match__5[2]
                                        fmt__5 = match__5[1]
                                        return [
                                            0,
                                            [5, iconv__0, dm, dl, fmt__5],
                                            fmtty__4,
                                        ]
                                    raise (
                                        empty["caml_wrap_thrown_exception"](
                                            Type_mismatch
                                        )
                                    )
                                else:
                                    if switch_case_75 is 6:
                                        fmt_rest__5 = fmt[4]
                                        prec__1 = fmt[3]
                                        pad__3 = fmt[2]
                                        iconv__1 = fmt[1]
                                        dn = type_padprec(pad__3, prec__1, match)
                                        dp = dn[3]
                                        dq = dn[2]
                                        dr = dn[1]
                                        if not (is_int(dp)) and 4 is dp[0]:
                                            fmtty_rest__5 = dp[1]
                                            match__6 = type_format_gen(
                                                fmt_rest__5, fmtty_rest__5
                                            )
                                            fmtty__5 = match__6[2]
                                            fmt__6 = match__6[1]
                                            return [
                                                0,
                                                [6, iconv__1, dr, dq, fmt__6],
                                                fmtty__5,
                                            ]
                                        raise (
                                            empty["caml_wrap_thrown_exception"](
                                                Type_mismatch
                                            )
                                        )
                                    else:
                                        if switch_case_75 is 7:
                                            fmt_rest__6 = fmt[4]
                                            prec__2 = fmt[3]
                                            pad__4 = fmt[2]
                                            iconv__2 = fmt[1]
                                            ds = type_padprec(pad__4, prec__2, match)
                                            dt = ds[3]
                                            du = ds[2]
                                            dv = ds[1]
                                            if not (is_int(dt)) and 5 is dt[0]:
                                                fmtty_rest__6 = dt[1]
                                                match__7 = type_format_gen(
                                                    fmt_rest__6, fmtty_rest__6
                                                )
                                                fmtty__6 = match__7[2]
                                                fmt__7 = match__7[1]
                                                return [
                                                    0,
                                                    [7, iconv__2, dv, du, fmt__7],
                                                    fmtty__6,
                                                ]
                                            raise (
                                                empty["caml_wrap_thrown_exception"](
                                                    Type_mismatch
                                                )
                                            )
                                        else:
                                            if switch_case_75 is 8:
                                                fmt_rest__7 = fmt[4]
                                                prec__3 = fmt[3]
                                                pad__5 = fmt[2]
                                                fconv = fmt[1]
                                                dw = type_padprec(
                                                    pad__5, prec__3, match
                                                )
                                                dx = dw[3]
                                                dy = dw[2]
                                                dz = dw[1]
                                                if not (is_int(dx)) and 6 is dx[0]:
                                                    fmtty_rest__7 = dx[1]
                                                    match__8 = type_format_gen(
                                                        fmt_rest__7, fmtty_rest__7
                                                    )
                                                    fmtty__7 = match__8[2]
                                                    fmt__8 = match__8[1]
                                                    return [
                                                        0,
                                                        [8, fconv, dz, dy, fmt__8],
                                                        fmtty__7,
                                                    ]
                                                raise (
                                                    empty["caml_wrap_thrown_exception"](
                                                        Type_mismatch
                                                    )
                                                )
                                            else:
                                                if switch_case_75 is 9:
                                                    fmt_rest__8 = fmt[2]
                                                    pad__6 = fmt[1]
                                                    dA = type_padding(pad__6, match)
                                                    dB = dA[2]
                                                    dC = dA[1]
                                                    if not (is_int(dB)) and 7 is dB[0]:
                                                        fmtty_rest__8 = dB[1]
                                                        match__9 = type_format_gen(
                                                            fmt_rest__8, fmtty_rest__8
                                                        )
                                                        fmtty__8 = match__9[2]
                                                        fmt__9 = match__9[1]
                                                        return [
                                                            0,
                                                            [9, dC, fmt__9],
                                                            fmtty__8,
                                                        ]
                                                    raise (
                                                        empty[
                                                            "caml_wrap_thrown_exception"
                                                        ](Type_mismatch)
                                                    )
                                                else:
                                                    if switch_case_75 is 10:
                                                        fmt_rest__9 = fmt[1]
                                                        match__10 = type_format_gen(
                                                            fmt_rest__9, match
                                                        )
                                                        fmtty__9 = match__10[2]
                                                        fmt__10 = match__10[1]
                                                        return [
                                                            0,
                                                            [10, fmt__10],
                                                            fmtty__9,
                                                        ]
                                                    else:
                                                        if switch_case_75 is 11:
                                                            fmt_rest__10 = fmt[2]
                                                            str = fmt[1]
                                                            match__11 = type_format_gen(
                                                                fmt_rest__10, match
                                                            )
                                                            fmtty__10 = match__11[2]
                                                            fmt__11 = match__11[1]
                                                            return [
                                                                0,
                                                                [11, str, fmt__11],
                                                                fmtty__10,
                                                            ]
                                                        else:
                                                            if switch_case_75 is 12:
                                                                fmt_rest__11 = fmt[2]
                                                                chr = fmt[1]
                                                                match__12 = type_format_gen(
                                                                    fmt_rest__11, match
                                                                )
                                                                fmtty__11 = match__12[2]
                                                                fmt__12 = match__12[1]
                                                                return [
                                                                    0,
                                                                    [12, chr, fmt__12],
                                                                    fmtty__11,
                                                                ]
                                                            else:
                                                                if switch_case_75 is 13:
                                                                    if (
                                                                        not (
                                                                            is_int(
                                                                                match
                                                                            )
                                                                        )
                                                                        and 8
                                                                        is match[0]
                                                                    ):
                                                                        fmtty_rest__9 = match[
                                                                            2
                                                                        ]
                                                                        sub_fmtty = match[
                                                                            1
                                                                        ]
                                                                        fmt_rest__12 = fmt[
                                                                            3
                                                                        ]
                                                                        sub_fmtty__0 = fmt[
                                                                            2
                                                                        ]
                                                                        pad_opt = fmt[1]
                                                                        if caml_notequal(
                                                                            [
                                                                                0,
                                                                                sub_fmtty__0,
                                                                            ],
                                                                            [
                                                                                0,
                                                                                sub_fmtty,
                                                                            ],
                                                                        ):
                                                                            raise (
                                                                                empty[
                                                                                    "caml_wrap_thrown_exception"
                                                                                ](
                                                                                    Type_mismatch
                                                                                )
                                                                            )
                                                                        match__13 = type_format_gen(
                                                                            fmt_rest__12,
                                                                            fmtty_rest__9,
                                                                        )
                                                                        fmtty__12 = match__13[
                                                                            2
                                                                        ]
                                                                        fmt__13 = match__13[
                                                                            1
                                                                        ]
                                                                        return [
                                                                            0,
                                                                            [
                                                                                13,
                                                                                pad_opt,
                                                                                sub_fmtty,
                                                                                fmt__13,
                                                                            ],
                                                                            fmtty__12,
                                                                        ]
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_75
                                                                        is 14
                                                                    ):
                                                                        if (
                                                                            not (
                                                                                is_int(
                                                                                    match
                                                                                )
                                                                            )
                                                                            and 9
                                                                            is match[0]
                                                                        ):
                                                                            fmtty_rest__10 = match[
                                                                                3
                                                                            ]
                                                                            sub_fmtty1 = match[
                                                                                1
                                                                            ]
                                                                            fmt_rest__13 = fmt[
                                                                                3
                                                                            ]
                                                                            sub_fmtty__1 = fmt[
                                                                                2
                                                                            ]
                                                                            pad_opt__0 = fmt[
                                                                                1
                                                                            ]
                                                                            dD = [
                                                                                0,
                                                                                call1(
                                                                                    CamlinternalFormatBasics[
                                                                                        2
                                                                                    ],
                                                                                    sub_fmtty1,
                                                                                ),
                                                                            ]
                                                                            if caml_notequal(
                                                                                [
                                                                                    0,
                                                                                    call1(
                                                                                        CamlinternalFormatBasics[
                                                                                            2
                                                                                        ],
                                                                                        sub_fmtty__1,
                                                                                    ),
                                                                                ],
                                                                                dD,
                                                                            ):
                                                                                raise (
                                                                                    empty[
                                                                                        "caml_wrap_thrown_exception"
                                                                                    ](
                                                                                        Type_mismatch
                                                                                    )
                                                                                )
                                                                            match__14 = type_format_gen(
                                                                                fmt_rest__13,
                                                                                call1(
                                                                                    CamlinternalFormatBasics[
                                                                                        2
                                                                                    ],
                                                                                    fmtty_rest__10,
                                                                                ),
                                                                            )
                                                                            fmtty__13 = match__14[
                                                                                2
                                                                            ]
                                                                            fmt__14 = match__14[
                                                                                1
                                                                            ]
                                                                            return [
                                                                                0,
                                                                                [
                                                                                    14,
                                                                                    pad_opt__0,
                                                                                    sub_fmtty1,
                                                                                    fmt__14,
                                                                                ],
                                                                                fmtty__13,
                                                                            ]
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_75
                                                                            is 15
                                                                        ):
                                                                            if (
                                                                                not (
                                                                                    is_int(
                                                                                        match
                                                                                    )
                                                                                )
                                                                                and 10
                                                                                is match[
                                                                                    0
                                                                                ]
                                                                            ):
                                                                                fmtty_rest__11 = match[
                                                                                    1
                                                                                ]
                                                                                fmt_rest__14 = fmt[
                                                                                    1
                                                                                ]
                                                                                match__15 = type_format_gen(
                                                                                    fmt_rest__14,
                                                                                    fmtty_rest__11,
                                                                                )
                                                                                fmtty__14 = match__15[
                                                                                    2
                                                                                ]
                                                                                fmt__15 = match__15[
                                                                                    1
                                                                                ]
                                                                                return [
                                                                                    0,
                                                                                    [
                                                                                        15,
                                                                                        fmt__15,
                                                                                    ],
                                                                                    fmtty__14,
                                                                                ]
                                                                            break
                                                                        else:
                                                                            if (
                                                                                switch_case_75
                                                                                is 16
                                                                            ):
                                                                                if (
                                                                                    not (
                                                                                        is_int(
                                                                                            match
                                                                                        )
                                                                                    )
                                                                                    and 11
                                                                                    is match[
                                                                                        0
                                                                                    ]
                                                                                ):
                                                                                    fmtty_rest__12 = match[
                                                                                        1
                                                                                    ]
                                                                                    fmt_rest__15 = fmt[
                                                                                        1
                                                                                    ]
                                                                                    match__16 = type_format_gen(
                                                                                        fmt_rest__15,
                                                                                        fmtty_rest__12,
                                                                                    )
                                                                                    fmtty__15 = match__16[
                                                                                        2
                                                                                    ]
                                                                                    fmt__16 = match__16[
                                                                                        1
                                                                                    ]
                                                                                    return [
                                                                                        0,
                                                                                        [
                                                                                            16,
                                                                                            fmt__16,
                                                                                        ],
                                                                                        fmtty__15,
                                                                                    ]
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_75
                                                                                    is 17
                                                                                ):
                                                                                    fmt_rest__16 = fmt[
                                                                                        2
                                                                                    ]
                                                                                    formatting_lit = fmt[
                                                                                        1
                                                                                    ]
                                                                                    match__17 = type_format_gen(
                                                                                        fmt_rest__16,
                                                                                        match,
                                                                                    )
                                                                                    fmtty__16 = match__17[
                                                                                        2
                                                                                    ]
                                                                                    fmt__17 = match__17[
                                                                                        1
                                                                                    ]
                                                                                    return [
                                                                                        0,
                                                                                        [
                                                                                            17,
                                                                                            formatting_lit,
                                                                                            fmt__17,
                                                                                        ],
                                                                                        fmtty__16,
                                                                                    ]
                                                                                else:
                                                                                    if (
                                                                                        switch_case_75
                                                                                        is 18
                                                                                    ):
                                                                                        fmt_rest__17 = fmt[
                                                                                            2
                                                                                        ]
                                                                                        formatting_gen = fmt[
                                                                                            1
                                                                                        ]
                                                                                        return type_formatting_gen(
                                                                                            formatting_gen,
                                                                                            fmt_rest__17,
                                                                                            match,
                                                                                        )
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_75
                                                                                            is 19
                                                                                        ):
                                                                                            if (
                                                                                                not (
                                                                                                    is_int(
                                                                                                        match
                                                                                                    )
                                                                                                )
                                                                                                and 13
                                                                                                is match[
                                                                                                    0
                                                                                                ]
                                                                                            ):
                                                                                                fmtty_rest__13 = match[
                                                                                                    1
                                                                                                ]
                                                                                                fmt_rest__18 = fmt[
                                                                                                    1
                                                                                                ]
                                                                                                match__18 = type_format_gen(
                                                                                                    fmt_rest__18,
                                                                                                    fmtty_rest__13,
                                                                                                )
                                                                                                fmtty__17 = match__18[
                                                                                                    2
                                                                                                ]
                                                                                                fmt__18 = match__18[
                                                                                                    1
                                                                                                ]
                                                                                                return [
                                                                                                    0,
                                                                                                    [
                                                                                                        19,
                                                                                                        fmt__18,
                                                                                                    ],
                                                                                                    fmtty__17,
                                                                                                ]
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_75
                                                                                                is 20
                                                                                            ):
                                                                                                if (
                                                                                                    not (
                                                                                                        is_int(
                                                                                                            match
                                                                                                        )
                                                                                                    )
                                                                                                    and 1
                                                                                                    is match[
                                                                                                        0
                                                                                                    ]
                                                                                                ):
                                                                                                    fmtty_rest__14 = match[
                                                                                                        1
                                                                                                    ]
                                                                                                    fmt_rest__19 = fmt[
                                                                                                        3
                                                                                                    ]
                                                                                                    char_set = fmt[
                                                                                                        2
                                                                                                    ]
                                                                                                    width_opt = fmt[
                                                                                                        1
                                                                                                    ]
                                                                                                    match__19 = type_format_gen(
                                                                                                        fmt_rest__19,
                                                                                                        fmtty_rest__14,
                                                                                                    )
                                                                                                    fmtty__18 = match__19[
                                                                                                        2
                                                                                                    ]
                                                                                                    fmt__19 = match__19[
                                                                                                        1
                                                                                                    ]
                                                                                                    return [
                                                                                                        0,
                                                                                                        [
                                                                                                            20,
                                                                                                            width_opt,
                                                                                                            char_set,
                                                                                                            fmt__19,
                                                                                                        ],
                                                                                                        fmtty__18,
                                                                                                    ]
                                                                                                break
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_75
                                                                                                    is 21
                                                                                                ):
                                                                                                    if (
                                                                                                        not (
                                                                                                            is_int(
                                                                                                                match
                                                                                                            )
                                                                                                        )
                                                                                                        and 2
                                                                                                        is match[
                                                                                                            0
                                                                                                        ]
                                                                                                    ):
                                                                                                        fmtty_rest__15 = match[
                                                                                                            1
                                                                                                        ]
                                                                                                        fmt_rest__20 = fmt[
                                                                                                            2
                                                                                                        ]
                                                                                                        counter = fmt[
                                                                                                            1
                                                                                                        ]
                                                                                                        match__20 = type_format_gen(
                                                                                                            fmt_rest__20,
                                                                                                            fmtty_rest__15,
                                                                                                        )
                                                                                                        fmtty__19 = match__20[
                                                                                                            2
                                                                                                        ]
                                                                                                        fmt__20 = match__20[
                                                                                                            1
                                                                                                        ]
                                                                                                        return [
                                                                                                            0,
                                                                                                            [
                                                                                                                21,
                                                                                                                counter,
                                                                                                                fmt__20,
                                                                                                            ],
                                                                                                            fmtty__19,
                                                                                                        ]
                                                                                                    break
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_75
                                                                                                        is 23
                                                                                                    ):
                                                                                                        rest = fmt[
                                                                                                            2
                                                                                                        ]
                                                                                                        ign = fmt[
                                                                                                            1
                                                                                                        ]
                                                                                                        return type_ignored_param(
                                                                                                            ign,
                                                                                                            rest,
                                                                                                            match,
                                                                                                        )
            break
    raise (empty["caml_wrap_thrown_exception"](Type_mismatch))


def type_ignored_format_substitution(sub_fmtty, fmt, match):
    if is_int(sub_fmtty):
        return [0, 0, type_format_gen(fmt, match)]
    else:
        while True:
            switch_case_76 = sub_fmtty[0]
            if switch_case_76 is 0:
                if not (is_int(match)) and 0 is match[0]:
                    fmtty_rest = match[1]
                    sub_fmtty_rest = sub_fmtty[1]
                    match__0 = type_ignored_format_substitution(
                        sub_fmtty_rest, fmt, fmtty_rest
                    )
                    fmt__0 = match__0[2]
                    sub_fmtty_rest__0 = match__0[1]
                    return [0, [0, sub_fmtty_rest__0], fmt__0]
                break
            else:
                if switch_case_76 is 1:
                    if not (is_int(match)) and 1 is match[0]:
                        fmtty_rest__0 = match[1]
                        sub_fmtty_rest__1 = sub_fmtty[1]
                        match__1 = type_ignored_format_substitution(
                            sub_fmtty_rest__1, fmt, fmtty_rest__0
                        )
                        fmt__1 = match__1[2]
                        sub_fmtty_rest__2 = match__1[1]
                        return [0, [1, sub_fmtty_rest__2], fmt__1]
                    break
                else:
                    if switch_case_76 is 2:
                        if not (is_int(match)) and 2 is match[0]:
                            fmtty_rest__1 = match[1]
                            sub_fmtty_rest__3 = sub_fmtty[1]
                            match__2 = type_ignored_format_substitution(
                                sub_fmtty_rest__3, fmt, fmtty_rest__1
                            )
                            fmt__2 = match__2[2]
                            sub_fmtty_rest__4 = match__2[1]
                            return [0, [2, sub_fmtty_rest__4], fmt__2]
                        break
                    else:
                        if switch_case_76 is 3:
                            if not (is_int(match)) and 3 is match[0]:
                                fmtty_rest__2 = match[1]
                                sub_fmtty_rest__5 = sub_fmtty[1]
                                match__3 = type_ignored_format_substitution(
                                    sub_fmtty_rest__5, fmt, fmtty_rest__2
                                )
                                fmt__3 = match__3[2]
                                sub_fmtty_rest__6 = match__3[1]
                                return [0, [3, sub_fmtty_rest__6], fmt__3]
                            break
                        else:
                            if switch_case_76 is 4:
                                if not (is_int(match)) and 4 is match[0]:
                                    fmtty_rest__3 = match[1]
                                    sub_fmtty_rest__7 = sub_fmtty[1]
                                    match__4 = type_ignored_format_substitution(
                                        sub_fmtty_rest__7, fmt, fmtty_rest__3
                                    )
                                    fmt__4 = match__4[2]
                                    sub_fmtty_rest__8 = match__4[1]
                                    return [0, [4, sub_fmtty_rest__8], fmt__4]
                                break
                            else:
                                if switch_case_76 is 5:
                                    if not (is_int(match)) and 5 is match[0]:
                                        fmtty_rest__4 = match[1]
                                        sub_fmtty_rest__9 = sub_fmtty[1]
                                        match__5 = type_ignored_format_substitution(
                                            sub_fmtty_rest__9, fmt, fmtty_rest__4
                                        )
                                        fmt__5 = match__5[2]
                                        sub_fmtty_rest__10 = match__5[1]
                                        return [0, [5, sub_fmtty_rest__10], fmt__5]
                                    break
                                else:
                                    if switch_case_76 is 6:
                                        if not (is_int(match)) and 6 is match[0]:
                                            fmtty_rest__5 = match[1]
                                            sub_fmtty_rest__11 = sub_fmtty[1]
                                            match__6 = type_ignored_format_substitution(
                                                sub_fmtty_rest__11, fmt, fmtty_rest__5
                                            )
                                            fmt__6 = match__6[2]
                                            sub_fmtty_rest__12 = match__6[1]
                                            return [0, [6, sub_fmtty_rest__12], fmt__6]
                                        break
                                    else:
                                        if switch_case_76 is 7:
                                            if not (is_int(match)) and 7 is match[0]:
                                                fmtty_rest__6 = match[1]
                                                sub_fmtty_rest__13 = sub_fmtty[1]
                                                match__7 = type_ignored_format_substitution(
                                                    sub_fmtty_rest__13,
                                                    fmt,
                                                    fmtty_rest__6,
                                                )
                                                fmt__7 = match__7[2]
                                                sub_fmtty_rest__14 = match__7[1]
                                                return [
                                                    0,
                                                    [7, sub_fmtty_rest__14],
                                                    fmt__7,
                                                ]
                                            break
                                        else:
                                            if switch_case_76 is 8:
                                                if (
                                                    not (is_int(match))
                                                    and 8 is match[0]
                                                ):
                                                    fmtty_rest__7 = match[2]
                                                    sub2_fmtty = match[1]
                                                    sub_fmtty_rest__15 = sub_fmtty[2]
                                                    sub2_fmtty__0 = sub_fmtty[1]
                                                    if caml_notequal(
                                                        [0, sub2_fmtty__0],
                                                        [0, sub2_fmtty],
                                                    ):
                                                        raise (
                                                            empty[
                                                                "caml_wrap_thrown_exception"
                                                            ](Type_mismatch)
                                                        )
                                                    match__8 = type_ignored_format_substitution(
                                                        sub_fmtty_rest__15,
                                                        fmt,
                                                        fmtty_rest__7,
                                                    )
                                                    fmt__8 = match__8[2]
                                                    sub_fmtty_rest__16 = match__8[1]
                                                    return [
                                                        0,
                                                        [
                                                            8,
                                                            sub2_fmtty,
                                                            sub_fmtty_rest__16,
                                                        ],
                                                        fmt__8,
                                                    ]
                                                break
                                            else:
                                                if switch_case_76 is 9:
                                                    if (
                                                        not (is_int(match))
                                                        and 9 is match[0]
                                                    ):
                                                        fmtty_rest__8 = match[3]
                                                        sub2_fmtty__1 = match[2]
                                                        sub1_fmtty = match[1]
                                                        sub_fmtty_rest__17 = sub_fmtty[
                                                            3
                                                        ]
                                                        sub2_fmtty__2 = sub_fmtty[2]
                                                        sub1_fmtty__0 = sub_fmtty[1]
                                                        c8 = [
                                                            0,
                                                            call1(
                                                                CamlinternalFormatBasics[
                                                                    2
                                                                ],
                                                                sub1_fmtty,
                                                            ),
                                                        ]
                                                        if caml_notequal(
                                                            [
                                                                0,
                                                                call1(
                                                                    CamlinternalFormatBasics[
                                                                        2
                                                                    ],
                                                                    sub1_fmtty__0,
                                                                ),
                                                            ],
                                                            c8,
                                                        ):
                                                            raise (
                                                                empty[
                                                                    "caml_wrap_thrown_exception"
                                                                ](Type_mismatch)
                                                            )
                                                        c9 = [
                                                            0,
                                                            call1(
                                                                CamlinternalFormatBasics[
                                                                    2
                                                                ],
                                                                sub2_fmtty__1,
                                                            ),
                                                        ]
                                                        if caml_notequal(
                                                            [
                                                                0,
                                                                call1(
                                                                    CamlinternalFormatBasics[
                                                                        2
                                                                    ],
                                                                    sub2_fmtty__2,
                                                                ),
                                                            ],
                                                            c9,
                                                        ):
                                                            raise (
                                                                empty[
                                                                    "caml_wrap_thrown_exception"
                                                                ](Type_mismatch)
                                                            )
                                                        sub_fmtty__0 = trans(
                                                            symm(sub1_fmtty),
                                                            sub2_fmtty__1,
                                                        )
                                                        match__9 = fmtty_rel_det(
                                                            sub_fmtty__0
                                                        )
                                                        f4 = match__9[4]
                                                        f2 = match__9[2]
                                                        call1(f2, 0)
                                                        call1(f4, 0)
                                                        match__10 = type_ignored_format_substitution(
                                                            call1(
                                                                CamlinternalFormatBasics[
                                                                    2
                                                                ],
                                                                sub_fmtty_rest__17,
                                                            ),
                                                            fmt,
                                                            fmtty_rest__8,
                                                        )
                                                        fmt__9 = match__10[2]
                                                        sub_fmtty_rest__18 = match__10[
                                                            1
                                                        ]
                                                        return [
                                                            0,
                                                            [
                                                                9,
                                                                sub1_fmtty,
                                                                sub2_fmtty__1,
                                                                symm(
                                                                    sub_fmtty_rest__18
                                                                ),
                                                            ],
                                                            fmt__9,
                                                        ]
                                                    break
                                                else:
                                                    if switch_case_76 is 10:
                                                        if (
                                                            not (is_int(match))
                                                            and 10 is match[0]
                                                        ):
                                                            fmtty_rest__9 = match[1]
                                                            sub_fmtty_rest__19 = sub_fmtty[
                                                                1
                                                            ]
                                                            match__11 = type_ignored_format_substitution(
                                                                sub_fmtty_rest__19,
                                                                fmt,
                                                                fmtty_rest__9,
                                                            )
                                                            fmt__10 = match__11[2]
                                                            sub_fmtty_rest__20 = match__11[
                                                                1
                                                            ]
                                                            return [
                                                                0,
                                                                [
                                                                    10,
                                                                    sub_fmtty_rest__20,
                                                                ],
                                                                fmt__10,
                                                            ]
                                                        break
                                                    else:
                                                        if switch_case_76 is 11:
                                                            if (
                                                                not (is_int(match))
                                                                and 11 is match[0]
                                                            ):
                                                                fmtty_rest__10 = match[
                                                                    1
                                                                ]
                                                                sub_fmtty_rest__21 = sub_fmtty[
                                                                    1
                                                                ]
                                                                match__12 = type_ignored_format_substitution(
                                                                    sub_fmtty_rest__21,
                                                                    fmt,
                                                                    fmtty_rest__10,
                                                                )
                                                                fmt__11 = match__12[2]
                                                                sub_fmtty_rest__22 = match__12[
                                                                    1
                                                                ]
                                                                return [
                                                                    0,
                                                                    [
                                                                        11,
                                                                        sub_fmtty_rest__22,
                                                                    ],
                                                                    fmt__11,
                                                                ]
                                                            break
                                                        else:
                                                            if switch_case_76 is 13:
                                                                if (
                                                                    not (is_int(match))
                                                                    and 13 is match[0]
                                                                ):
                                                                    fmtty_rest__11 = match[
                                                                        1
                                                                    ]
                                                                    sub_fmtty_rest__23 = sub_fmtty[
                                                                        1
                                                                    ]
                                                                    match__13 = type_ignored_format_substitution(
                                                                        sub_fmtty_rest__23,
                                                                        fmt,
                                                                        fmtty_rest__11,
                                                                    )
                                                                    fmt__12 = match__13[
                                                                        2
                                                                    ]
                                                                    sub_fmtty_rest__24 = match__13[
                                                                        1
                                                                    ]
                                                                    return [
                                                                        0,
                                                                        [
                                                                            13,
                                                                            sub_fmtty_rest__24,
                                                                        ],
                                                                        fmt__12,
                                                                    ]
                                                                break
                                                            else:
                                                                if switch_case_76 is 14:
                                                                    if (
                                                                        not (
                                                                            is_int(
                                                                                match
                                                                            )
                                                                        )
                                                                        and 14
                                                                        is match[0]
                                                                    ):
                                                                        fmtty_rest__12 = match[
                                                                            1
                                                                        ]
                                                                        sub_fmtty_rest__25 = sub_fmtty[
                                                                            1
                                                                        ]
                                                                        match__14 = type_ignored_format_substitution(
                                                                            sub_fmtty_rest__25,
                                                                            fmt,
                                                                            fmtty_rest__12,
                                                                        )
                                                                        fmt__13 = match__14[
                                                                            2
                                                                        ]
                                                                        sub_fmtty_rest__26 = match__14[
                                                                            1
                                                                        ]
                                                                        return [
                                                                            0,
                                                                            [
                                                                                14,
                                                                                sub_fmtty_rest__26,
                                                                            ],
                                                                            fmt__13,
                                                                        ]
                                                                    break
            break
    raise (empty["caml_wrap_thrown_exception"](Type_mismatch))


def recast(fmt, fmtty):
    c7 = symm(fmtty)
    return type_format(fmt, call1(CamlinternalFormatBasics[2], c7))


def fix_padding(padty, width, str):
    len = caml_ml_string_length(str)
    padty__0 = padty if 0 <= width else 0
    width__0 = call1(Pervasives[6], width)
    if width__0 <= len:
        return str
    c6 = 48 if 2 is padty__0 else 32
    res = call2(Bytes[1], width__0, c6)
    while True:
        if padty__0 is 0:
            call5(String[6], str, 0, res, 0, len)
            break
        else:
            if padty__0 is 1:
                call5(String[6], str, 0, res, int(width__0 - len), len)
                break
            else:
                if 0 < len:
                    if 43 is caml_string_get(str, 0):
                        switch__1 = 1
                    else:
                        if 45 is caml_string_get(str, 0):
                            switch__1 = 1
                        else:
                            if 32 is caml_string_get(str, 0):
                                switch__1 = 1
                            else:
                                switch__0 = 0
                                switch__1 = 0
                    if switch__1:
                        caml_bytes_set(res, 0, caml_string_get(str, 0))
                        call5(
                            String[6],
                            str,
                            1,
                            res,
                            int(int(width__0 - len) + 1),
                            int(len + -1),
                        )
                        switch__0 = 1
                else:
                    switch__0 = 0
                if not (switch__0):
                    if 1 < len:
                        if 48 is caml_string_get(str, 0):
                            if 120 is caml_string_get(str, 1):
                                switch__3 = 1
                            else:
                                if 88 is caml_string_get(str, 1):
                                    switch__3 = 1
                                else:
                                    switch__2 = 0
                                    switch__3 = 0
                            if switch__3:
                                caml_bytes_set(res, 1, caml_string_get(str, 1))
                                call5(
                                    String[6],
                                    str,
                                    2,
                                    res,
                                    int(int(width__0 - len) + 2),
                                    int(len + -2),
                                )
                                switch__2 = 1
                        else:
                            switch__2 = 0
                    else:
                        switch__2 = 0
                    if not (switch__2):
                        call5(String[6], str, 0, res, int(width__0 - len), len)
        break
    return call1(Bytes[42], res)


def fix_int_precision(prec, str):
    prec__0 = call1(Pervasives[6], prec)
    len = caml_ml_string_length(str)
    c = caml_string_get(str, 0)
    if 58 <= c:
        switch__0 = (
            (1 if 5 < lsr(int(c + -97), 0) else 0) if 71 <= c else (0 if 65 <= c else 1)
        )
    else:
        if 32 is c:
            switch__1 = 1
        else:
            if 43 <= c:
                switcher = int(c + -43)
                while True:
                    if switcher is 5:
                        if len < int(prec__0 + 2):
                            if 1 < len:
                                switch__2 = (
                                    0
                                    if 120 is caml_string_get(str, 1)
                                    else (0 if 88 is caml_string_get(str, 1) else 1)
                                )
                                if not (switch__2):
                                    res__1 = call2(Bytes[1], int(prec__0 + 2), 48)
                                    caml_bytes_set(res__1, 1, caml_string_get(str, 1))
                                    call5(
                                        String[6],
                                        str,
                                        2,
                                        res__1,
                                        int(int(prec__0 - len) + 4),
                                        int(len + -2),
                                    )
                                    return call1(Bytes[42], res__1)
                        switch__0 = 0
                        switch__1 = 0
                        break
                    else:
                        if switcher is 0:
                            pass
                        else:
                            if switcher is 2:
                                switch__1 = 1
                                break
                            else:
                                if switcher is 1:
                                    pass
                                else:
                                    if switcher is 3:
                                        pass
                                    else:
                                        if switcher is 4:
                                            switch__0 = 1
                                            switch__1 = 0
                                            break
                                        else:
                                            switch__0 = 0
                                            switch__1 = 0
                    break
            else:
                switch__0 = 1
                switch__1 = 0
        if switch__1:
            if len < int(prec__0 + 1):
                res__0 = call2(Bytes[1], int(prec__0 + 1), 48)
                caml_bytes_set(res__0, 0, c)
                call5(
                    String[6],
                    str,
                    1,
                    res__0,
                    int(int(prec__0 - len) + 2),
                    int(len + -1),
                )
                return call1(Bytes[42], res__0)
            switch__0 = 1
    if not (switch__0):
        if len < prec__0:
            res = call2(Bytes[1], prec__0, 48)
            call5(String[6], str, 0, res, int(prec__0 - len), len)
            return call1(Bytes[42], res)
    return str


def string_to_caml_string(str):
    str__0 = call1(String[13], str)
    l = caml_ml_string_length(str__0)
    res = call2(Bytes[1], int(l + 2), 34)
    caml_blit_string(str__0, 0, res, 1, l)
    return call1(Bytes[42], res)


def format_of_iconv(param):
    while True:
        if param is 0:
            return cst_d
        else:
            if param is 1:
                return cst_d__0
            else:
                if param is 2:
                    return cst_d__1
                else:
                    if param is 3:
                        return cst_i__0
                    else:
                        if param is 4:
                            return cst_i__1
                        else:
                            if param is 5:
                                return cst_i__2
                            else:
                                if param is 6:
                                    return cst_x
                                else:
                                    if param is 7:
                                        return cst_x__0
                                    else:
                                        if param is 8:
                                            return cst_X
                                        else:
                                            if param is 9:
                                                return cst_X__0
                                            else:
                                                if param is 10:
                                                    return cst_o
                                                else:
                                                    if param is 11:
                                                        return cst_o__0
                                                    else:
                                                        return cst_u
        break


def format_of_iconvL(param):
    while True:
        if param is 0:
            return cst_Ld
        else:
            if param is 1:
                return cst_Ld__0
            else:
                if param is 2:
                    return cst_Ld__1
                else:
                    if param is 3:
                        return cst_Li__0
                    else:
                        if param is 4:
                            return cst_Li__1
                        else:
                            if param is 5:
                                return cst_Li__2
                            else:
                                if param is 6:
                                    return cst_Lx
                                else:
                                    if param is 7:
                                        return cst_Lx__0
                                    else:
                                        if param is 8:
                                            return cst_LX
                                        else:
                                            if param is 9:
                                                return cst_LX__0
                                            else:
                                                if param is 10:
                                                    return cst_Lo
                                                else:
                                                    if param is 11:
                                                        return cst_Lo__0
                                                    else:
                                                        return cst_Lu
        break


def format_of_iconvl(param):
    while True:
        if param is 0:
            return cst_ld
        else:
            if param is 1:
                return cst_ld__0
            else:
                if param is 2:
                    return cst_ld__1
                else:
                    if param is 3:
                        return cst_li__0
                    else:
                        if param is 4:
                            return cst_li__1
                        else:
                            if param is 5:
                                return cst_li__2
                            else:
                                if param is 6:
                                    return cst_lx
                                else:
                                    if param is 7:
                                        return cst_lx__0
                                    else:
                                        if param is 8:
                                            return cst_lX
                                        else:
                                            if param is 9:
                                                return cst_lX__0
                                            else:
                                                if param is 10:
                                                    return cst_lo
                                                else:
                                                    if param is 11:
                                                        return cst_lo__0
                                                    else:
                                                        return cst_lu
        break


def format_of_iconvn(param):
    while True:
        if param is 0:
            return cst_nd
        else:
            if param is 1:
                return cst_nd__0
            else:
                if param is 2:
                    return cst_nd__1
                else:
                    if param is 3:
                        return cst_ni__0
                    else:
                        if param is 4:
                            return cst_ni__1
                        else:
                            if param is 5:
                                return cst_ni__2
                            else:
                                if param is 6:
                                    return cst_nx
                                else:
                                    if param is 7:
                                        return cst_nx__0
                                    else:
                                        if param is 8:
                                            return cst_nX
                                        else:
                                            if param is 9:
                                                return cst_nX__0
                                            else:
                                                if param is 10:
                                                    return cst_no
                                                else:
                                                    if param is 11:
                                                        return cst_no__0
                                                    else:
                                                        return cst_nu
        break


def format_of_fconv(fconv, prec):
    if 15 is fconv:
        return cst_12g
    prec__0 = call1(Pervasives[6], prec)
    symb = char_of_fconv(fconv)
    buf = buffer_create(16)
    buffer_add_char(buf, 37)
    bprint_fconv_flag(buf, fconv)
    buffer_add_char(buf, 46)
    buffer_add_string(buf, call1(Pervasives[21], prec__0))
    buffer_add_char(buf, symb)
    return buffer_contents(buf)


def convert_int(iconv, n):
    return caml_format_int(format_of_iconv(iconv), n)


def convert_int32(iconv, n):
    return caml_format_int(format_of_iconvl(iconv), n)


def convert_nativeint(iconv, n):
    return caml_format_int(format_of_iconvn(iconv), n)


def convert_int64(iconv, n):
    return empty["caml_int64_format"](format_of_iconvL(iconv), n)


def convert_float(fconv, prec, x):
    if 16 <= fconv:
        if 17 <= fconv:
            while True:
                switch_case_77 = int(fconv + -17)
                if switch_case_77 is 2:
                    switch__0 = 0
                    break
                else:
                    if switch_case_77 is 0:
                        pass
                    else:
                        if switch_case_77 is 3:
                            sign = 43
                            switch__0 = 1
                            break
                        else:
                            sign = 32
                            switch__0 = 1
                break
        else:
            switch__0 = 0
        if not (switch__0):
            sign = 45
        str = empty["caml_hexstring_of_float"](x, prec, sign)
        return call1(String[29], str) if 19 <= fconv else str
    str__0 = empty["caml_format_float"](format_of_fconv(fconv, prec), x)
    if 15 is fconv:
        len = caml_ml_string_length(str__0)

        def is_valid(i):
            i__0 = i
            while True:
                if i__0 is len:
                    return 0
                match = caml_string_get(str__0, i__0)
                c5 = int(match + -46)
                switch__0 = (
                    (1 if 55 is c5 else 0)
                    if 23 < lsr(c5, 0)
                    else (1 if 21 < lsr(int(c5 + -1), 0) else 0)
                )
                if switch__0:
                    return 1
                i__1 = int(i__0 + 1)
                i__0 = i__1
                continue

        match = empty["caml_classify_float"](x)
        return (
            (cst_neg_infinity if x < 0.0 else cst_infinity)
            if 3 is match
            else (
                cst_nan
                if 4 <= match
                else (str__0 if is_valid(0) else call2(Pervasives[16], str__0, cst__16))
            )
        )
    return str__0


def format_caml_char(c):
    str = call1(Char[2], c)
    l = caml_ml_string_length(str)
    res = call2(Bytes[1], int(l + 2), 39)
    caml_blit_string(str, 0, res, 1, l)
    return call1(Bytes[42], res)


def string_of_fmtty(fmtty):
    buf = buffer_create(16)
    bprint_fmtty(buf, fmtty)
    return buffer_contents(buf)


def make_float_padding_precision(k, o, acc, fmt, pad, match, fconv):
    if is_int(pad):
        if is_int(match):

            def function_expression_78(x):
                str = convert_float(fconv, default_float_precision, x)
                return make_printf(k, o, [4, acc, str], fmt)

            def function_expression_79(p, x):
                str = convert_float(fconv, p, x)
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_78 if 0 is match else function_expression_79
        p = match[1]

        def function_expression_80(x):
            str = convert_float(fconv, p, x)
            return make_printf(k, o, [4, acc, str], fmt)

        return function_expression_80
    else:
        if 0 is pad[0]:
            c2 = pad[2]
            c3 = pad[1]
            if is_int(match):

                def function_expression_81(x):
                    str = convert_float(fconv, default_float_precision, x)
                    str__0 = fix_padding(c3, c2, str)
                    return make_printf(k, o, [4, acc, str__0], fmt)

                def function_expression_82(p, x):
                    str = fix_padding(c3, c2, convert_float(fconv, p, x))
                    return make_printf(k, o, [4, acc, str], fmt)

                return function_expression_81 if 0 is match else function_expression_82
            p__0 = match[1]

            def function_expression_83(x):
                str = fix_padding(c3, c2, convert_float(fconv, p__0, x))
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_83
        c4 = pad[1]
        if is_int(match):

            def function_expression_84(w, x):
                str = convert_float(fconv, default_float_precision, x)
                str__0 = fix_padding(c4, w, str)
                return make_printf(k, o, [4, acc, str__0], fmt)

            def function_expression_85(w, p, x):
                str = fix_padding(c4, w, convert_float(fconv, p, x))
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_84 if 0 is match else function_expression_85
        p__1 = match[1]

        def function_expression_86(w, x):
            str = fix_padding(c4, w, convert_float(fconv, p__1, x))
            return make_printf(k, o, [4, acc, str], fmt)

        return function_expression_86


def make_int_padding_precision(k, o, acc, fmt, pad, match, trans, iconv):
    if is_int(pad):
        if is_int(match):

            def function_expression_87(x):
                str = call2(trans, iconv, x)
                return make_printf(k, o, [4, acc, str], fmt)

            def function_expression_88(p, x):
                str = fix_int_precision(p, call2(trans, iconv, x))
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_87 if 0 is match else function_expression_88
        p = match[1]

        def function_expression_89(x):
            str = fix_int_precision(p, call2(trans, iconv, x))
            return make_printf(k, o, [4, acc, str], fmt)

        return function_expression_89
    else:
        if 0 is pad[0]:
            cZ = pad[2]
            c0 = pad[1]
            if is_int(match):

                def function_expression_90(x):
                    str = fix_padding(c0, cZ, call2(trans, iconv, x))
                    return make_printf(k, o, [4, acc, str], fmt)

                def function_expression_91(p, x):
                    str = fix_padding(
                        c0, cZ, fix_int_precision(p, call2(trans, iconv, x))
                    )
                    return make_printf(k, o, [4, acc, str], fmt)

                return function_expression_90 if 0 is match else function_expression_91
            p__0 = match[1]

            def function_expression_92(x):
                str = fix_padding(
                    c0, cZ, fix_int_precision(p__0, call2(trans, iconv, x))
                )
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_92
        c1 = pad[1]
        if is_int(match):

            def function_expression_93(w, x):
                str = fix_padding(c1, w, call2(trans, iconv, x))
                return make_printf(k, o, [4, acc, str], fmt)

            def function_expression_94(w, p, x):
                str = fix_padding(c1, w, fix_int_precision(p, call2(trans, iconv, x)))
                return make_printf(k, o, [4, acc, str], fmt)

            return function_expression_93 if 0 is match else function_expression_94
        p__1 = match[1]

        def function_expression_95(w, x):
            str = fix_padding(c1, w, fix_int_precision(p__1, call2(trans, iconv, x)))
            return make_printf(k, o, [4, acc, str], fmt)

        return function_expression_95


def make_padding(k, o, acc, fmt, pad, trans):
    if is_int(pad):

        def function_expression_96(x):
            new_acc = [4, acc, call1(trans, x)]
            return make_printf(k, o, new_acc, fmt)

        return function_expression_96
    else:
        if 0 is pad[0]:
            width = pad[2]
            padty = pad[1]

            def function_expression_97(x):
                new_acc = [4, acc, fix_padding(padty, width, call1(trans, x))]
                return make_printf(k, o, new_acc, fmt)

            return function_expression_97
        padty__0 = pad[1]

        def function_expression_98(w, x):
            new_acc = [4, acc, fix_padding(padty__0, w, call1(trans, x))]
            return make_printf(k, o, new_acc, fmt)

        return function_expression_98


def make_printf__0(counter, k, o, acc, fmt):
    k__0 = k
    acc__0 = acc
    fmt__0 = fmt
    while True:
        if is_int(fmt__0):
            return call2(k__0, o, acc__0)
        else:
            continue_label = None
            while True:
                switch_case_110 = fmt__0[0]
                if switch_case_110 is 0:
                    rest = fmt__0[1]

                    def function_expression_99(c):
                        new_acc = [5, acc__0, c]
                        return make_printf(k__0, o, new_acc, rest)

                    return function_expression_99
                else:
                    if switch_case_110 is 1:
                        rest__0 = fmt__0[1]

                        def function_expression_100(c):
                            new_acc = [4, acc__0, format_caml_char(c)]
                            return make_printf(k__0, o, new_acc, rest__0)

                        return function_expression_100
                    else:
                        if switch_case_110 is 2:
                            rest__1 = fmt__0[2]
                            pad = fmt__0[1]

                            def function_expression_101(str):
                                return str

                            return make_padding(
                                k__0, o, acc__0, rest__1, pad, function_expression_101
                            )
                        else:
                            if switch_case_110 is 3:
                                rest__2 = fmt__0[2]
                                pad__0 = fmt__0[1]
                                return make_padding(
                                    k__0,
                                    o,
                                    acc__0,
                                    rest__2,
                                    pad__0,
                                    string_to_caml_string,
                                )
                            else:
                                if switch_case_110 is 4:
                                    rest__3 = fmt__0[4]
                                    prec = fmt__0[3]
                                    pad__1 = fmt__0[2]
                                    iconv = fmt__0[1]
                                    return make_int_padding_precision(
                                        k__0,
                                        o,
                                        acc__0,
                                        rest__3,
                                        pad__1,
                                        prec,
                                        convert_int,
                                        iconv,
                                    )
                                else:
                                    if switch_case_110 is 5:
                                        rest__4 = fmt__0[4]
                                        prec__0 = fmt__0[3]
                                        pad__2 = fmt__0[2]
                                        iconv__0 = fmt__0[1]
                                        return make_int_padding_precision(
                                            k__0,
                                            o,
                                            acc__0,
                                            rest__4,
                                            pad__2,
                                            prec__0,
                                            convert_int32,
                                            iconv__0,
                                        )
                                    else:
                                        if switch_case_110 is 6:
                                            rest__5 = fmt__0[4]
                                            prec__1 = fmt__0[3]
                                            pad__3 = fmt__0[2]
                                            iconv__1 = fmt__0[1]
                                            return make_int_padding_precision(
                                                k__0,
                                                o,
                                                acc__0,
                                                rest__5,
                                                pad__3,
                                                prec__1,
                                                convert_nativeint,
                                                iconv__1,
                                            )
                                        else:
                                            if switch_case_110 is 7:
                                                rest__6 = fmt__0[4]
                                                prec__2 = fmt__0[3]
                                                pad__4 = fmt__0[2]
                                                iconv__2 = fmt__0[1]
                                                return make_int_padding_precision(
                                                    k__0,
                                                    o,
                                                    acc__0,
                                                    rest__6,
                                                    pad__4,
                                                    prec__2,
                                                    convert_int64,
                                                    iconv__2,
                                                )
                                            else:
                                                if switch_case_110 is 8:
                                                    rest__7 = fmt__0[4]
                                                    prec__3 = fmt__0[3]
                                                    pad__5 = fmt__0[2]
                                                    fconv = fmt__0[1]
                                                    return make_float_padding_precision(
                                                        k__0,
                                                        o,
                                                        acc__0,
                                                        rest__7,
                                                        pad__5,
                                                        prec__3,
                                                        fconv,
                                                    )
                                                else:
                                                    if switch_case_110 is 9:
                                                        rest__8 = fmt__0[2]
                                                        pad__6 = fmt__0[1]
                                                        return make_padding(
                                                            k__0,
                                                            o,
                                                            acc__0,
                                                            rest__8,
                                                            pad__6,
                                                            Pervasives[18],
                                                        )
                                                    else:
                                                        if switch_case_110 is 10:
                                                            fmt__1 = fmt__0[1]
                                                            acc__1 = [7, acc__0]
                                                            acc__0 = acc__1
                                                            fmt__0 = fmt__1
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_110 is 11:
                                                                fmt__2 = fmt__0[2]
                                                                str = fmt__0[1]
                                                                acc__2 = [
                                                                    2,
                                                                    acc__0,
                                                                    str,
                                                                ]
                                                                acc__0 = acc__2
                                                                fmt__0 = fmt__2
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if (
                                                                    switch_case_110
                                                                    is 12
                                                                ):
                                                                    fmt__3 = fmt__0[2]
                                                                    chr = fmt__0[1]
                                                                    acc__3 = [
                                                                        3,
                                                                        acc__0,
                                                                        chr,
                                                                    ]
                                                                    acc__0 = acc__3
                                                                    fmt__0 = fmt__3
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_110
                                                                        is 13
                                                                    ):
                                                                        rest__9 = fmt__0[
                                                                            3
                                                                        ]
                                                                        sub_fmtty = fmt__0[
                                                                            2
                                                                        ]
                                                                        ty = string_of_fmtty(
                                                                            sub_fmtty
                                                                        )

                                                                        def function_expression_102(
                                                                            str
                                                                        ):
                                                                            return make_printf(
                                                                                k__0,
                                                                                o,
                                                                                [
                                                                                    4,
                                                                                    acc__0,
                                                                                    ty,
                                                                                ],
                                                                                rest__9,
                                                                            )

                                                                        return function_expression_102
                                                                    else:
                                                                        if (
                                                                            switch_case_110
                                                                            is 14
                                                                        ):
                                                                            rest__10 = fmt__0[
                                                                                3
                                                                            ]
                                                                            fmtty = fmt__0[
                                                                                2
                                                                            ]

                                                                            def function_expression_103(
                                                                                param
                                                                            ):
                                                                                fmt = param[
                                                                                    1
                                                                                ]
                                                                                cY = recast(
                                                                                    fmt,
                                                                                    fmtty,
                                                                                )
                                                                                return make_printf(
                                                                                    k__0,
                                                                                    o,
                                                                                    acc__0,
                                                                                    call2(
                                                                                        CamlinternalFormatBasics[
                                                                                            3
                                                                                        ],
                                                                                        cY,
                                                                                        rest__10,
                                                                                    ),
                                                                                )

                                                                            return function_expression_103
                                                                        else:
                                                                            if (
                                                                                switch_case_110
                                                                                is 15
                                                                            ):
                                                                                rest__11 = fmt__0[
                                                                                    1
                                                                                ]

                                                                                def function_expression_104(
                                                                                    f, x
                                                                                ):
                                                                                    def function_expression_105(
                                                                                        o
                                                                                    ):
                                                                                        return call2(
                                                                                            f,
                                                                                            o,
                                                                                            x,
                                                                                        )

                                                                                    return make_printf(
                                                                                        k__0,
                                                                                        o,
                                                                                        [
                                                                                            6,
                                                                                            acc__0,
                                                                                            function_expression_105,
                                                                                        ],
                                                                                        rest__11,
                                                                                    )

                                                                                return function_expression_104
                                                                            else:
                                                                                if (
                                                                                    switch_case_110
                                                                                    is 16
                                                                                ):
                                                                                    rest__12 = fmt__0[
                                                                                        1
                                                                                    ]

                                                                                    def function_expression_106(
                                                                                        f
                                                                                    ):
                                                                                        return make_printf(
                                                                                            k__0,
                                                                                            o,
                                                                                            [
                                                                                                6,
                                                                                                acc__0,
                                                                                                f,
                                                                                            ],
                                                                                            rest__12,
                                                                                        )

                                                                                    return function_expression_106
                                                                                else:
                                                                                    if (
                                                                                        switch_case_110
                                                                                        is 17
                                                                                    ):
                                                                                        fmt__4 = fmt__0[
                                                                                            2
                                                                                        ]
                                                                                        fmting_lit = fmt__0[
                                                                                            1
                                                                                        ]
                                                                                        acc__4 = [
                                                                                            0,
                                                                                            acc__0,
                                                                                            fmting_lit,
                                                                                        ]
                                                                                        acc__0 = acc__4
                                                                                        fmt__0 = fmt__4
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_110
                                                                                            is 18
                                                                                        ):
                                                                                            cW = fmt__0[
                                                                                                1
                                                                                            ]
                                                                                            if (
                                                                                                0
                                                                                                is cW[
                                                                                                    0
                                                                                                ]
                                                                                            ):
                                                                                                rest__13 = fmt__0[
                                                                                                    2
                                                                                                ]
                                                                                                match = cW[
                                                                                                    1
                                                                                                ]
                                                                                                fmt__5 = match[
                                                                                                    1
                                                                                                ]

                                                                                                def k__3(
                                                                                                    acc,
                                                                                                    k,
                                                                                                    rest,
                                                                                                ):
                                                                                                    def k__0(
                                                                                                        koc,
                                                                                                        kacc,
                                                                                                    ):
                                                                                                        return make_printf(
                                                                                                            k,
                                                                                                            koc,
                                                                                                            [
                                                                                                                1,
                                                                                                                acc,
                                                                                                                [
                                                                                                                    0,
                                                                                                                    kacc,
                                                                                                                ],
                                                                                                            ],
                                                                                                            rest,
                                                                                                        )

                                                                                                    return k__0

                                                                                                k__1 = k__3(
                                                                                                    acc__0,
                                                                                                    k__0,
                                                                                                    rest__13,
                                                                                                )
                                                                                                k__0 = k__1
                                                                                                acc__0 = 0
                                                                                                fmt__0 = fmt__5
                                                                                                continue_label = "switch"
                                                                                                break
                                                                                            rest__14 = fmt__0[
                                                                                                2
                                                                                            ]
                                                                                            match__0 = cW[
                                                                                                1
                                                                                            ]
                                                                                            fmt__6 = match__0[
                                                                                                1
                                                                                            ]

                                                                                            def k__4(
                                                                                                acc,
                                                                                                k,
                                                                                                rest,
                                                                                            ):
                                                                                                def k__0(
                                                                                                    koc,
                                                                                                    kacc,
                                                                                                ):
                                                                                                    return make_printf(
                                                                                                        k,
                                                                                                        koc,
                                                                                                        [
                                                                                                            1,
                                                                                                            acc,
                                                                                                            [
                                                                                                                1,
                                                                                                                kacc,
                                                                                                            ],
                                                                                                        ],
                                                                                                        rest,
                                                                                                    )

                                                                                                return k__0

                                                                                            k__2 = k__4(
                                                                                                acc__0,
                                                                                                k__0,
                                                                                                rest__14,
                                                                                            )
                                                                                            k__0 = k__2
                                                                                            acc__0 = 0
                                                                                            fmt__0 = fmt__6
                                                                                            continue_label = "switch"
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_110
                                                                                                is 19
                                                                                            ):
                                                                                                raise (
                                                                                                    empty[
                                                                                                        "caml_wrap_thrown_exception"
                                                                                                    ](
                                                                                                        [
                                                                                                            0,
                                                                                                            Assert_failure,
                                                                                                            r,
                                                                                                        ]
                                                                                                    )
                                                                                                )
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_110
                                                                                                    is 20
                                                                                                ):
                                                                                                    rest__15 = fmt__0[
                                                                                                        3
                                                                                                    ]
                                                                                                    new_acc = [
                                                                                                        8,
                                                                                                        acc__0,
                                                                                                        cst_Printf_bad_conversion,
                                                                                                    ]

                                                                                                    def function_expression_107(
                                                                                                        param
                                                                                                    ):
                                                                                                        return make_printf(
                                                                                                            k__0,
                                                                                                            o,
                                                                                                            new_acc,
                                                                                                            rest__15,
                                                                                                        )

                                                                                                    return function_expression_107
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_110
                                                                                                        is 21
                                                                                                    ):
                                                                                                        rest__16 = fmt__0[
                                                                                                            2
                                                                                                        ]

                                                                                                        def function_expression_108(
                                                                                                            n
                                                                                                        ):
                                                                                                            new_acc = [
                                                                                                                4,
                                                                                                                acc__0,
                                                                                                                caml_format_int(
                                                                                                                    cst_u__0,
                                                                                                                    n,
                                                                                                                ),
                                                                                                            ]
                                                                                                            return make_printf(
                                                                                                                k__0,
                                                                                                                o,
                                                                                                                new_acc,
                                                                                                                rest__16,
                                                                                                            )

                                                                                                        return function_expression_108
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_110
                                                                                                            is 22
                                                                                                        ):
                                                                                                            rest__17 = fmt__0[
                                                                                                                1
                                                                                                            ]

                                                                                                            def function_expression_109(
                                                                                                                c
                                                                                                            ):
                                                                                                                new_acc = [
                                                                                                                    5,
                                                                                                                    acc__0,
                                                                                                                    c,
                                                                                                                ]
                                                                                                                return make_printf(
                                                                                                                    k__0,
                                                                                                                    o,
                                                                                                                    new_acc,
                                                                                                                    rest__17,
                                                                                                                )

                                                                                                            return function_expression_109
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_110
                                                                                                                is 23
                                                                                                            ):
                                                                                                                rest__18 = fmt__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                ign = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                if (
                                                                                                                    counter
                                                                                                                    < 50
                                                                                                                ):
                                                                                                                    counter__1 = int(
                                                                                                                        counter
                                                                                                                        + 1
                                                                                                                    )
                                                                                                                    return make_ignored_param__0(
                                                                                                                        counter__1,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        acc__0,
                                                                                                                        ign,
                                                                                                                        rest__18,
                                                                                                                    )
                                                                                                                return caml_trampoline_return(
                                                                                                                    make_ignored_param__0,
                                                                                                                    [
                                                                                                                        0,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        acc__0,
                                                                                                                        ign,
                                                                                                                        rest__18,
                                                                                                                    ],
                                                                                                                )
                                                                                                            else:
                                                                                                                rest__19 = fmt__0[
                                                                                                                    3
                                                                                                                ]
                                                                                                                f = fmt__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                arity = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                cX = call1(
                                                                                                                    f,
                                                                                                                    0,
                                                                                                                )
                                                                                                                if (
                                                                                                                    counter
                                                                                                                    < 50
                                                                                                                ):
                                                                                                                    counter__0 = int(
                                                                                                                        counter
                                                                                                                        + 1
                                                                                                                    )
                                                                                                                    return make_custom__0(
                                                                                                                        counter__0,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        acc__0,
                                                                                                                        rest__19,
                                                                                                                        arity,
                                                                                                                        cX,
                                                                                                                    )
                                                                                                                return caml_trampoline_return(
                                                                                                                    make_custom__0,
                                                                                                                    [
                                                                                                                        0,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        acc__0,
                                                                                                                        rest__19,
                                                                                                                        arity,
                                                                                                                        cX,
                                                                                                                    ],
                                                                                                                )
                break
            if label == "switch":
                continue


def make_ignored_param__0(counter, k, o, acc, ign, fmt):
    if is_int(ign):
        while True:
            if ign is 0:
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return make_invalid_arg(counter__0, k, o, acc, fmt)
                return caml_trampoline_return(make_invalid_arg, [0, k, o, acc, fmt])
            else:
                if ign is 1:
                    if counter < 50:
                        counter__1 = int(counter + 1)
                        return make_invalid_arg(counter__1, k, o, acc, fmt)
                    return caml_trampoline_return(make_invalid_arg, [0, k, o, acc, fmt])
                else:
                    if ign is 2:
                        raise (
                            empty["caml_wrap_thrown_exception"]([0, Assert_failure, s])
                        )
                    else:
                        if counter < 50:
                            counter__2 = int(counter + 1)
                            return make_invalid_arg(counter__2, k, o, acc, fmt)
                        return caml_trampoline_return(
                            make_invalid_arg, [0, k, o, acc, fmt]
                        )
            break
    else:
        while True:
            switch_case_111 = ign[0]
            if switch_case_111 is 0:
                if counter < 50:
                    counter__3 = int(counter + 1)
                    return make_invalid_arg(counter__3, k, o, acc, fmt)
                return caml_trampoline_return(make_invalid_arg, [0, k, o, acc, fmt])
            else:
                if switch_case_111 is 1:
                    if counter < 50:
                        counter__4 = int(counter + 1)
                        return make_invalid_arg(counter__4, k, o, acc, fmt)
                    return caml_trampoline_return(make_invalid_arg, [0, k, o, acc, fmt])
                else:
                    if switch_case_111 is 2:
                        if counter < 50:
                            counter__5 = int(counter + 1)
                            return make_invalid_arg(counter__5, k, o, acc, fmt)
                        return caml_trampoline_return(
                            make_invalid_arg, [0, k, o, acc, fmt]
                        )
                    else:
                        if switch_case_111 is 3:
                            if counter < 50:
                                counter__6 = int(counter + 1)
                                return make_invalid_arg(counter__6, k, o, acc, fmt)
                            return caml_trampoline_return(
                                make_invalid_arg, [0, k, o, acc, fmt]
                            )
                        else:
                            if switch_case_111 is 4:
                                if counter < 50:
                                    counter__7 = int(counter + 1)
                                    return make_invalid_arg(counter__7, k, o, acc, fmt)
                                return caml_trampoline_return(
                                    make_invalid_arg, [0, k, o, acc, fmt]
                                )
                            else:
                                if switch_case_111 is 5:
                                    if counter < 50:
                                        counter__8 = int(counter + 1)
                                        return make_invalid_arg(
                                            counter__8, k, o, acc, fmt
                                        )
                                    return caml_trampoline_return(
                                        make_invalid_arg, [0, k, o, acc, fmt]
                                    )
                                else:
                                    if switch_case_111 is 6:
                                        if counter < 50:
                                            counter__9 = int(counter + 1)
                                            return make_invalid_arg(
                                                counter__9, k, o, acc, fmt
                                            )
                                        return caml_trampoline_return(
                                            make_invalid_arg, [0, k, o, acc, fmt]
                                        )
                                    else:
                                        if switch_case_111 is 7:
                                            if counter < 50:
                                                counter__10 = int(counter + 1)
                                                return make_invalid_arg(
                                                    counter__10, k, o, acc, fmt
                                                )
                                            return caml_trampoline_return(
                                                make_invalid_arg, [0, k, o, acc, fmt]
                                            )
                                        else:
                                            if switch_case_111 is 8:
                                                if counter < 50:
                                                    counter__11 = int(counter + 1)
                                                    return make_invalid_arg(
                                                        counter__11, k, o, acc, fmt
                                                    )
                                                return caml_trampoline_return(
                                                    make_invalid_arg,
                                                    [0, k, o, acc, fmt],
                                                )
                                            else:
                                                if switch_case_111 is 9:
                                                    fmtty = ign[2]
                                                    if counter < 50:
                                                        counter__14 = int(counter + 1)
                                                        return make_from_fmtty__0(
                                                            counter__14,
                                                            k,
                                                            o,
                                                            acc,
                                                            fmtty,
                                                            fmt,
                                                        )
                                                    return caml_trampoline_return(
                                                        make_from_fmtty__0,
                                                        [0, k, o, acc, fmtty, fmt],
                                                    )
                                                else:
                                                    if switch_case_111 is 10:
                                                        if counter < 50:
                                                            counter__12 = int(
                                                                counter + 1
                                                            )
                                                            return make_invalid_arg(
                                                                counter__12,
                                                                k,
                                                                o,
                                                                acc,
                                                                fmt,
                                                            )
                                                        return caml_trampoline_return(
                                                            make_invalid_arg,
                                                            [0, k, o, acc, fmt],
                                                        )
                                                    else:
                                                        if counter < 50:
                                                            counter__13 = int(
                                                                counter + 1
                                                            )
                                                            return make_invalid_arg(
                                                                counter__13,
                                                                k,
                                                                o,
                                                                acc,
                                                                fmt,
                                                            )
                                                        return caml_trampoline_return(
                                                            make_invalid_arg,
                                                            [0, k, o, acc, fmt],
                                                        )
            break


def make_from_fmtty__0(counter, k, o, acc, fmtty, fmt):
    if is_int(fmtty):
        if counter < 50:
            counter__0 = int(counter + 1)
            return make_invalid_arg(counter__0, k, o, acc, fmt)
        return caml_trampoline_return(make_invalid_arg, [0, k, o, acc, fmt])
    else:
        while True:
            switch_case_125 = fmtty[0]
            if switch_case_125 is 0:
                rest = fmtty[1]

                def function_expression_112(param):
                    return make_from_fmtty(k, o, acc, rest, fmt)

                return function_expression_112
            else:
                if switch_case_125 is 1:
                    rest__0 = fmtty[1]

                    def function_expression_113(param):
                        return make_from_fmtty(k, o, acc, rest__0, fmt)

                    return function_expression_113
                else:
                    if switch_case_125 is 2:
                        rest__1 = fmtty[1]

                        def function_expression_114(param):
                            return make_from_fmtty(k, o, acc, rest__1, fmt)

                        return function_expression_114
                    else:
                        if switch_case_125 is 3:
                            rest__2 = fmtty[1]

                            def function_expression_115(param):
                                return make_from_fmtty(k, o, acc, rest__2, fmt)

                            return function_expression_115
                        else:
                            if switch_case_125 is 4:
                                rest__3 = fmtty[1]

                                def function_expression_116(param):
                                    return make_from_fmtty(k, o, acc, rest__3, fmt)

                                return function_expression_116
                            else:
                                if switch_case_125 is 5:
                                    rest__4 = fmtty[1]

                                    def function_expression_117(param):
                                        return make_from_fmtty(k, o, acc, rest__4, fmt)

                                    return function_expression_117
                                else:
                                    if switch_case_125 is 6:
                                        rest__5 = fmtty[1]

                                        def function_expression_118(param):
                                            return make_from_fmtty(
                                                k, o, acc, rest__5, fmt
                                            )

                                        return function_expression_118
                                    else:
                                        if switch_case_125 is 7:
                                            rest__6 = fmtty[1]

                                            def function_expression_119(param):
                                                return make_from_fmtty(
                                                    k, o, acc, rest__6, fmt
                                                )

                                            return function_expression_119
                                        else:
                                            if switch_case_125 is 8:
                                                rest__7 = fmtty[2]

                                                def function_expression_120(param):
                                                    return make_from_fmtty(
                                                        k, o, acc, rest__7, fmt
                                                    )

                                                return function_expression_120
                                            else:
                                                if switch_case_125 is 9:
                                                    rest__8 = fmtty[3]
                                                    ty2 = fmtty[2]
                                                    ty1 = fmtty[1]
                                                    ty = trans(symm(ty1), ty2)

                                                    def function_expression_121(param):
                                                        return make_from_fmtty(
                                                            k,
                                                            o,
                                                            acc,
                                                            call2(
                                                                CamlinternalFormatBasics[
                                                                    1
                                                                ],
                                                                ty,
                                                                rest__8,
                                                            ),
                                                            fmt,
                                                        )

                                                    return function_expression_121
                                                else:
                                                    if switch_case_125 is 10:
                                                        rest__9 = fmtty[1]

                                                        def function_expression_122(
                                                            param, cV
                                                        ):
                                                            return make_from_fmtty(
                                                                k, o, acc, rest__9, fmt
                                                            )

                                                        return function_expression_122
                                                    else:
                                                        if switch_case_125 is 11:
                                                            rest__10 = fmtty[1]

                                                            def function_expression_123(
                                                                param
                                                            ):
                                                                return make_from_fmtty(
                                                                    k,
                                                                    o,
                                                                    acc,
                                                                    rest__10,
                                                                    fmt,
                                                                )

                                                            return (
                                                                function_expression_123
                                                            )
                                                        else:
                                                            if switch_case_125 is 12:
                                                                rest__11 = fmtty[1]

                                                                def function_expression_124(
                                                                    param
                                                                ):
                                                                    return make_from_fmtty(
                                                                        k,
                                                                        o,
                                                                        acc,
                                                                        rest__11,
                                                                        fmt,
                                                                    )

                                                                return function_expression_124
                                                            else:
                                                                if (
                                                                    switch_case_125
                                                                    is 13
                                                                ):
                                                                    raise (
                                                                        empty[
                                                                            "caml_wrap_thrown_exception"
                                                                        ](
                                                                            [
                                                                                0,
                                                                                Assert_failure,
                                                                                t,
                                                                            ]
                                                                        )
                                                                    )
                                                                else:
                                                                    raise (
                                                                        empty[
                                                                            "caml_wrap_thrown_exception"
                                                                        ](
                                                                            [
                                                                                0,
                                                                                Assert_failure,
                                                                                u,
                                                                            ]
                                                                        )
                                                                    )
            break


def make_invalid_arg(counter, k, o, acc, fmt):
    cU = [8, acc, cst_Printf_bad_conversion__0]
    if counter < 50:
        counter__0 = int(counter + 1)
        return make_printf__0(counter__0, k, o, cU, fmt)
    return caml_trampoline_return(make_printf__0, [0, k, o, cU, fmt])


def make_custom__0(counter, k, o, acc, rest, arity, f):
    if arity:
        arity__0 = arity[1]

        def function_expression_126(x):
            return make_custom(k, o, acc, rest, arity__0, call1(f, x))

        return function_expression_126
    cT = [4, acc, f]
    if counter < 50:
        counter__0 = int(counter + 1)
        return make_printf__0(counter__0, k, o, cT, rest)
    return caml_trampoline_return(make_printf__0, [0, k, o, cT, rest])


def make_printf(k, o, acc, fmt):
    return caml_trampoline(make_printf__0(0, k, o, acc, fmt))


def make_ignored_param(k, o, acc, ign, fmt):
    return caml_trampoline(make_ignored_param__0(0, k, o, acc, ign, fmt))


def make_from_fmtty(k, o, acc, fmtty, fmt):
    return caml_trampoline(make_from_fmtty__0(0, k, o, acc, fmtty, fmt))


def make_custom(k, o, acc, rest, arity, f):
    return caml_trampoline(make_custom__0(0, k, o, acc, rest, arity, f))


def const__0(x, param):
    return x


def fn_of_padding_precision(k, o, fmt, pad, prec):
    if is_int(pad):
        if is_int(prec):
            if 0 is prec:
                cp = make_iprintf(k, o, fmt)

                def function_expression_127(cH):
                    return const__0(cp, cH)

                return function_expression_127
            cq = make_iprintf(k, o, fmt)

            def cr(cG):
                return const__0(cq, cG)

            def function_expression_128(cF):
                return const__0(cr, cF)

            return function_expression_128
        cs = make_iprintf(k, o, fmt)

        def function_expression_129(cE):
            return const__0(cs, cE)

        return function_expression_129
    else:
        if 0 is pad[0]:
            if is_int(prec):
                if 0 is prec:
                    ct = make_iprintf(k, o, fmt)

                    def function_expression_130(cS):
                        return const__0(ct, cS)

                    return function_expression_130
                cu = make_iprintf(k, o, fmt)

                def cv(cR):
                    return const__0(cu, cR)

                def function_expression_131(cQ):
                    return const__0(cv, cQ)

                return function_expression_131
            cw = make_iprintf(k, o, fmt)

            def function_expression_132(cP):
                return const__0(cw, cP)

            return function_expression_132
        if is_int(prec):
            if 0 is prec:
                cx = make_iprintf(k, o, fmt)

                def cy(cO):
                    return const__0(cx, cO)

                def function_expression_133(cN):
                    return const__0(cy, cN)

                return function_expression_133
            cz = make_iprintf(k, o, fmt)

            def cA(cM):
                return const__0(cz, cM)

            def cB(cL):
                return const__0(cA, cL)

            def function_expression_134(cK):
                return const__0(cB, cK)

            return function_expression_134
        cC = make_iprintf(k, o, fmt)

        def cD(cJ):
            return const__0(cC, cJ)

        def function_expression_135(cI):
            return const__0(cD, cI)

        return function_expression_135


def make_iprintf__0(counter, k, o, fmt):
    k__0 = k
    fmt__0 = fmt
    while True:
        if is_int(fmt__0):
            return call1(k__0, o)
        else:
            continue_label = None
            while True:
                switch_case_155 = fmt__0[0]
                if switch_case_155 is 0:
                    rest = fmt__0[1]
                    bE = make_iprintf(k__0, o, rest)

                    def function_expression_136(co):
                        return const__0(bE, co)

                    return function_expression_136
                else:
                    if switch_case_155 is 1:
                        rest__0 = fmt__0[1]
                        bF = make_iprintf(k__0, o, rest__0)

                        def function_expression_137(cn):
                            return const__0(bF, cn)

                        return function_expression_137
                    else:
                        if switch_case_155 is 2:
                            bG = fmt__0[1]
                            if is_int(bG):
                                rest__1 = fmt__0[2]
                                bH = make_iprintf(k__0, o, rest__1)

                                def function_expression_138(cj):
                                    return const__0(bH, cj)

                                return function_expression_138
                            else:
                                if 0 is bG[0]:
                                    rest__2 = fmt__0[2]
                                    bI = make_iprintf(k__0, o, rest__2)

                                    def function_expression_139(cm):
                                        return const__0(bI, cm)

                                    return function_expression_139
                                rest__3 = fmt__0[2]
                                bJ = make_iprintf(k__0, o, rest__3)

                                def bK(cl):
                                    return const__0(bJ, cl)

                                def function_expression_140(ck):
                                    return const__0(bK, ck)

                                return function_expression_140
                        else:
                            if switch_case_155 is 3:
                                bL = fmt__0[1]
                                if is_int(bL):
                                    rest__4 = fmt__0[2]
                                    bM = make_iprintf(k__0, o, rest__4)

                                    def function_expression_141(cf):
                                        return const__0(bM, cf)

                                    return function_expression_141
                                else:
                                    if 0 is bL[0]:
                                        rest__5 = fmt__0[2]
                                        bN = make_iprintf(k__0, o, rest__5)

                                        def function_expression_142(ci):
                                            return const__0(bN, ci)

                                        return function_expression_142
                                    rest__6 = fmt__0[2]
                                    bO = make_iprintf(k__0, o, rest__6)

                                    def bP(ch):
                                        return const__0(bO, ch)

                                    def function_expression_143(cg):
                                        return const__0(bP, cg)

                                    return function_expression_143
                            else:
                                if switch_case_155 is 4:
                                    rest__7 = fmt__0[4]
                                    prec = fmt__0[3]
                                    pad = fmt__0[2]
                                    return fn_of_padding_precision(
                                        k__0, o, rest__7, pad, prec
                                    )
                                else:
                                    if switch_case_155 is 5:
                                        rest__8 = fmt__0[4]
                                        prec__0 = fmt__0[3]
                                        pad__0 = fmt__0[2]
                                        return fn_of_padding_precision(
                                            k__0, o, rest__8, pad__0, prec__0
                                        )
                                    else:
                                        if switch_case_155 is 6:
                                            rest__9 = fmt__0[4]
                                            prec__1 = fmt__0[3]
                                            pad__1 = fmt__0[2]
                                            return fn_of_padding_precision(
                                                k__0, o, rest__9, pad__1, prec__1
                                            )
                                        else:
                                            if switch_case_155 is 7:
                                                rest__10 = fmt__0[4]
                                                prec__2 = fmt__0[3]
                                                pad__2 = fmt__0[2]
                                                return fn_of_padding_precision(
                                                    k__0, o, rest__10, pad__2, prec__2
                                                )
                                            else:
                                                if switch_case_155 is 8:
                                                    rest__11 = fmt__0[4]
                                                    prec__3 = fmt__0[3]
                                                    pad__3 = fmt__0[2]
                                                    return fn_of_padding_precision(
                                                        k__0,
                                                        o,
                                                        rest__11,
                                                        pad__3,
                                                        prec__3,
                                                    )
                                                else:
                                                    if switch_case_155 is 9:
                                                        bQ = fmt__0[1]
                                                        if is_int(bQ):
                                                            rest__12 = fmt__0[2]
                                                            bR = make_iprintf(
                                                                k__0, o, rest__12
                                                            )

                                                            def function_expression_144(
                                                                cb
                                                            ):
                                                                return const__0(bR, cb)

                                                            return (
                                                                function_expression_144
                                                            )
                                                        else:
                                                            if 0 is bQ[0]:
                                                                rest__13 = fmt__0[2]
                                                                bS = make_iprintf(
                                                                    k__0, o, rest__13
                                                                )

                                                                def function_expression_145(
                                                                    ce
                                                                ):
                                                                    return const__0(
                                                                        bS, ce
                                                                    )

                                                                return function_expression_145
                                                            rest__14 = fmt__0[2]
                                                            bT = make_iprintf(
                                                                k__0, o, rest__14
                                                            )

                                                            def bU(cd):
                                                                return const__0(bT, cd)

                                                            def function_expression_146(
                                                                cc
                                                            ):
                                                                return const__0(bU, cc)

                                                            return (
                                                                function_expression_146
                                                            )
                                                    else:
                                                        if switch_case_155 is 10:
                                                            fmt__1 = fmt__0[1]
                                                            fmt__0 = fmt__1
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_155 is 11:
                                                                fmt__2 = fmt__0[2]
                                                                fmt__0 = fmt__2
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if (
                                                                    switch_case_155
                                                                    is 12
                                                                ):
                                                                    fmt__3 = fmt__0[2]
                                                                    fmt__0 = fmt__3
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_155
                                                                        is 13
                                                                    ):
                                                                        rest__15 = fmt__0[
                                                                            3
                                                                        ]
                                                                        bV = make_iprintf(
                                                                            k__0,
                                                                            o,
                                                                            rest__15,
                                                                        )

                                                                        def function_expression_147(
                                                                            ca
                                                                        ):
                                                                            return const__0(
                                                                                bV, ca
                                                                            )

                                                                        return function_expression_147
                                                                    else:
                                                                        if (
                                                                            switch_case_155
                                                                            is 14
                                                                        ):
                                                                            rest__16 = fmt__0[
                                                                                3
                                                                            ]
                                                                            fmtty = fmt__0[
                                                                                2
                                                                            ]

                                                                            def function_expression_148(
                                                                                param
                                                                            ):
                                                                                fmt = param[
                                                                                    1
                                                                                ]
                                                                                b_ = recast(
                                                                                    fmt,
                                                                                    fmtty,
                                                                                )
                                                                                return make_iprintf(
                                                                                    k__0,
                                                                                    o,
                                                                                    call2(
                                                                                        CamlinternalFormatBasics[
                                                                                            3
                                                                                        ],
                                                                                        b_,
                                                                                        rest__16,
                                                                                    ),
                                                                                )

                                                                            return function_expression_148
                                                                        else:
                                                                            if (
                                                                                switch_case_155
                                                                                is 15
                                                                            ):
                                                                                rest__17 = fmt__0[
                                                                                    1
                                                                                ]
                                                                                bW = make_iprintf(
                                                                                    k__0,
                                                                                    o,
                                                                                    rest__17,
                                                                                )

                                                                                def bX(
                                                                                    b9
                                                                                ):
                                                                                    return const__0(
                                                                                        bW,
                                                                                        b9,
                                                                                    )

                                                                                def function_expression_149(
                                                                                    b8
                                                                                ):
                                                                                    return const__0(
                                                                                        bX,
                                                                                        b8,
                                                                                    )

                                                                                return function_expression_149
                                                                            else:
                                                                                if (
                                                                                    switch_case_155
                                                                                    is 16
                                                                                ):
                                                                                    rest__18 = fmt__0[
                                                                                        1
                                                                                    ]
                                                                                    bY = make_iprintf(
                                                                                        k__0,
                                                                                        o,
                                                                                        rest__18,
                                                                                    )

                                                                                    def function_expression_150(
                                                                                        b7
                                                                                    ):
                                                                                        return const__0(
                                                                                            bY,
                                                                                            b7,
                                                                                        )

                                                                                    return function_expression_150
                                                                                else:
                                                                                    if (
                                                                                        switch_case_155
                                                                                        is 17
                                                                                    ):
                                                                                        fmt__4 = fmt__0[
                                                                                            2
                                                                                        ]
                                                                                        fmt__0 = fmt__4
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_155
                                                                                            is 18
                                                                                        ):
                                                                                            bZ = fmt__0[
                                                                                                1
                                                                                            ]
                                                                                            if (
                                                                                                0
                                                                                                is bZ[
                                                                                                    0
                                                                                                ]
                                                                                            ):
                                                                                                rest__19 = fmt__0[
                                                                                                    2
                                                                                                ]
                                                                                                match = bZ[
                                                                                                    1
                                                                                                ]
                                                                                                fmt__5 = match[
                                                                                                    1
                                                                                                ]

                                                                                                def k__3(
                                                                                                    k,
                                                                                                    rest,
                                                                                                ):
                                                                                                    def k__0(
                                                                                                        koc
                                                                                                    ):
                                                                                                        return make_iprintf(
                                                                                                            k,
                                                                                                            koc,
                                                                                                            rest,
                                                                                                        )

                                                                                                    return k__0

                                                                                                k__1 = k__3(
                                                                                                    k__0,
                                                                                                    rest__19,
                                                                                                )
                                                                                                k__0 = k__1
                                                                                                fmt__0 = fmt__5
                                                                                                continue_label = "switch"
                                                                                                break
                                                                                            rest__20 = fmt__0[
                                                                                                2
                                                                                            ]
                                                                                            match__0 = bZ[
                                                                                                1
                                                                                            ]
                                                                                            fmt__6 = match__0[
                                                                                                1
                                                                                            ]

                                                                                            def k__4(
                                                                                                k,
                                                                                                rest,
                                                                                            ):
                                                                                                def k__0(
                                                                                                    koc
                                                                                                ):
                                                                                                    return make_iprintf(
                                                                                                        k,
                                                                                                        koc,
                                                                                                        rest,
                                                                                                    )

                                                                                                return k__0

                                                                                            k__2 = k__4(
                                                                                                k__0,
                                                                                                rest__20,
                                                                                            )
                                                                                            k__0 = k__2
                                                                                            fmt__0 = fmt__6
                                                                                            continue_label = "switch"
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_155
                                                                                                is 19
                                                                                            ):
                                                                                                raise (
                                                                                                    empty[
                                                                                                        "caml_wrap_thrown_exception"
                                                                                                    ](
                                                                                                        [
                                                                                                            0,
                                                                                                            Assert_failure,
                                                                                                            v,
                                                                                                        ]
                                                                                                    )
                                                                                                )
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_155
                                                                                                    is 20
                                                                                                ):
                                                                                                    rest__21 = fmt__0[
                                                                                                        3
                                                                                                    ]
                                                                                                    b0 = make_iprintf(
                                                                                                        k__0,
                                                                                                        o,
                                                                                                        rest__21,
                                                                                                    )

                                                                                                    def function_expression_151(
                                                                                                        b6
                                                                                                    ):
                                                                                                        return const__0(
                                                                                                            b0,
                                                                                                            b6,
                                                                                                        )

                                                                                                    return function_expression_151
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_155
                                                                                                        is 21
                                                                                                    ):
                                                                                                        rest__22 = fmt__0[
                                                                                                            2
                                                                                                        ]
                                                                                                        b1 = make_iprintf(
                                                                                                            k__0,
                                                                                                            o,
                                                                                                            rest__22,
                                                                                                        )

                                                                                                        def function_expression_152(
                                                                                                            b5
                                                                                                        ):
                                                                                                            return const__0(
                                                                                                                b1,
                                                                                                                b5,
                                                                                                            )

                                                                                                        return function_expression_152
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_155
                                                                                                            is 22
                                                                                                        ):
                                                                                                            rest__23 = fmt__0[
                                                                                                                1
                                                                                                            ]
                                                                                                            b2 = make_iprintf(
                                                                                                                k__0,
                                                                                                                o,
                                                                                                                rest__23,
                                                                                                            )

                                                                                                            def function_expression_153(
                                                                                                                b4
                                                                                                            ):
                                                                                                                return const__0(
                                                                                                                    b2,
                                                                                                                    b4,
                                                                                                                )

                                                                                                            return function_expression_153
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_155
                                                                                                                is 23
                                                                                                            ):
                                                                                                                rest__24 = fmt__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                ign = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                b3 = 0

                                                                                                                def function_expression_154(
                                                                                                                    x,
                                                                                                                    param,
                                                                                                                ):
                                                                                                                    return call1(
                                                                                                                        k__0,
                                                                                                                        x,
                                                                                                                    )

                                                                                                                return make_ignored_param(
                                                                                                                    function_expression_154,
                                                                                                                    o,
                                                                                                                    b3,
                                                                                                                    ign,
                                                                                                                    rest__24,
                                                                                                                )
                                                                                                            else:
                                                                                                                rest__25 = fmt__0[
                                                                                                                    3
                                                                                                                ]
                                                                                                                arity = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                if (
                                                                                                                    counter
                                                                                                                    < 50
                                                                                                                ):
                                                                                                                    counter__0 = int(
                                                                                                                        counter
                                                                                                                        + 1
                                                                                                                    )
                                                                                                                    return fn_of_custom_arity__0(
                                                                                                                        counter__0,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        rest__25,
                                                                                                                        arity,
                                                                                                                    )
                                                                                                                return caml_trampoline_return(
                                                                                                                    fn_of_custom_arity__0,
                                                                                                                    [
                                                                                                                        0,
                                                                                                                        k__0,
                                                                                                                        o,
                                                                                                                        rest__25,
                                                                                                                        arity,
                                                                                                                    ],
                                                                                                                )
                break
            if label == "switch":
                continue


def fn_of_custom_arity__0(counter, k, o, fmt, param):
    if param:
        arity = param[1]
        bC = fn_of_custom_arity(k, o, fmt, arity)

        def function_expression_156(bD):
            return const__0(bC, bD)

        return function_expression_156
    if counter < 50:
        counter__0 = int(counter + 1)
        return make_iprintf__0(counter__0, k, o, fmt)
    return caml_trampoline_return(make_iprintf__0, [0, k, o, fmt])


def make_iprintf(k, o, fmt):
    return caml_trampoline(make_iprintf__0(0, k, o, fmt))


def fn_of_custom_arity(k, o, fmt, param):
    return caml_trampoline(fn_of_custom_arity__0(0, k, o, fmt, param))


def output_acc(o, acc):
    acc__0 = acc
    while True:
        if is_int(acc__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_157 = acc__0[0]
                if switch_case_157 is 0:
                    fmting_lit = acc__0[2]
                    p = acc__0[1]
                    s = string_of_formatting_lit(fmting_lit)
                    output_acc(o, p)
                    return call2(Pervasives[54], o, s)
                else:
                    if switch_case_157 is 1:
                        bA = acc__0[2]
                        bB = acc__0[1]
                        if 0 is bA[0]:
                            acc__1 = bA[1]
                            output_acc(o, bB)
                            call2(Pervasives[54], o, cst__17)
                            acc__0 = acc__1
                            continue_label = "switch"
                            break
                        acc__2 = bA[1]
                        output_acc(o, bB)
                        call2(Pervasives[54], o, cst__18)
                        acc__0 = acc__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_157 is 6:
                            f = acc__0[2]
                            p__2 = acc__0[1]
                            output_acc(o, p__2)
                            return call1(f, o)
                        else:
                            if switch_case_157 is 7:
                                p__3 = acc__0[1]
                                output_acc(o, p__3)
                                return call1(Pervasives[51], o)
                            else:
                                if switch_case_157 is 8:
                                    msg = acc__0[2]
                                    p__4 = acc__0[1]
                                    output_acc(o, p__4)
                                    return call1(Pervasives[1], msg)
                                else:
                                    if switch_case_157 is 2:
                                        pass
                                    else:
                                        if switch_case_157 is 4:
                                            s__0 = acc__0[2]
                                            p__0 = acc__0[1]
                                            output_acc(o, p__0)
                                            return call2(Pervasives[54], o, s__0)
                                        else:
                                            c = acc__0[2]
                                            p__1 = acc__0[1]
                                            output_acc(o, p__1)
                                            return call2(Pervasives[53], o, c)
                break
            if label == "switch":
                continue


def bufput_acc(b, acc):
    acc__0 = acc
    while True:
        if is_int(acc__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_158 = acc__0[0]
                if switch_case_158 is 0:
                    fmting_lit = acc__0[2]
                    p = acc__0[1]
                    s = string_of_formatting_lit(fmting_lit)
                    bufput_acc(b, p)
                    return call2(Buffer[14], b, s)
                else:
                    if switch_case_158 is 1:
                        by = acc__0[2]
                        bz = acc__0[1]
                        if 0 is by[0]:
                            acc__1 = by[1]
                            bufput_acc(b, bz)
                            call2(Buffer[14], b, cst__19)
                            acc__0 = acc__1
                            continue_label = "switch"
                            break
                        acc__2 = by[1]
                        bufput_acc(b, bz)
                        call2(Buffer[14], b, cst__20)
                        acc__0 = acc__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_158 is 6:
                            f = acc__0[2]
                            p__2 = acc__0[1]
                            bufput_acc(b, p__2)
                            return call1(f, b)
                        else:
                            if switch_case_158 is 7:
                                acc__3 = acc__0[1]
                                acc__0 = acc__3
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_158 is 8:
                                    msg = acc__0[2]
                                    p__3 = acc__0[1]
                                    bufput_acc(b, p__3)
                                    return call1(Pervasives[1], msg)
                                else:
                                    if switch_case_158 is 2:
                                        pass
                                    else:
                                        if switch_case_158 is 4:
                                            s__0 = acc__0[2]
                                            p__0 = acc__0[1]
                                            bufput_acc(b, p__0)
                                            return call2(Buffer[14], b, s__0)
                                        else:
                                            c = acc__0[2]
                                            p__1 = acc__0[1]
                                            bufput_acc(b, p__1)
                                            return call2(Buffer[10], b, c)
                break
            if label == "switch":
                continue


def strput_acc(b, acc):
    acc__0 = acc
    while True:
        if is_int(acc__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_159 = acc__0[0]
                if switch_case_159 is 0:
                    fmting_lit = acc__0[2]
                    p = acc__0[1]
                    s = string_of_formatting_lit(fmting_lit)
                    strput_acc(b, p)
                    return call2(Buffer[14], b, s)
                else:
                    if switch_case_159 is 1:
                        bv = acc__0[2]
                        bw = acc__0[1]
                        if 0 is bv[0]:
                            acc__1 = bv[1]
                            strput_acc(b, bw)
                            call2(Buffer[14], b, cst__21)
                            acc__0 = acc__1
                            continue_label = "switch"
                            break
                        acc__2 = bv[1]
                        strput_acc(b, bw)
                        call2(Buffer[14], b, cst__22)
                        acc__0 = acc__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_159 is 6:
                            f = acc__0[2]
                            p__2 = acc__0[1]
                            strput_acc(b, p__2)
                            bx = call1(f, 0)
                            return call2(Buffer[14], b, bx)
                        else:
                            if switch_case_159 is 7:
                                acc__3 = acc__0[1]
                                acc__0 = acc__3
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_159 is 8:
                                    msg = acc__0[2]
                                    p__3 = acc__0[1]
                                    strput_acc(b, p__3)
                                    return call1(Pervasives[1], msg)
                                else:
                                    if switch_case_159 is 2:
                                        pass
                                    else:
                                        if switch_case_159 is 4:
                                            s__0 = acc__0[2]
                                            p__0 = acc__0[1]
                                            strput_acc(b, p__0)
                                            return call2(Buffer[14], b, s__0)
                                        else:
                                            c = acc__0[2]
                                            p__1 = acc__0[1]
                                            strput_acc(b, p__1)
                                            return call2(Buffer[10], b, c)
                break
            if label == "switch":
                continue


def failwith_message(param):
    fmt = param[1]
    buf = call1(Buffer[1], 256)

    def k(param, acc):
        strput_acc(buf, acc)
        bu = call1(Buffer[2], buf)
        return call1(Pervasives[2], bu)

    return make_printf(k, 0, 0, fmt)


def open_box_of_string(str):
    if empty["caml_string_equal"](str, cst__23):
        return w
    len = caml_ml_string_length(str)

    def invalid_box(param):
        return call1(failwith_message(x), str)

    def parse_spaces(i):
        i__0 = i
        while True:
            if i__0 is len:
                return i__0
            match = caml_string_get(str, i__0)
            if 9 is not match:
                if 32 is not match:
                    return i__0
            i__1 = int(i__0 + 1)
            i__0 = i__1
            continue

    def parse_lword(i, j):
        j__0 = j
        while True:
            if j__0 is len:
                return j__0
            match = caml_string_get(str, j__0)
            switcher = int(match + -97)
            if 25 < lsr(switcher, 0):
                return j__0
            j__1 = int(j__0 + 1)
            j__0 = j__1
            continue

    def parse_int(i, j):
        j__0 = j
        while True:
            if j__0 is len:
                return j__0
            match = caml_string_get(str, j__0)
            switch__0 = (
                (0 if 58 <= match else 1) if 48 <= match else (1 if 45 is match else 0)
            )
            if switch__0:
                j__1 = int(j__0 + 1)
                j__0 = j__1
                continue
            return j__0

    wstart = parse_spaces(0)
    wend = parse_lword(wstart, wstart)
    box_name = call3(String[4], str, wstart, int(wend - wstart))
    nstart = parse_spaces(wend)
    nend = parse_int(nstart, nstart)
    if nstart is nend:
        indent = 0
    else:
        try:
            bs = empty["caml_int_of_string"](
                call3(String[4], str, nstart, int(nend - nstart))
            )
            indent = bs
        except Exception as bt:
            bt = caml_wrap_exception(bt)
            if bt[1] is not Failure:
                raise (empty["caml_wrap_thrown_exception_reraise"](bt))
            br = invalid_box(0)
            indent = br
    exp_end = parse_spaces(nend)
    if exp_end is not len:
        invalid_box(0)
    if caml_string_notequal(box_name, cst__24):
        if caml_string_notequal(box_name, cst_b):
            if caml_string_notequal(box_name, cst_h):
                if caml_string_notequal(box_name, cst_hov):
                    if caml_string_notequal(box_name, cst_hv):
                        if caml_string_notequal(box_name, cst_v):
                            box_type = invalid_box(0)
                            switch__0 = 1
                        else:
                            box_type = 1
                            switch__0 = 1
                    else:
                        box_type = 2
                        switch__0 = 1
                else:
                    box_type = 3
                    switch__0 = 1
            else:
                box_type = 0
                switch__0 = 1
        else:
            switch__0 = 0
    else:
        switch__0 = 0
    if not (switch__0):
        box_type = 4
    return [0, indent, box_type]


def make_padding_fmt_ebb(pad, fmt):
    if is_int(pad):
        return [0, 0, fmt]
    else:
        if 0 is pad[0]:
            w = pad[2]
            s = pad[1]
            return [0, [0, s, w], fmt]
        s__0 = pad[1]
        return [0, [1, s__0], fmt]


def make_precision_fmt_ebb(prec, fmt):
    if is_int(prec):
        return [0, 0, fmt] if 0 is prec else [0, 1, fmt]
    p = prec[1]
    return [0, [0, p], fmt]


def make_padprec_fmt_ebb(pad, prec, fmt):
    match = make_precision_fmt_ebb(prec, fmt)
    fmt__0 = match[2]
    prec__0 = match[1]
    if is_int(pad):
        return [0, 0, prec__0, fmt__0]
    else:
        if 0 is pad[0]:
            w = pad[2]
            s = pad[1]
            return [0, [0, s, w], prec__0, fmt__0]
        s__0 = pad[1]
        return [0, [1, s__0], prec__0, fmt__0]


def fmt_ebb_of_string(legacy_behavior, str):
    if legacy_behavior:
        flag = legacy_behavior[1]
        legacy_behavior__0 = flag
    else:
        legacy_behavior__0 = 1

    def invalid_format_message(str_ind, msg):
        return call3(failwith_message(y), str, str_ind, msg)

    def unexpected_end_of_format(end_ind):
        return invalid_format_message(end_ind, cst_unexpected_end_of_format)

    def invalid_nonnull_char_width(str_ind):
        return invalid_format_message(
            str_ind, cst_non_zero_widths_are_unsupported_for_c_conversions
        )

    def invalid_format_without(str_ind, c, s):
        return call4(failwith_message(z), str, str_ind, c, s)

    def expected_character(str_ind, expected, read):
        return call4(failwith_message(A), str, str_ind, expected, read)

    def add_literal(lit_start, str_ind, fmt):
        size = int(str_ind - lit_start)
        return (
            [0, fmt]
            if 0 is size
            else (
                [0, [12, caml_string_get(str, lit_start), fmt]]
                if 1 is size
                else [0, [11, call3(String[4], str, lit_start, size), fmt]]
            )
        )

    def parse_literal(lit_start, str_ind, end_ind):
        str_ind__0 = str_ind
        while True:
            if str_ind__0 is end_ind:
                return add_literal(lit_start, str_ind__0, 0)
            match = caml_string_get(str, str_ind__0)
            if 37 is match:
                match__0 = parse_format(str_ind__0, end_ind)
                fmt_rest = match__0[1]
                return add_literal(lit_start, str_ind__0, fmt_rest)
            if 64 is match:
                match__1 = parse_after_at(int(str_ind__0 + 1), end_ind)
                fmt_rest__0 = match__1[1]
                return add_literal(lit_start, str_ind__0, fmt_rest__0)
            str_ind__1 = int(str_ind__0 + 1)
            str_ind__0 = str_ind__1
            continue

    def parse(beg_ind, end_ind):
        return parse_literal(beg_ind, beg_ind, end_ind)

    def parse_flags(pct_ind, str_ind, end_ind, ign):
        zero = [0, 0]
        minus = [0, 0]
        plus = [0, 0]
        space = [0, 0]
        hash = [0, 0]

        def set_flag(str_ind, flag):
            bo = flag[1]
            bp = 1 - legacy_behavior__0 if bo else bo
            if bp:
                bq = caml_string_get(str, str_ind)
                call3(failwith_message(B), str, str_ind, bq)
            flag[1] = 1
            return 0

        def read_flags(str_ind):
            str_ind__0 = str_ind
            while True:
                if str_ind__0 is end_ind:
                    unexpected_end_of_format(end_ind)
                match = caml_string_get(str, str_ind__0)
                switcher = int(match + -32)
                if not (16 < lsr(switcher, 0)):
                    continue_label = None
                    while True:
                        if switcher is 0:
                            set_flag(str_ind__0, space)
                            str_ind__1 = int(str_ind__0 + 1)
                            str_ind__0 = str_ind__1
                            continue_label = "switch"
                            break
                        else:
                            if switcher is 3:
                                set_flag(str_ind__0, hash)
                                str_ind__2 = int(str_ind__0 + 1)
                                str_ind__0 = str_ind__2
                                continue_label = "switch"
                                break
                            else:
                                if switcher is 11:
                                    set_flag(str_ind__0, plus)
                                    str_ind__3 = int(str_ind__0 + 1)
                                    str_ind__0 = str_ind__3
                                    continue_label = "switch"
                                    break
                                else:
                                    if switcher is 13:
                                        set_flag(str_ind__0, minus)
                                        str_ind__4 = int(str_ind__0 + 1)
                                        str_ind__0 = str_ind__4
                                        continue_label = "switch"
                                        break
                                    else:
                                        if switcher is 16:
                                            set_flag(str_ind__0, zero)
                                            str_ind__5 = int(str_ind__0 + 1)
                                            str_ind__0 = str_ind__5
                                            continue_label = "switch"
                                            break
                        break
                    if label == "switch":
                        continue
                return parse_padding(
                    pct_ind,
                    str_ind__0,
                    end_ind,
                    zero[1],
                    minus[1],
                    plus[1],
                    hash[1],
                    space[1],
                    ign,
                )

        return read_flags(str_ind)

    def parse_ign(pct_ind, str_ind, end_ind):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        match = caml_string_get(str, str_ind)
        return (
            parse_flags(pct_ind, int(str_ind + 1), end_ind, 1)
            if 95 is match
            else parse_flags(pct_ind, str_ind, end_ind, 0)
        )

    def parse_format(pct_ind, end_ind):
        return parse_ign(pct_ind, int(pct_ind + 1), end_ind)

    def parse_conversion(
        pct_ind, str_ind, end_ind, plus, hash, space, ign, pad, prec, padprec, symb
    ):
        plus_used = [0, 0]
        hash_used = [0, 0]
        space_used = [0, 0]
        ign_used = [0, 0]
        pad_used = [0, 0]
        prec_used = [0, 0]

        def get_plus(param):
            plus_used[1] = 1
            return plus

        def get_hash(param):
            hash_used[1] = 1
            return hash

        def get_space(param):
            space_used[1] = 1
            return space

        def get_ign(param):
            ign_used[1] = 1
            return ign

        def get_pad(param):
            pad_used[1] = 1
            return pad

        def get_prec(param):
            prec_used[1] = 1
            return prec

        def get_padprec(param):
            pad_used[1] = 1
            return padprec

        def get_int_pad(param):
            pad = get_pad(0)
            match = get_prec(0)
            if is_int(match):
                if 0 is match:
                    return pad
            if is_int(pad):
                return 0
            else:
                if 0 is pad[0]:
                    if 2 <= pad[1]:
                        n = pad[2]
                        return (
                            [0, 1, n]
                            if legacy_behavior__0
                            else incompatible_flag(
                                pct_ind, str_ind, 48, cst_precision__0
                            )
                        )
                    return pad
                return (
                    (
                        G
                        if legacy_behavior__0
                        else incompatible_flag(pct_ind, str_ind, 48, cst_precision__1)
                    )
                    if 2 <= pad[1]
                    else pad
                )

        def check_no_0(symb, pad):
            if is_int(pad):
                return pad
            else:
                if 0 is pad[0]:
                    if 2 <= pad[1]:
                        width = pad[2]
                        return (
                            [0, 1, width]
                            if legacy_behavior__0
                            else incompatible_flag(pct_ind, str_ind, symb, cst_0__0)
                        )
                    return pad
                return (
                    (
                        H
                        if legacy_behavior__0
                        else incompatible_flag(pct_ind, str_ind, symb, cst_0__1)
                    )
                    if 2 <= pad[1]
                    else pad
                )

        def opt_of_pad(c, pad):
            if is_int(pad):
                return 0
            else:
                if 0 is pad[0]:
                    while True:
                        switch_case_160 = pad[1]
                        if switch_case_160 is 0:
                            width = pad[2]
                            return (
                                [0, width]
                                if legacy_behavior__0
                                else incompatible_flag(pct_ind, str_ind, c, cst__25)
                            )
                        else:
                            if switch_case_160 is 1:
                                width__0 = pad[2]
                                return [0, width__0]
                            else:
                                width__1 = pad[2]
                                return (
                                    [0, width__1]
                                    if legacy_behavior__0
                                    else incompatible_flag(
                                        pct_ind, str_ind, c, cst_0__2
                                    )
                                )
                        break
                return incompatible_flag(pct_ind, str_ind, c, cst__26)

        def get_pad_opt(c):
            return opt_of_pad(c, get_pad(0))

        def get_padprec_opt(c):
            return opt_of_pad(c, get_padprec(0))

        def get_prec_opt(param):
            match = get_prec(0)
            if is_int(match):
                return (
                    0
                    if 0 is match
                    else incompatible_flag(pct_ind, str_ind, 95, cst__27)
                )
            ndec = match[1]
            return [0, ndec]

        if 124 <= symb:
            switch__0 = 0
        else:
            while True:
                if symb is 33:
                    match__5 = parse(str_ind, end_ind)
                    fmt_rest__5 = match__5[1]
                    fmt_result = [0, [10, fmt_rest__5]]
                    switch__0 = 1
                    break
                else:
                    if symb is 40:
                        sub_end = search_subformat_end(str_ind, end_ind, 41)
                        match__7 = parse(int(sub_end + 2), end_ind)
                        fmt_rest__7 = match__7[1]
                        match__8 = parse(str_ind, sub_end)
                        sub_fmt = match__8[1]
                        sub_fmtty = fmtty_of_fmt(sub_fmt)
                        if get_ign(0):
                            ignored__2 = [9, get_pad_opt(95), sub_fmtty]
                            a5 = [0, [23, ignored__2, fmt_rest__7]]
                        else:
                            a5 = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest__7]]
                        fmt_result = a5
                        switch__0 = 1
                        break
                    else:
                        if symb is 44:
                            fmt_result = parse(str_ind, end_ind)
                            switch__0 = 1
                            break
                        else:
                            if symb is 67:
                                match__11 = parse(str_ind, end_ind)
                                fmt_rest__10 = match__11[1]
                                a7 = (
                                    [0, [23, 1, fmt_rest__10]]
                                    if get_ign(0)
                                    else [0, [1, fmt_rest__10]]
                                )
                                fmt_result = a7
                                switch__0 = 1
                                break
                            else:
                                if symb is 78:
                                    match__15 = parse(str_ind, end_ind)
                                    fmt_rest__14 = match__15[1]
                                    counter__0 = 2
                                    if get_ign(0):
                                        ignored__6 = [11, counter__0]
                                        bc = [0, [23, ignored__6, fmt_rest__14]]
                                    else:
                                        bc = [0, [21, counter__0, fmt_rest__14]]
                                    fmt_result = bc
                                    switch__0 = 1
                                    break
                                else:
                                    if symb is 83:
                                        pad__6 = check_no_0(symb, get_padprec(0))
                                        match__16 = parse(str_ind, end_ind)
                                        fmt_rest__15 = match__16[1]
                                        if get_ign(0):
                                            ignored__7 = [1, get_padprec_opt(95)]
                                            bd = [0, [23, ignored__7, fmt_rest__15]]
                                        else:
                                            match__17 = make_padding_fmt_ebb(
                                                pad__6, fmt_rest__15
                                            )
                                            fmt_rest__16 = match__17[2]
                                            pad__7 = match__17[1]
                                            bd = [0, [3, pad__7, fmt_rest__16]]
                                        fmt_result = bd
                                        switch__0 = 1
                                        break
                                    else:
                                        if symb is 91:
                                            match__20 = parse_char_set(str_ind, end_ind)
                                            char_set = match__20[2]
                                            next_ind = match__20[1]
                                            match__21 = parse(next_ind, end_ind)
                                            fmt_rest__19 = match__21[1]
                                            if get_ign(0):
                                                ignored__9 = [
                                                    10,
                                                    get_pad_opt(95),
                                                    char_set,
                                                ]
                                                bi = [0, [23, ignored__9, fmt_rest__19]]
                                            else:
                                                bi = [
                                                    0,
                                                    [
                                                        20,
                                                        get_pad_opt(91),
                                                        char_set,
                                                        fmt_rest__19,
                                                    ],
                                                ]
                                            fmt_result = bi
                                            switch__0 = 1
                                            break
                                        else:
                                            if symb is 97:
                                                match__22 = parse(str_ind, end_ind)
                                                fmt_rest__20 = match__22[1]
                                                fmt_result = [0, [15, fmt_rest__20]]
                                                switch__0 = 1
                                                break
                                            else:
                                                if symb is 99:

                                                    def char_format(fmt_rest):
                                                        return (
                                                            [0, [23, 0, fmt_rest]]
                                                            if get_ign(0)
                                                            else [0, [0, fmt_rest]]
                                                        )

                                                    def scan_format(fmt_rest):
                                                        return (
                                                            [0, [23, 3, fmt_rest]]
                                                            if get_ign(0)
                                                            else [0, [22, fmt_rest]]
                                                        )

                                                    match__23 = parse(str_ind, end_ind)
                                                    fmt_rest__21 = match__23[1]
                                                    match__24 = get_pad_opt(99)
                                                    if match__24:
                                                        bj = (
                                                            scan_format(fmt_rest__21)
                                                            if 0 is match__24[1]
                                                            else (
                                                                char_format(
                                                                    fmt_rest__21
                                                                )
                                                                if legacy_behavior__0
                                                                else invalid_nonnull_char_width(
                                                                    str_ind
                                                                )
                                                            )
                                                        )
                                                        bk = bj
                                                    else:
                                                        bk = char_format(fmt_rest__21)
                                                    fmt_result = bk
                                                    switch__0 = 1
                                                    break
                                                else:
                                                    if symb is 114:
                                                        match__25 = parse(
                                                            str_ind, end_ind
                                                        )
                                                        fmt_rest__22 = match__25[1]
                                                        bl = (
                                                            [0, [23, 2, fmt_rest__22]]
                                                            if get_ign(0)
                                                            else [0, [19, fmt_rest__22]]
                                                        )
                                                        fmt_result = bl
                                                        switch__0 = 1
                                                        break
                                                    else:
                                                        if symb is 115:
                                                            pad__9 = check_no_0(
                                                                symb, get_padprec(0)
                                                            )
                                                            match__26 = parse(
                                                                str_ind, end_ind
                                                            )
                                                            fmt_rest__23 = match__26[1]
                                                            if get_ign(0):
                                                                ignored__10 = [
                                                                    0,
                                                                    get_padprec_opt(95),
                                                                ]
                                                                bm = [
                                                                    0,
                                                                    [
                                                                        23,
                                                                        ignored__10,
                                                                        fmt_rest__23,
                                                                    ],
                                                                ]
                                                            else:
                                                                match__27 = make_padding_fmt_ebb(
                                                                    pad__9, fmt_rest__23
                                                                )
                                                                fmt_rest__24 = match__27[
                                                                    2
                                                                ]
                                                                pad__10 = match__27[1]
                                                                bm = [
                                                                    0,
                                                                    [
                                                                        2,
                                                                        pad__10,
                                                                        fmt_rest__24,
                                                                    ],
                                                                ]
                                                            fmt_result = bm
                                                            switch__0 = 1
                                                            break
                                                        else:
                                                            if symb is 116:
                                                                match__28 = parse(
                                                                    str_ind, end_ind
                                                                )
                                                                fmt_rest__25 = match__28[
                                                                    1
                                                                ]
                                                                fmt_result = [
                                                                    0,
                                                                    [16, fmt_rest__25],
                                                                ]
                                                                switch__0 = 1
                                                                break
                                                            else:
                                                                if symb is 123:
                                                                    sub_end__0 = search_subformat_end(
                                                                        str_ind,
                                                                        end_ind,
                                                                        125,
                                                                    )
                                                                    match__29 = parse(
                                                                        str_ind,
                                                                        sub_end__0,
                                                                    )
                                                                    sub_fmt__0 = match__29[
                                                                        1
                                                                    ]
                                                                    match__30 = parse(
                                                                        int(
                                                                            sub_end__0
                                                                            + 2
                                                                        ),
                                                                        end_ind,
                                                                    )
                                                                    fmt_rest__26 = match__30[
                                                                        1
                                                                    ]
                                                                    sub_fmtty__0 = fmtty_of_fmt(
                                                                        sub_fmt__0
                                                                    )
                                                                    if get_ign(0):
                                                                        ignored__11 = [
                                                                            8,
                                                                            get_pad_opt(
                                                                                95
                                                                            ),
                                                                            sub_fmtty__0,
                                                                        ]
                                                                        bn = [
                                                                            0,
                                                                            [
                                                                                23,
                                                                                ignored__11,
                                                                                fmt_rest__26,
                                                                            ],
                                                                        ]
                                                                    else:
                                                                        bn = [
                                                                            0,
                                                                            [
                                                                                13,
                                                                                get_pad_opt(
                                                                                    123
                                                                                ),
                                                                                sub_fmtty__0,
                                                                                fmt_rest__26,
                                                                            ],
                                                                        ]
                                                                    fmt_result = bn
                                                                    switch__0 = 1
                                                                    break
                                                                else:
                                                                    if symb is 66:
                                                                        pass
                                                                    else:
                                                                        if symb is 98:
                                                                            pad__3 = check_no_0(
                                                                                symb,
                                                                                get_padprec(
                                                                                    0
                                                                                ),
                                                                            )
                                                                            match__9 = parse(
                                                                                str_ind,
                                                                                end_ind,
                                                                            )
                                                                            fmt_rest__8 = match__9[
                                                                                1
                                                                            ]
                                                                            if get_ign(
                                                                                0
                                                                            ):
                                                                                ignored__3 = [
                                                                                    7,
                                                                                    get_padprec_opt(
                                                                                        95
                                                                                    ),
                                                                                ]
                                                                                a6 = [
                                                                                    0,
                                                                                    [
                                                                                        23,
                                                                                        ignored__3,
                                                                                        fmt_rest__8,
                                                                                    ],
                                                                                ]
                                                                            else:
                                                                                match__10 = make_padding_fmt_ebb(
                                                                                    pad__3,
                                                                                    fmt_rest__8,
                                                                                )
                                                                                fmt_rest__9 = match__10[
                                                                                    2
                                                                                ]
                                                                                pad__4 = match__10[
                                                                                    1
                                                                                ]
                                                                                a6 = [
                                                                                    0,
                                                                                    [
                                                                                        9,
                                                                                        pad__4,
                                                                                        fmt_rest__9,
                                                                                    ],
                                                                                ]
                                                                            fmt_result = (
                                                                                a6
                                                                            )
                                                                            switch__0 = (
                                                                                1
                                                                            )
                                                                            break
                                                                        else:
                                                                            if (
                                                                                symb
                                                                                is 37
                                                                            ):
                                                                                pass
                                                                            else:
                                                                                if (
                                                                                    symb
                                                                                    is 64
                                                                                ):
                                                                                    match__6 = parse(
                                                                                        str_ind,
                                                                                        end_ind,
                                                                                    )
                                                                                    fmt_rest__6 = match__6[
                                                                                        1
                                                                                    ]
                                                                                    fmt_result = [
                                                                                        0,
                                                                                        [
                                                                                            12,
                                                                                            symb,
                                                                                            fmt_rest__6,
                                                                                        ],
                                                                                    ]
                                                                                    switch__0 = 1
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        symb
                                                                                        is 76
                                                                                    ):
                                                                                        pass
                                                                                    else:
                                                                                        if (
                                                                                            symb
                                                                                            is 108
                                                                                        ):
                                                                                            pass
                                                                                        else:
                                                                                            if (
                                                                                                symb
                                                                                                is 110
                                                                                            ):
                                                                                                if (
                                                                                                    str_ind
                                                                                                    is end_ind
                                                                                                ):
                                                                                                    switch__1 = 1
                                                                                                else:
                                                                                                    if is_int_base(
                                                                                                        caml_string_get(
                                                                                                            str,
                                                                                                            str_ind,
                                                                                                        )
                                                                                                    ):
                                                                                                        switch__0 = 0
                                                                                                        switch__1 = 0
                                                                                                    else:
                                                                                                        switch__1 = 1
                                                                                                if switch__1:
                                                                                                    match__14 = parse(
                                                                                                        str_ind,
                                                                                                        end_ind,
                                                                                                    )
                                                                                                    fmt_rest__13 = match__14[
                                                                                                        1
                                                                                                    ]
                                                                                                    counter = counter_of_char(
                                                                                                        symb
                                                                                                    )
                                                                                                    if get_ign(
                                                                                                        0
                                                                                                    ):
                                                                                                        ignored__5 = [
                                                                                                            11,
                                                                                                            counter,
                                                                                                        ]
                                                                                                        bb = [
                                                                                                            0,
                                                                                                            [
                                                                                                                23,
                                                                                                                ignored__5,
                                                                                                                fmt_rest__13,
                                                                                                            ],
                                                                                                        ]
                                                                                                    else:
                                                                                                        bb = [
                                                                                                            0,
                                                                                                            [
                                                                                                                21,
                                                                                                                counter,
                                                                                                                fmt_rest__13,
                                                                                                            ],
                                                                                                        ]
                                                                                                    fmt_result = bb
                                                                                                    switch__0 = 1
                                                                                                break
                                                                                            else:
                                                                                                if (
                                                                                                    symb
                                                                                                    is 32
                                                                                                ):
                                                                                                    pass
                                                                                                else:
                                                                                                    if (
                                                                                                        symb
                                                                                                        is 35
                                                                                                    ):
                                                                                                        pass
                                                                                                    else:
                                                                                                        if (
                                                                                                            symb
                                                                                                            is 43
                                                                                                        ):
                                                                                                            pass
                                                                                                        else:
                                                                                                            if (
                                                                                                                symb
                                                                                                                is 45
                                                                                                            ):
                                                                                                                pass
                                                                                                            else:
                                                                                                                if (
                                                                                                                    symb
                                                                                                                    is 95
                                                                                                                ):
                                                                                                                    fmt_result = call3(
                                                                                                                        failwith_message(
                                                                                                                            L
                                                                                                                        ),
                                                                                                                        str,
                                                                                                                        pct_ind,
                                                                                                                        symb,
                                                                                                                    )
                                                                                                                    switch__0 = 1
                                                                                                                    break
                                                                                                                else:
                                                                                                                    if (
                                                                                                                        symb
                                                                                                                        is 88
                                                                                                                    ):
                                                                                                                        pass
                                                                                                                    else:
                                                                                                                        if (
                                                                                                                            symb
                                                                                                                            is 100
                                                                                                                        ):
                                                                                                                            pass
                                                                                                                        else:
                                                                                                                            if (
                                                                                                                                symb
                                                                                                                                is 105
                                                                                                                            ):
                                                                                                                                pass
                                                                                                                            else:
                                                                                                                                if (
                                                                                                                                    symb
                                                                                                                                    is 111
                                                                                                                                ):
                                                                                                                                    pass
                                                                                                                                else:
                                                                                                                                    if (
                                                                                                                                        symb
                                                                                                                                        is 117
                                                                                                                                    ):
                                                                                                                                        pass
                                                                                                                                    else:
                                                                                                                                        if (
                                                                                                                                            symb
                                                                                                                                            is 120
                                                                                                                                        ):
                                                                                                                                            be = get_space(
                                                                                                                                                0
                                                                                                                                            )
                                                                                                                                            bf = get_hash(
                                                                                                                                                0
                                                                                                                                            )
                                                                                                                                            iconv__2 = compute_int_conv(
                                                                                                                                                pct_ind,
                                                                                                                                                str_ind,
                                                                                                                                                get_plus(
                                                                                                                                                    0
                                                                                                                                                ),
                                                                                                                                                bf,
                                                                                                                                                be,
                                                                                                                                                symb,
                                                                                                                                            )
                                                                                                                                            match__18 = parse(
                                                                                                                                                str_ind,
                                                                                                                                                end_ind,
                                                                                                                                            )
                                                                                                                                            fmt_rest__17 = match__18[
                                                                                                                                                1
                                                                                                                                            ]
                                                                                                                                            if get_ign(
                                                                                                                                                0
                                                                                                                                            ):
                                                                                                                                                ignored__8 = [
                                                                                                                                                    2,
                                                                                                                                                    iconv__2,
                                                                                                                                                    get_pad_opt(
                                                                                                                                                        95
                                                                                                                                                    ),
                                                                                                                                                ]
                                                                                                                                                bg = [
                                                                                                                                                    0,
                                                                                                                                                    [
                                                                                                                                                        23,
                                                                                                                                                        ignored__8,
                                                                                                                                                        fmt_rest__17,
                                                                                                                                                    ],
                                                                                                                                                ]
                                                                                                                                            else:
                                                                                                                                                bh = get_prec(
                                                                                                                                                    0
                                                                                                                                                )
                                                                                                                                                match__19 = make_padprec_fmt_ebb(
                                                                                                                                                    get_int_pad(
                                                                                                                                                        0
                                                                                                                                                    ),
                                                                                                                                                    bh,
                                                                                                                                                    fmt_rest__17,
                                                                                                                                                )
                                                                                                                                                fmt_rest__18 = match__19[
                                                                                                                                                    3
                                                                                                                                                ]
                                                                                                                                                prec__4 = match__19[
                                                                                                                                                    2
                                                                                                                                                ]
                                                                                                                                                pad__8 = match__19[
                                                                                                                                                    1
                                                                                                                                                ]
                                                                                                                                                bg = [
                                                                                                                                                    0,
                                                                                                                                                    [
                                                                                                                                                        4,
                                                                                                                                                        iconv__2,
                                                                                                                                                        pad__8,
                                                                                                                                                        prec__4,
                                                                                                                                                        fmt_rest__18,
                                                                                                                                                    ],
                                                                                                                                                ]
                                                                                                                                            fmt_result = bg
                                                                                                                                            switch__0 = 1
                                                                                                                                            break
                                                                                                                                        else:
                                                                                                                                            if (
                                                                                                                                                symb
                                                                                                                                                is 69
                                                                                                                                            ):
                                                                                                                                                pass
                                                                                                                                            else:
                                                                                                                                                if (
                                                                                                                                                    symb
                                                                                                                                                    is 70
                                                                                                                                                ):
                                                                                                                                                    pass
                                                                                                                                                else:
                                                                                                                                                    if (
                                                                                                                                                        symb
                                                                                                                                                        is 71
                                                                                                                                                    ):
                                                                                                                                                        pass
                                                                                                                                                    else:
                                                                                                                                                        if (
                                                                                                                                                            symb
                                                                                                                                                            is 72
                                                                                                                                                        ):
                                                                                                                                                            pass
                                                                                                                                                        else:
                                                                                                                                                            if (
                                                                                                                                                                symb
                                                                                                                                                                is 101
                                                                                                                                                            ):
                                                                                                                                                                pass
                                                                                                                                                            else:
                                                                                                                                                                if (
                                                                                                                                                                    symb
                                                                                                                                                                    is 102
                                                                                                                                                                ):
                                                                                                                                                                    pass
                                                                                                                                                                else:
                                                                                                                                                                    if (
                                                                                                                                                                        symb
                                                                                                                                                                        is 103
                                                                                                                                                                    ):
                                                                                                                                                                        pass
                                                                                                                                                                    else:
                                                                                                                                                                        if (
                                                                                                                                                                            symb
                                                                                                                                                                            is 104
                                                                                                                                                                        ):
                                                                                                                                                                            a8 = get_space(
                                                                                                                                                                                0
                                                                                                                                                                            )
                                                                                                                                                                            fconv = compute_float_conv(
                                                                                                                                                                                pct_ind,
                                                                                                                                                                                str_ind,
                                                                                                                                                                                get_plus(
                                                                                                                                                                                    0
                                                                                                                                                                                ),
                                                                                                                                                                                a8,
                                                                                                                                                                                symb,
                                                                                                                                                                            )
                                                                                                                                                                            match__12 = parse(
                                                                                                                                                                                str_ind,
                                                                                                                                                                                end_ind,
                                                                                                                                                                            )
                                                                                                                                                                            fmt_rest__11 = match__12[
                                                                                                                                                                                1
                                                                                                                                                                            ]
                                                                                                                                                                            if get_ign(
                                                                                                                                                                                0
                                                                                                                                                                            ):
                                                                                                                                                                                a9 = get_prec_opt(
                                                                                                                                                                                    0
                                                                                                                                                                                )
                                                                                                                                                                                ignored__4 = [
                                                                                                                                                                                    6,
                                                                                                                                                                                    get_pad_opt(
                                                                                                                                                                                        95
                                                                                                                                                                                    ),
                                                                                                                                                                                    a9,
                                                                                                                                                                                ]
                                                                                                                                                                                a_ = [
                                                                                                                                                                                    0,
                                                                                                                                                                                    [
                                                                                                                                                                                        23,
                                                                                                                                                                                        ignored__4,
                                                                                                                                                                                        fmt_rest__11,
                                                                                                                                                                                    ],
                                                                                                                                                                                ]
                                                                                                                                                                            else:
                                                                                                                                                                                ba = get_prec(
                                                                                                                                                                                    0
                                                                                                                                                                                )
                                                                                                                                                                                match__13 = make_padprec_fmt_ebb(
                                                                                                                                                                                    get_pad(
                                                                                                                                                                                        0
                                                                                                                                                                                    ),
                                                                                                                                                                                    ba,
                                                                                                                                                                                    fmt_rest__11,
                                                                                                                                                                                )
                                                                                                                                                                                fmt_rest__12 = match__13[
                                                                                                                                                                                    3
                                                                                                                                                                                ]
                                                                                                                                                                                prec__3 = match__13[
                                                                                                                                                                                    2
                                                                                                                                                                                ]
                                                                                                                                                                                pad__5 = match__13[
                                                                                                                                                                                    1
                                                                                                                                                                                ]
                                                                                                                                                                                a_ = [
                                                                                                                                                                                    0,
                                                                                                                                                                                    [
                                                                                                                                                                                        8,
                                                                                                                                                                                        fconv,
                                                                                                                                                                                        pad__5,
                                                                                                                                                                                        prec__3,
                                                                                                                                                                                        fmt_rest__12,
                                                                                                                                                                                    ],
                                                                                                                                                                                ]
                                                                                                                                                                            fmt_result = a_
                                                                                                                                                                            switch__0 = 1
                                                                                                                                                                            break
                                                                                                                                                                        else:
                                                                                                                                                                            switch__0 = 0
                break
        if not (switch__0):
            if 108 <= symb:
                if 111 <= symb:
                    switch__2 = 0
                else:
                    switcher = int(symb + -108)
                    while True:
                        if switcher is 0:
                            aP = caml_string_get(str, str_ind)
                            aQ = get_space(0)
                            aR = get_hash(0)
                            iconv = compute_int_conv(
                                pct_ind, int(str_ind + 1), get_plus(0), aR, aQ, aP
                            )
                            match = parse(int(str_ind + 1), end_ind)
                            fmt_rest = match[1]
                            if get_ign(0):
                                ignored = [3, iconv, get_pad_opt(95)]
                                aS = [0, [23, ignored, fmt_rest]]
                            else:
                                aU = get_prec(0)
                                match__0 = make_padprec_fmt_ebb(
                                    get_int_pad(0), aU, fmt_rest
                                )
                                fmt_rest__0 = match__0[3]
                                prec__0 = match__0[2]
                                pad__0 = match__0[1]
                                aS = [0, [5, iconv, pad__0, prec__0, fmt_rest__0]]
                            aT = aS
                            switch__3 = 1
                            break
                        else:
                            if switcher is 1:
                                switch__2 = 0
                                switch__3 = 0
                                break
                            else:
                                aV = caml_string_get(str, str_ind)
                                aW = get_space(0)
                                aX = get_hash(0)
                                iconv__0 = compute_int_conv(
                                    pct_ind, int(str_ind + 1), get_plus(0), aX, aW, aV
                                )
                                match__1 = parse(int(str_ind + 1), end_ind)
                                fmt_rest__1 = match__1[1]
                                if get_ign(0):
                                    ignored__0 = [4, iconv__0, get_pad_opt(95)]
                                    aY = [0, [23, ignored__0, fmt_rest__1]]
                                else:
                                    aZ = get_prec(0)
                                    match__2 = make_padprec_fmt_ebb(
                                        get_int_pad(0), aZ, fmt_rest__1
                                    )
                                    fmt_rest__2 = match__2[3]
                                    prec__1 = match__2[2]
                                    pad__1 = match__2[1]
                                    aY = [
                                        0,
                                        [6, iconv__0, pad__1, prec__1, fmt_rest__2],
                                    ]
                                aT = aY
                                switch__3 = 1
                        break
                    if switch__3:
                        fmt_result = aT
                        switch__2 = 1
            else:
                if 76 is symb:
                    a0 = caml_string_get(str, str_ind)
                    a1 = get_space(0)
                    a2 = get_hash(0)
                    iconv__1 = compute_int_conv(
                        pct_ind, int(str_ind + 1), get_plus(0), a2, a1, a0
                    )
                    match__3 = parse(int(str_ind + 1), end_ind)
                    fmt_rest__3 = match__3[1]
                    if get_ign(0):
                        ignored__1 = [5, iconv__1, get_pad_opt(95)]
                        a3 = [0, [23, ignored__1, fmt_rest__3]]
                    else:
                        a4 = get_prec(0)
                        match__4 = make_padprec_fmt_ebb(get_int_pad(0), a4, fmt_rest__3)
                        fmt_rest__4 = match__4[3]
                        prec__2 = match__4[2]
                        pad__2 = match__4[1]
                        a3 = [0, [7, iconv__1, pad__2, prec__2, fmt_rest__4]]
                    fmt_result = a3
                    switch__2 = 1
                else:
                    switch__2 = 0
            if not (switch__2):
                fmt_result = call3(failwith_message(I), str, int(str_ind + -1), symb)
        if 1 - legacy_behavior__0:
            aG = 1 - plus_used[1]
            plus__0 = plus if aG else aG
            if plus__0:
                incompatible_flag(pct_ind, str_ind, symb, cst__28)
            aH = 1 - hash_used[1]
            hash__0 = hash if aH else aH
            if hash__0:
                incompatible_flag(pct_ind, str_ind, symb, cst__29)
            aI = 1 - space_used[1]
            space__0 = space if aI else aI
            if space__0:
                incompatible_flag(pct_ind, str_ind, symb, cst__30)
            aJ = 1 - pad_used[1]
            aK = caml_notequal([0, pad], J) if aJ else aJ
            if aK:
                incompatible_flag(pct_ind, str_ind, symb, cst_padding__0)
            aL = 1 - prec_used[1]
            aM = caml_notequal([0, prec], K) if aL else aL
            if aM:
                aN = 95 if ign else symb
                incompatible_flag(pct_ind, str_ind, aN, cst_precision__2)
            plus__1 = plus if ign else ign
            if plus__1:
                incompatible_flag(pct_ind, str_ind, 95, cst__31)
        aO = 1 - ign_used[1]
        ign__0 = ign if aO else aO
        if ign__0:
            switch__4 = (
                (0 if 44 is symb else (0 if 64 is symb else 1))
                if 38 <= symb
                else (0 if 33 is symb else (0 if 37 <= symb else 1))
            )
            switch__5 = 0 if switch__4 else (1 if legacy_behavior__0 else 0)
            if not (switch__5):
                incompatible_flag(pct_ind, str_ind, symb, cst__32)
        return fmt_result

    def parse_after_precision(
        pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, match
    ):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)

        def parse_conv(padprec):
            return parse_conversion(
                pct_ind,
                int(str_ind + 1),
                end_ind,
                plus,
                hash,
                space,
                ign,
                pad,
                match,
                padprec,
                caml_string_get(str, str_ind),
            )

        if is_int(pad):
            if is_int(match):
                if 0 is match:
                    return parse_conv(0)
            if 0 is minus:
                if is_int(match):
                    return parse_conv(E)
                n = match[1]
                return parse_conv([0, 1, n])
            if is_int(match):
                return parse_conv(F)
            n__0 = match[1]
            return parse_conv([0, 0, n__0])
        return parse_conv(pad)

    def parse_precision(pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)

        def parse_literal(minus, str_ind):
            match = parse_positive(str_ind, end_ind, 0)
            prec = match[2]
            new_ind = match[1]
            return parse_after_precision(
                pct_ind, new_ind, end_ind, minus, plus, hash, space, ign, pad, [0, prec]
            )

        symb = caml_string_get(str, str_ind)
        if 48 <= symb:
            if not (58 <= symb):
                return parse_literal(minus, str_ind)
        else:
            if 42 <= symb:
                switcher = int(symb + -42)
                while True:
                    if switcher is 0:
                        return parse_after_precision(
                            pct_ind,
                            int(str_ind + 1),
                            end_ind,
                            minus,
                            plus,
                            hash,
                            space,
                            ign,
                            pad,
                            1,
                        )
                    else:
                        if switcher is 1:
                            pass
                        else:
                            if switcher is 3:
                                if legacy_behavior__0:
                                    aF = int(str_ind + 1)
                                    minus__0 = (
                                        minus if minus else (1 if 45 is symb else 0)
                                    )
                                    return parse_literal(minus__0, aF)
                                break
                    break
        return (
            parse_after_precision(
                pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, D
            )
            if legacy_behavior__0
            else invalid_format_without(int(str_ind + -1), 46, cst_precision)
        )

    def parse_after_padding(
        pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad
    ):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        symb = caml_string_get(str, str_ind)
        return (
            parse_precision(
                pct_ind, int(str_ind + 1), end_ind, minus, plus, hash, space, ign, pad
            )
            if 46 is symb
            else parse_conversion(
                pct_ind,
                int(str_ind + 1),
                end_ind,
                plus,
                hash,
                space,
                ign,
                pad,
                0,
                pad,
                symb,
            )
        )

    def parse_padding(pct_ind, str_ind, end_ind, zero, minus, plus, hash, space, ign):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        padty = (
            (1 if 0 is minus else 0)
            if 0 is zero
            else (
                2
                if 0 is minus
                else (
                    0
                    if legacy_behavior__0
                    else incompatible_flag(pct_ind, str_ind, 45, cst_0)
                )
            )
        )
        match = caml_string_get(str, str_ind)
        if 48 <= match:
            if not (58 <= match):
                match__0 = parse_positive(str_ind, end_ind, 0)
                width = match__0[2]
                new_ind = match__0[1]
                return parse_after_padding(
                    pct_ind,
                    new_ind,
                    end_ind,
                    minus,
                    plus,
                    hash,
                    space,
                    ign,
                    [0, padty, width],
                )
        else:
            if 42 is match:
                return parse_after_padding(
                    pct_ind,
                    int(str_ind + 1),
                    end_ind,
                    minus,
                    plus,
                    hash,
                    space,
                    ign,
                    [1, padty],
                )
        while True:
            if padty is 0:
                if 1 - legacy_behavior__0:
                    invalid_format_without(int(str_ind + -1), 45, cst_padding)
                return parse_after_padding(
                    pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, 0
                )
            else:
                if padty is 1:
                    return parse_after_padding(
                        pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, 0
                    )
                else:
                    return parse_after_padding(
                        pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, C
                    )
            break

    def parse_magic_size(str_ind, end_ind):
        try:
            str_ind_1 = parse_spaces(str_ind, end_ind)
            match__2 = caml_string_get(str, str_ind_1)
            switch__0 = (
                (0 if 58 <= match__2 else 1)
                if 48 <= match__2
                else (1 if 45 is match__2 else 0)
            )
            if switch__0:
                match__3 = parse_integer(str_ind_1, end_ind)
                size = match__3[2]
                str_ind_2 = match__3[1]
                str_ind_3 = parse_spaces(str_ind_2, end_ind)
                if 62 is not caml_string_get(str, str_ind_3):
                    raise (empty["caml_wrap_thrown_exception"](Not_found))
                s = call3(
                    String[4], str, int(str_ind + -2), int(int(str_ind_3 - str_ind) + 3)
                )
                aD = [0, [0, int(str_ind_3 + 1), [1, s, size]]]
            else:
                aD = 0
            aC = aD
        except Exception as aE:
            aE = caml_wrap_exception(aE)
            if aE is not Not_found:
                if aE[1] is not Failure:
                    raise (empty["caml_wrap_thrown_exception_reraise"](aE))
            aB = 0
            aC = aB
        if aC:
            match = aC[1]
            formatting_lit = match[2]
            next_ind = match[1]
            match__0 = parse(next_ind, end_ind)
            fmt_rest = match__0[1]
            return [0, [17, formatting_lit, fmt_rest]]
        match__1 = parse(str_ind, end_ind)
        fmt_rest__0 = match__1[1]
        return [0, [17, P, fmt_rest__0]]

    def parse_good_break(str_ind, end_ind):
        try:
            au = 1 if str_ind is end_ind else 0
            av = au if au else (1 if 60 is not caml_string_get(str, str_ind) else 0)
            if av:
                raise (empty["caml_wrap_thrown_exception"](Not_found))
            str_ind_1 = parse_spaces(int(str_ind + 1), end_ind)
            match__0 = caml_string_get(str, str_ind_1)
            switch__0 = (
                (0 if 58 <= match__0 else 1)
                if 48 <= match__0
                else (1 if 45 is match__0 else 0)
            )
            if not (switch__0):
                raise (empty["caml_wrap_thrown_exception"](Not_found))
            match__1 = parse_integer(str_ind_1, end_ind)
            width = match__1[2]
            str_ind_2 = match__1[1]
            str_ind_3 = parse_spaces(str_ind_2, end_ind)
            match__2 = caml_string_get(str, str_ind_3)
            switcher = int(match__2 + -45)
            if 12 < lsr(switcher, 0):
                if 17 is switcher:
                    s = call3(
                        String[4],
                        str,
                        int(str_ind + -2),
                        int(int(str_ind_3 - str_ind) + 3),
                    )
                    aw = [0, s, width, 0]
                    ax = int(str_ind_3 + 1)
                    next_ind = ax
                    formatting_lit__0 = aw
                    switch__1 = 1
                else:
                    switch__1 = 0
            else:
                switcher__0 = int(switcher + -1)
                if 1 < lsr(switcher__0, 0):
                    match__3 = parse_integer(str_ind_3, end_ind)
                    offset = match__3[2]
                    str_ind_4 = match__3[1]
                    str_ind_5 = parse_spaces(str_ind_4, end_ind)
                    if 62 is not caml_string_get(str, str_ind_5):
                        raise (empty["caml_wrap_thrown_exception"](Not_found))
                    s__0 = call3(
                        String[4],
                        str,
                        int(str_ind + -2),
                        int(int(str_ind_5 - str_ind) + 3),
                    )
                    ay = [0, s__0, width, offset]
                    az = int(str_ind_5 + 1)
                    next_ind = az
                    formatting_lit__0 = ay
                    switch__1 = 1
                else:
                    switch__1 = 0
            if not (switch__1):
                raise (empty["caml_wrap_thrown_exception"](Not_found))
        except Exception as aA:
            aA = caml_wrap_exception(aA)
            if aA is not Not_found:
                if aA[1] is not Failure:
                    raise (empty["caml_wrap_thrown_exception_reraise"](aA))
            next_ind = str_ind
            formatting_lit__0 = formatting_lit
        match = parse(next_ind, end_ind)
        fmt_rest = match[1]
        return [0, [17, formatting_lit__0, fmt_rest]]

    def parse_tag(is_open_tag, str_ind, end_ind):
        try:
            if str_ind is end_ind:
                raise (empty["caml_wrap_thrown_exception"](Not_found))
            match__0 = caml_string_get(str, str_ind)
            if 60 is match__0:
                ind = call3(String[18], str, int(str_ind + 1), 62)
                if end_ind <= ind:
                    raise (empty["caml_wrap_thrown_exception"](Not_found))
                sub_str = call3(String[4], str, str_ind, int(int(ind - str_ind) + 1))
                match__1 = parse(int(ind + 1), end_ind)
                fmt_rest__0 = match__1[1]
                match__2 = parse(str_ind, int(ind + 1))
                sub_fmt = match__2[1]
                sub_format__0 = [0, sub_fmt, sub_str]
                formatting__0 = (
                    [0, sub_format__0]
                    if is_open_tag
                    else (
                        [1, sub_format__0]
                        if check_open_box(sub_fmt) or true
                        else [1, sub_format__0]
                    )
                )
                ar = [0, [18, formatting__0, fmt_rest__0]]
                return ar
            raise (empty["caml_wrap_thrown_exception"](Not_found))
        except Exception as at:
            at = caml_wrap_exception(at)
            if at is Not_found:
                match = parse(str_ind, end_ind)
                fmt_rest = match[1]
                formatting = [0, sub_format] if is_open_tag else [1, sub_format]
                return [0, [18, formatting, fmt_rest]]
            raise (empty["caml_wrap_thrown_exception_reraise"](at))

    def parse_after_at(str_ind, end_ind):
        if str_ind is end_ind:
            return M
        c = caml_string_get(str, str_ind)
        if 65 <= c:
            if 94 <= c:
                switcher = int(c + -123)
                if not (2 < lsr(switcher, 0)):
                    while True:
                        if switcher is 0:
                            return parse_tag(1, int(str_ind + 1), end_ind)
                        else:
                            if switcher is 1:
                                break
                            else:
                                match__0 = parse(int(str_ind + 1), end_ind)
                                fmt_rest__0 = match__0[1]
                                return [0, [17, 1, fmt_rest__0]]
                        break
            else:
                if 91 <= c:
                    switcher__0 = int(c + -91)
                    while True:
                        if switcher__0 is 0:
                            return parse_tag(0, int(str_ind + 1), end_ind)
                        else:
                            if switcher__0 is 1:
                                break
                            else:
                                match__1 = parse(int(str_ind + 1), end_ind)
                                fmt_rest__1 = match__1[1]
                                return [0, [17, 0, fmt_rest__1]]
                        break
        else:
            if 10 is c:
                match__2 = parse(int(str_ind + 1), end_ind)
                fmt_rest__2 = match__2[1]
                return [0, [17, 3, fmt_rest__2]]
            if 32 <= c:
                switcher__1 = int(c + -32)
                while True:
                    if switcher__1 is 0:
                        match__3 = parse(int(str_ind + 1), end_ind)
                        fmt_rest__3 = match__3[1]
                        return [0, [17, N, fmt_rest__3]]
                    else:
                        if switcher__1 is 5:
                            if int(str_ind + 1) < end_ind:
                                if 37 is caml_string_get(str, int(str_ind + 1)):
                                    match__4 = parse(int(str_ind + 2), end_ind)
                                    fmt_rest__4 = match__4[1]
                                    return [0, [17, 6, fmt_rest__4]]
                            match__5 = parse(str_ind, end_ind)
                            fmt_rest__5 = match__5[1]
                            return [0, [12, 64, fmt_rest__5]]
                        else:
                            if switcher__1 is 12:
                                match__6 = parse(int(str_ind + 1), end_ind)
                                fmt_rest__6 = match__6[1]
                                return [0, [17, O, fmt_rest__6]]
                            else:
                                if switcher__1 is 14:
                                    match__7 = parse(int(str_ind + 1), end_ind)
                                    fmt_rest__7 = match__7[1]
                                    return [0, [17, 4, fmt_rest__7]]
                                else:
                                    if switcher__1 is 27:
                                        return parse_good_break(
                                            int(str_ind + 1), end_ind
                                        )
                                    else:
                                        if switcher__1 is 28:
                                            return parse_magic_size(
                                                int(str_ind + 1), end_ind
                                            )
                                        else:
                                            if switcher__1 is 31:
                                                match__8 = parse(
                                                    int(str_ind + 1), end_ind
                                                )
                                                fmt_rest__8 = match__8[1]
                                                return [0, [17, 2, fmt_rest__8]]
                                            else:
                                                if switcher__1 is 32:
                                                    match__9 = parse(
                                                        int(str_ind + 1), end_ind
                                                    )
                                                    fmt_rest__9 = match__9[1]
                                                    return [0, [17, 5, fmt_rest__9]]
                    break
        match = parse(int(str_ind + 1), end_ind)
        fmt_rest = match[1]
        return [0, [17, [2, c], fmt_rest]]

    def check_open_box(fmt):
        if not (is_int(fmt)) and 11 is fmt[0]:
            if is_int(fmt[2]):
                str = fmt[1]
                try:
                    open_box_of_string(str)
                    ap = 0
                    return ap
                except Exception as aq:
                    aq = caml_wrap_exception(aq)
                    if aq[1] is Failure:
                        return 0
                    raise (empty["caml_wrap_thrown_exception_reraise"](aq))
        return 0

    def parse_char_set(str_ind, end_ind):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        char_set = create_char_set(0)

        def add_char(c):
            return add_in_char_set(char_set, c)

        def add_range(c__0, c):
            if not (c < c__0):
                i = c__0
                while True:
                    add_in_char_set(char_set, call1(Pervasives[17], i))
                    ao = int(i + 1)
                    if c is not i:
                        i = ao
                        continue
                    break
            return 0

        def fail_single_percent(str_ind):
            return call2(failwith_message(Q), str, str_ind)

        def parse_char_set_content(counter, str_ind, end_ind):
            str_ind__0 = str_ind
            while True:
                if str_ind__0 is end_ind:
                    unexpected_end_of_format(end_ind)
                c = caml_string_get(str, str_ind__0)
                if 45 is c:
                    add_char(45)
                    str_ind__1 = int(str_ind__0 + 1)
                    str_ind__0 = str_ind__1
                    continue
                if 93 is c:
                    return int(str_ind__0 + 1)
                an = int(str_ind__0 + 1)
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return parse_char_set_after_char__0(counter__0, an, end_ind, c)
                return caml_trampoline_return(
                    parse_char_set_after_char__0, [0, an, end_ind, c]
                )

        def parse_char_set_after_char__0(counter, str_ind, end_ind, c):
            str_ind__0 = str_ind
            c__0 = c
            while True:
                if str_ind__0 is end_ind:
                    unexpected_end_of_format(end_ind)
                c__1 = caml_string_get(str, str_ind__0)
                if 46 <= c__1:
                    if 64 is c__1:
                        switch__0 = 0
                    else:
                        if 93 is c__1:
                            add_char(c__0)
                            return int(str_ind__0 + 1)
                        switch__0 = 1
                else:
                    if 37 is c__1:
                        switch__0 = 0
                    else:
                        if 45 <= c__1:
                            am = int(str_ind__0 + 1)
                            if counter < 50:
                                counter__0 = int(counter + 1)
                                return parse_char_set_after_minus(
                                    counter__0, am, end_ind, c__0
                                )
                            return caml_trampoline_return(
                                parse_char_set_after_minus, [0, am, end_ind, c__0]
                            )
                        switch__0 = 1
                if not (switch__0):
                    if 37 is c__0:
                        add_char(c__1)
                        al = int(str_ind__0 + 1)
                        if counter < 50:
                            counter__1 = int(counter + 1)
                            return parse_char_set_content(counter__1, al, end_ind)
                        return caml_trampoline_return(
                            parse_char_set_content, [0, al, end_ind]
                        )
                if 37 is c__0:
                    fail_single_percent(str_ind__0)
                add_char(c__0)
                str_ind__1 = int(str_ind__0 + 1)
                str_ind__0 = str_ind__1
                c__0 = c__1
                continue

        def parse_char_set_after_minus(counter, str_ind, end_ind, c):
            if str_ind is end_ind:
                unexpected_end_of_format(end_ind)
            c__0 = caml_string_get(str, str_ind)
            if 37 is c__0:
                if int(str_ind + 1) is end_ind:
                    unexpected_end_of_format(end_ind)
                c__1 = caml_string_get(str, int(str_ind + 1))
                if 37 is not c__1:
                    if 64 is not c__1:
                        return fail_single_percent(str_ind)
                add_range(c, c__1)
                aj = int(str_ind + 2)
                if counter < 50:
                    counter__1 = int(counter + 1)
                    return parse_char_set_content(counter__1, aj, end_ind)
                return caml_trampoline_return(parse_char_set_content, [0, aj, end_ind])
            if 93 is c__0:
                add_char(c)
                add_char(45)
                return int(str_ind + 1)
            add_range(c, c__0)
            ak = int(str_ind + 1)
            if counter < 50:
                counter__0 = int(counter + 1)
                return parse_char_set_content(counter__0, ak, end_ind)
            return caml_trampoline_return(parse_char_set_content, [0, ak, end_ind])

        def parse_char_set_after_char(str_ind, end_ind, c):
            return caml_trampoline(parse_char_set_after_char__0(0, str_ind, end_ind, c))

        def parse_char_set_start(str_ind, end_ind):
            if str_ind is end_ind:
                unexpected_end_of_format(end_ind)
            c = caml_string_get(str, str_ind)
            return parse_char_set_after_char(int(str_ind + 1), end_ind, c)

        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        match = caml_string_get(str, str_ind)
        if 94 is match:
            str_ind__0 = int(str_ind + 1)
            reverse = 1
            str_ind__1 = str_ind__0
            reverse__0 = reverse
        else:
            ai = 0
            str_ind__1 = str_ind
            reverse__0 = ai
        next_ind = parse_char_set_start(str_ind__1, end_ind)
        char_set__0 = freeze_char_set(char_set)
        ah = rev_char_set(char_set__0) if reverse__0 else char_set__0
        return [0, next_ind, ah]

    def parse_spaces(str_ind, end_ind):
        str_ind__0 = str_ind
        while True:
            if str_ind__0 is end_ind:
                unexpected_end_of_format(end_ind)
            if 32 is caml_string_get(str, str_ind__0):
                str_ind__1 = int(str_ind__0 + 1)
                str_ind__0 = str_ind__1
                continue
            return str_ind__0

    def parse_positive(str_ind, end_ind, acc):
        str_ind__0 = str_ind
        acc__0 = acc
        while True:
            if str_ind__0 is end_ind:
                unexpected_end_of_format(end_ind)
            c = caml_string_get(str, str_ind__0)
            switcher = int(c + -48)
            if 9 < lsr(switcher, 0):
                return [0, str_ind__0, acc__0]
            acc__1 = int(int(acc__0 * 10) + int(c - 48))
            if Sys[13] < acc__1:
                ag = Sys[13]
                return call3(failwith_message(R), str, acc__1, ag)
            str_ind__1 = int(str_ind__0 + 1)
            str_ind__0 = str_ind__1
            acc__0 = acc__1
            continue

    def parse_integer(str_ind, end_ind):
        if str_ind is end_ind:
            unexpected_end_of_format(end_ind)
        match = caml_string_get(str, str_ind)
        if 48 <= match:
            if not (58 <= match):
                return parse_positive(str_ind, end_ind, 0)
        else:
            if 45 is match:
                if int(str_ind + 1) is end_ind:
                    unexpected_end_of_format(end_ind)
                c = caml_string_get(str, int(str_ind + 1))
                switcher = int(c + -48)
                if 9 < lsr(switcher, 0):
                    return expected_character(int(str_ind + 1), cst_digit, c)
                match__0 = parse_positive(int(str_ind + 1), end_ind, 0)
                n = match__0[2]
                next_ind = match__0[1]
                return [0, next_ind, int(-(n))]
        raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, S]))

    def search_subformat_end(str_ind, end_ind, c):
        str_ind__0 = str_ind
        while True:
            if str_ind__0 is end_ind:
                call3(failwith_message(T), str, c, end_ind)
            match = caml_string_get(str, str_ind__0)
            if 37 is match:
                if int(str_ind__0 + 1) is end_ind:
                    unexpected_end_of_format(end_ind)
                if caml_string_get(str, int(str_ind__0 + 1)) is c:
                    return str_ind__0
                match__0 = caml_string_get(str, int(str_ind__0 + 1))
                if 95 <= match__0:
                    if 123 <= match__0:
                        if not (126 <= match__0):
                            switcher = int(match__0 + -123)
                            continue_label = None
                            while True:
                                if switcher is 0:
                                    sub_end = search_subformat_end(
                                        int(str_ind__0 + 2), end_ind, 125
                                    )
                                    str_ind__2 = int(sub_end + 2)
                                    str_ind__0 = str_ind__2
                                    continue_label = "switch"
                                    break
                                else:
                                    if switcher is 1:
                                        break
                                    else:
                                        return expected_character(
                                            int(str_ind__0 + 1), cst_character, 125
                                        )
                                break
                            if label == "switch":
                                continue
                    else:
                        if not (96 <= match__0):
                            if int(str_ind__0 + 2) is end_ind:
                                unexpected_end_of_format(end_ind)
                            match__1 = caml_string_get(str, int(str_ind__0 + 2))
                            if 40 is match__1:
                                sub_end__0 = search_subformat_end(
                                    int(str_ind__0 + 3), end_ind, 41
                                )
                                str_ind__3 = int(sub_end__0 + 2)
                                str_ind__0 = str_ind__3
                                continue
                            if 123 is match__1:
                                sub_end__1 = search_subformat_end(
                                    int(str_ind__0 + 3), end_ind, 125
                                )
                                str_ind__4 = int(sub_end__1 + 2)
                                str_ind__0 = str_ind__4
                                continue
                            str_ind__5 = int(str_ind__0 + 3)
                            str_ind__0 = str_ind__5
                            continue
                else:
                    if 40 is match__0:
                        sub_end__2 = search_subformat_end(
                            int(str_ind__0 + 2), end_ind, 41
                        )
                        str_ind__6 = int(sub_end__2 + 2)
                        str_ind__0 = str_ind__6
                        continue
                    if 41 is match__0:
                        return expected_character(
                            int(str_ind__0 + 1), cst_character__0, 41
                        )
                str_ind__1 = int(str_ind__0 + 2)
                str_ind__0 = str_ind__1
                continue
            str_ind__7 = int(str_ind__0 + 1)
            str_ind__0 = str_ind__7
            continue

    def is_int_base(symb):
        af = int(symb + -88)
        if not (32 < lsr(af, 0)):
            while True:
                if af is 0:
                    pass
                else:
                    if af is 12:
                        pass
                    else:
                        if af is 17:
                            pass
                        else:
                            if af is 23:
                                pass
                            else:
                                if af is 29:
                                    pass
                                else:
                                    if af is 32:
                                        return 1
                break
        return 0

    def counter_of_char(symb):
        if 108 <= symb:
            if not (111 <= symb):
                switcher = int(symb + -108)
                while True:
                    if switcher is 0:
                        return 0
                    else:
                        if switcher is 1:
                            break
                        else:
                            return 1
                    break
        else:
            if 76 is symb:
                return 2
        raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, U]))

    def incompatible_flag(pct_ind, str_ind, symb, option):
        subfmt = call3(String[4], str, pct_ind, int(str_ind - pct_ind))
        return call5(failwith_message(X), str, pct_ind, option, symb, subfmt)

    def compute_int_conv(pct_ind, str_ind, plus, hash, space, symb):
        plus__0 = plus
        hash__0 = hash
        space__0 = space
        while True:
            if 0 is plus__0:
                if 0 is hash__0:
                    if 0 is space__0:
                        switcher = int(symb + -88)
                        if 32 < lsr(switcher, 0):
                            switch__0 = 1
                        else:
                            while True:
                                if switcher is 0:
                                    return 8
                                else:
                                    if switcher is 12:
                                        return 0
                                    else:
                                        if switcher is 17:
                                            return 3
                                        else:
                                            if switcher is 23:
                                                return 10
                                            else:
                                                if switcher is 29:
                                                    return 12
                                                else:
                                                    if switcher is 32:
                                                        return 6
                                                    else:
                                                        switch__0 = 1
                                break
                    else:
                        if 100 is symb:
                            return 2
                        if 105 is symb:
                            return 5
                        switch__0 = 1
                else:
                    if 0 is space__0:
                        if 88 is symb:
                            return 9
                        if 111 is symb:
                            return 11
                        if 120 is symb:
                            return 7
                        switch__0 = 0
                    else:
                        switch__0 = 0
            else:
                if 0 is hash__0:
                    if 0 is space__0:
                        if 100 is symb:
                            return 1
                        if 105 is symb:
                            return 4
                        switch__0 = 1
                    else:
                        switch__0 = 1
                else:
                    switch__0 = 0
            if not (switch__0):
                switcher__0 = int(symb + -88)
                if not (32 < lsr(switcher__0, 0)):
                    continue_label = None
                    while True:
                        if switcher__0 is 0:
                            if legacy_behavior__0:
                                return 9
                            break
                        else:
                            if switcher__0 is 23:
                                if legacy_behavior__0:
                                    return 11
                                break
                            else:
                                if switcher__0 is 32:
                                    if legacy_behavior__0:
                                        return 7
                                    break
                                else:
                                    if switcher__0 is 12:
                                        pass
                                    else:
                                        if switcher__0 is 17:
                                            pass
                                        else:
                                            if switcher__0 is 29:
                                                if legacy_behavior__0:
                                                    hash__0 = 0
                                                    continue_label = "switch"
                                                    break
                                                return incompatible_flag(
                                                    pct_ind, str_ind, symb, cst__36
                                                )
                        break
                    if label == "switch":
                        continue
            if 0 is plus__0:
                if 0 is space__0:
                    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, V]))
                if legacy_behavior__0:
                    space__0 = 0
                    continue
                return incompatible_flag(pct_ind, str_ind, symb, cst__33)
            if 0 is space__0:
                if legacy_behavior__0:
                    plus__0 = 0
                    continue
                return incompatible_flag(pct_ind, str_ind, symb, cst__34)
            if legacy_behavior__0:
                space__0 = 0
                continue
            return incompatible_flag(pct_ind, str_ind, 32, cst__35)

    def compute_float_conv(pct_ind, str_ind, plus, space, symb):
        plus__0 = plus
        space__0 = space
        while True:
            if 0 is plus__0:
                if 0 is space__0:
                    if 73 <= symb:
                        switcher = int(symb + -101)
                        if not (3 < lsr(switcher, 0)):
                            while True:
                                if switcher is 0:
                                    return 3
                                else:
                                    if switcher is 1:
                                        return 0
                                    else:
                                        if switcher is 2:
                                            return 9
                                        else:
                                            return 16
                                break
                    else:
                        if 69 <= symb:
                            switcher__0 = int(symb + -69)
                            while True:
                                if switcher__0 is 0:
                                    return 6
                                else:
                                    if switcher__0 is 1:
                                        return 15
                                    else:
                                        if switcher__0 is 2:
                                            return 12
                                        else:
                                            return 19
                                break
                    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, W]))
                if 73 <= symb:
                    switcher__1 = int(symb + -101)
                    if not (3 < lsr(switcher__1, 0)):
                        while True:
                            if switcher__1 is 0:
                                return 5
                            else:
                                if switcher__1 is 1:
                                    return 2
                                else:
                                    if switcher__1 is 2:
                                        return 11
                                    else:
                                        return 18
                            break
                else:
                    if 69 <= symb:
                        switcher__2 = int(symb + -69)
                        while True:
                            if switcher__2 is 0:
                                return 8
                            else:
                                if switcher__2 is 1:
                                    break
                                else:
                                    if switcher__2 is 2:
                                        return 14
                                    else:
                                        return 21
                            break
                if legacy_behavior__0:
                    space__0 = 0
                    continue
                return incompatible_flag(pct_ind, str_ind, symb, cst__37)
            if 0 is space__0:
                if 73 <= symb:
                    switcher__3 = int(symb + -101)
                    if not (3 < lsr(switcher__3, 0)):
                        while True:
                            if switcher__3 is 0:
                                return 4
                            else:
                                if switcher__3 is 1:
                                    return 1
                                else:
                                    if switcher__3 is 2:
                                        return 10
                                    else:
                                        return 17
                            break
                else:
                    if 69 <= symb:
                        switcher__4 = int(symb + -69)
                        while True:
                            if switcher__4 is 0:
                                return 7
                            else:
                                if switcher__4 is 1:
                                    break
                                else:
                                    if switcher__4 is 2:
                                        return 13
                                    else:
                                        return 20
                            break
                if legacy_behavior__0:
                    plus__0 = 0
                    continue
                return incompatible_flag(pct_ind, str_ind, symb, cst__38)
            if legacy_behavior__0:
                space__0 = 0
                continue
            return incompatible_flag(pct_ind, str_ind, 32, cst__39)

    return parse(0, caml_ml_string_length(str))


def format_of_string_fmtty(str, fmtty):
    match = fmt_ebb_of_string(0, str)
    fmt = match[1]
    try:
        ad = [0, type_format(fmt, fmtty), str]
        return ad
    except Exception as ae:
        ae = caml_wrap_exception(ae)
        if ae is Type_mismatch:
            ac = string_of_fmtty(fmtty)
            return call2(failwith_message(Y), str, ac)
        raise (empty["caml_wrap_thrown_exception_reraise"](ae))


def format_of_string_format(str, param):
    str__0 = param[2]
    fmt = param[1]
    match = fmt_ebb_of_string(0, str)
    fmt__0 = match[1]
    try:
        aa = [0, type_format(fmt__0, fmtty_of_fmt(fmt)), str]
        return aa
    except Exception as ab:
        ab = caml_wrap_exception(ab)
        if ab is Type_mismatch:
            return call2(failwith_message(Z), str, str__0)
        raise (empty["caml_wrap_thrown_exception_reraise"](ab))


CamlinternalFormat = [
    0,
    is_in_char_set,
    rev_char_set,
    create_char_set,
    add_in_char_set,
    freeze_char_set,
    param_format_of_ignored_format,
    make_printf,
    make_iprintf,
    output_acc,
    bufput_acc,
    strput_acc,
    type_format,
    fmt_ebb_of_string,
    format_of_string_fmtty,
    format_of_string_format,
    char_of_iconv,
    string_of_formatting_lit,
    string_of_formatting_gen,
    string_of_fmtty,
    string_of_fmt,
    open_box_of_string,
    symm,
    trans,
    recast,
]
empty["caml_register_global"](198, CamlinternalFormat, "CamlinternalFormat")
