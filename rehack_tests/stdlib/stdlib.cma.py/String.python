caml_blit_string = empty["caml_blit_string"]
caml_bytes_unsafe_get = empty["caml_bytes_unsafe_get"]
caml_ml_string_length = empty["caml_ml_string_length"]
string = empty["caml_new_string"]
caml_string_equal = empty["caml_string_equal"]
caml_wrap_exception = empty["caml_wrap_exception"]


def call1(f, a0):
    return f(a0) if arity_test is 1 else empty["caml_call_gen"](f, [a0])


def call2(f, a0, a1):
    return f(a0, a1) if arity_test is 2 else empty["caml_call_gen"](f, [a0, a1])


def call3(f, a0, a1, a2):
    return f(a0, a1, a2) if arity_test is 3 else empty["caml_call_gen"](f, [a0, a1, a2])


global_data = empty["caml_get_global_data"]()
cst_String_rcontains_from_Bytes_rcontains_from = string(
    "String.rcontains_from / Bytes.rcontains_from"
)
cst_String_contains_from_Bytes_contains_from = string(
    "String.contains_from / Bytes.contains_from"
)
cst_String_rindex_from_opt_Bytes_rindex_from_opt = string(
    "String.rindex_from_opt / Bytes.rindex_from_opt"
)
cst_String_rindex_from_Bytes_rindex_from = string(
    "String.rindex_from / Bytes.rindex_from"
)
cst_String_index_from_opt_Bytes_index_from_opt = string(
    "String.index_from_opt / Bytes.index_from_opt"
)
cst_String_index_from_Bytes_index_from = string("String.index_from / Bytes.index_from")
cst__0 = string("")
cst = string("")
cst_String_concat = string("String.concat")
Not_found = global_data["Not_found"]
Bytes = global_data["Bytes"]
Pervasives = global_data["Pervasives"]
bts = Bytes[42]
bos = Bytes[43]


def make(n, c):
    return call1(bts, call2(Bytes[1], n, c))


def init(n, f):
    return call1(bts, call2(Bytes[2], n, f))


def copy(s):
    K = call1(bos, s)
    return call1(bts, call1(Bytes[4], K))


def sub(s, ofs, len):
    J = call1(bos, s)
    return call1(bts, call3(Bytes[7], J, ofs, len))


fill = Bytes[10]
blit = Bytes[12]


def ensure_ge(x, y):
    return x if y <= x else call1(Pervasives[1], cst_String_concat)


def sum_lengths(acc, seplen, param):
    acc__0 = acc
    param__0 = param
    while True:
        if param__0:
            H = param__0[2]
            I = param__0[1]
            if H:
                acc__1 = ensure_ge(
                    int(int(caml_ml_string_length(I) + seplen) + acc__0), acc__0
                )
                acc__0 = acc__1
                param__0 = H
                continue
            return int(caml_ml_string_length(I) + acc__0)
        return acc__0


def unsafe_blits(dst, pos, sep, seplen, param):
    pos__0 = pos
    param__0 = param
    while True:
        if param__0:
            F = param__0[2]
            G = param__0[1]
            if F:
                caml_blit_string(G, 0, dst, pos__0, caml_ml_string_length(G))
                caml_blit_string(
                    sep, 0, dst, int(pos__0 + caml_ml_string_length(G)), seplen
                )
                pos__1 = int(int(pos__0 + caml_ml_string_length(G)) + seplen)
                pos__0 = pos__1
                param__0 = F
                continue
            caml_blit_string(G, 0, dst, pos__0, caml_ml_string_length(G))
            return dst
        return dst


def concat(sep, l):
    if l:
        seplen = caml_ml_string_length(sep)
        return call1(
            bts,
            unsafe_blits(
                empty["caml_create_bytes"](sum_lengths(0, seplen, l)), 0, sep, seplen, l
            ),
        )
    return cst


def iter(f, s):
    D = int(caml_ml_string_length(s) + -1)
    C = 0
    if not (D < 0):
        i = C
        while True:
            call1(f, caml_bytes_unsafe_get(s, i))
            E = int(i + 1)
            if D is not i:
                i = E
                continue
            break
    return 0


def iteri(f, s):
    A = int(caml_ml_string_length(s) + -1)
    z = 0
    if not (A < 0):
        i = z
        while True:
            call2(f, i, caml_bytes_unsafe_get(s, i))
            B = int(i + 1)
            if A is not i:
                i = B
                continue
            break
    return 0


def map(f, s):
    y = call1(bos, s)
    return call1(bts, call2(Bytes[17], f, y))


def mapi(f, s):
    x = call1(bos, s)
    return call1(bts, call2(Bytes[18], f, x))


def is_space(param):
    w = int(param + -9)
    switch__0 = (1 if 23 is w else 0) if 4 < lsr(w, 0) else (0 if 2 is w else 1)
    return 1 if switch__0 else 0


def trim(s):
    if caml_string_equal(s, cst__0):
        return s
    if not (is_space(caml_bytes_unsafe_get(s, 0))):
        if not (is_space(caml_bytes_unsafe_get(s, int(caml_ml_string_length(s) + -1)))):
            return s
    v = call1(bos, s)
    return call1(bts, call1(Bytes[19], v))


def escaped(s):
    def needs_escape(i):
        i__0 = i
        while True:
            if caml_ml_string_length(s) <= i__0:
                return 0
            match = caml_bytes_unsafe_get(s, i__0)
            if 32 <= match:
                u = int(match + -34)
                if 58 < lsr(u, 0):
                    if 93 <= u:
                        switch__0 = 0
                        switch__1 = 0
                    else:
                        switch__1 = 1
                else:
                    if 56 < lsr(int(u + -1), 0):
                        switch__0 = 1
                        switch__1 = 0
                    else:
                        switch__1 = 1
                if switch__1:
                    i__1 = int(i__0 + 1)
                    i__0 = i__1
                    continue
            else:
                switch__0 = (
                    (1 if 13 is match else 0)
                    if 11 <= match
                    else (1 if 8 <= match else 0)
                )
            return 1 if switch__0 else 1

    if needs_escape(0):
        t = call1(bos, s)
        return call1(bts, call1(Bytes[20], t))
    return s


def index_rec(s, lim, i, c):
    i__0 = i
    while True:
        if lim <= i__0:
            raise (empty["caml_wrap_thrown_exception"](Not_found))
        if caml_bytes_unsafe_get(s, i__0) is c:
            return i__0
        i__1 = int(i__0 + 1)
        i__0 = i__1
        continue


def index(s, c):
    return index_rec(s, caml_ml_string_length(s), 0, c)


def index_rec_opt(s, lim, i, c):
    i__0 = i
    while True:
        if lim <= i__0:
            return 0
        if caml_bytes_unsafe_get(s, i__0) is c:
            return [0, i__0]
        i__1 = int(i__0 + 1)
        i__0 = i__1
        continue


def index_opt(s, c):
    return index_rec_opt(s, caml_ml_string_length(s), 0, c)


def index_from(s, i, c):
    l = caml_ml_string_length(s)
    if 0 <= i:
        if not (l < i):
            return index_rec(s, l, i, c)
    return call1(Pervasives[1], cst_String_index_from_Bytes_index_from)


def index_from_opt(s, i, c):
    l = caml_ml_string_length(s)
    if 0 <= i:
        if not (l < i):
            return index_rec_opt(s, l, i, c)
    return call1(Pervasives[1], cst_String_index_from_opt_Bytes_index_from_opt)


def rindex_rec(s, i, c):
    i__0 = i
    while True:
        if 0 <= i__0:
            if caml_bytes_unsafe_get(s, i__0) is c:
                return i__0
            i__1 = int(i__0 + -1)
            i__0 = i__1
            continue
        raise (empty["caml_wrap_thrown_exception"](Not_found))


def rindex(s, c):
    return rindex_rec(s, int(caml_ml_string_length(s) + -1), c)


def rindex_from(s, i, c):
    if -1 <= i:
        if not (caml_ml_string_length(s) <= i):
            return rindex_rec(s, i, c)
    return call1(Pervasives[1], cst_String_rindex_from_Bytes_rindex_from)


def rindex_rec_opt(s, i, c):
    i__0 = i
    while True:
        if 0 <= i__0:
            if caml_bytes_unsafe_get(s, i__0) is c:
                return [0, i__0]
            i__1 = int(i__0 + -1)
            i__0 = i__1
            continue
        return 0


def rindex_opt(s, c):
    return rindex_rec_opt(s, int(caml_ml_string_length(s) + -1), c)


def rindex_from_opt(s, i, c):
    if -1 <= i:
        if not (caml_ml_string_length(s) <= i):
            return rindex_rec_opt(s, i, c)
    return call1(Pervasives[1], cst_String_rindex_from_opt_Bytes_rindex_from_opt)


def contains_from(s, i, c):
    l = caml_ml_string_length(s)
    if 0 <= i:
        if not (l < i):
            try:
                index_rec(s, l, i, c)
                r = 1
                return r
            except:
                s = caml_wrap_exception(s)
                if s is Not_found:
                    return 0
                raise (empty["caml_wrap_thrown_exception_reraise"](s))
    return call1(Pervasives[1], cst_String_contains_from_Bytes_contains_from)


def contains(s, c):
    return contains_from(s, 0, c)


def rcontains_from(s, i, c):
    if 0 <= i:
        if not (caml_ml_string_length(s) <= i):
            try:
                rindex_rec(s, i, c)
                p = 1
                return p
            except:
                q = caml_wrap_exception(q)
                if q is Not_found:
                    return 0
                raise (empty["caml_wrap_thrown_exception_reraise"](q))
    return call1(Pervasives[1], cst_String_rcontains_from_Bytes_rcontains_from)


def uppercase_ascii(s):
    o = call1(bos, s)
    return call1(bts, call1(Bytes[36], o))


def lowercase_ascii(s):
    n = call1(bos, s)
    return call1(bts, call1(Bytes[37], n))


def capitalize_ascii(s):
    m = call1(bos, s)
    return call1(bts, call1(Bytes[38], m))


def uncapitalize_ascii(s):
    l = call1(bos, s)
    return call1(bts, call1(Bytes[39], l))


def compare(x, y):
    return empty["caml_string_compare"](x, y)


def split_on_char(sep, s):
    r = [0, 0]
    j = [0, caml_ml_string_length(s)]
    h = int(caml_ml_string_length(s) + -1)
    if not (h < 0):
        i__0 = h
        while True:
            if caml_bytes_unsafe_get(s, i__0) is sep:
                j = r[1]
                r[1] = [0, sub(s, int(i__0 + 1), int(int(j[1] - i__0) + -1)), j]
                j[1] = i__0
            k = int(i__0 + -1)
            if 0 is not i__0:
                i__0 = k
                continue
            break
    i = r[1]
    return [0, sub(s, 0, j[1]), i]


def uppercase(s):
    g = call1(bos, s)
    return call1(bts, call1(Bytes[32], g))


def lowercase(s):
    f = call1(bos, s)
    return call1(bts, call1(Bytes[33], f))


def capitalize(s):
    e = call1(bos, s)
    return call1(bts, call1(Bytes[34], e))


def uncapitalize(s):
    d = call1(bos, s)
    return call1(bts, call1(Bytes[35], d))


def function_expression_9(c, b):
    return caml_string_equal(c, b)


String = [
    0,
    make,
    init,
    copy,
    sub,
    fill,
    blit,
    concat,
    iter,
    iteri,
    map,
    mapi,
    trim,
    escaped,
    index,
    index_opt,
    rindex,
    rindex_opt,
    index_from,
    index_from_opt,
    rindex_from,
    rindex_from_opt,
    contains,
    contains_from,
    rcontains_from,
    uppercase,
    lowercase,
    capitalize,
    uncapitalize,
    uppercase_ascii,
    lowercase_ascii,
    capitalize_ascii,
    uncapitalize_ascii,
    compare,
    function_expression_9,
    split_on_char,
]
empty["caml_register_global"](12, String, "String_")
