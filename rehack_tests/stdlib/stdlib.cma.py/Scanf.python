caml_bytes_get = empty["caml_bytes_get"]
caml_int_of_string = empty["caml_int_of_string"]
caml_ml_string_length = empty["caml_ml_string_length"]
string = empty["caml_new_string"]
caml_string_get = empty["caml_string_get"]
caml_string_notequal = empty["caml_string_notequal"]
caml_trampoline = empty["caml_trampoline"]
caml_trampoline_return = empty["caml_trampoline_return"]
caml_wrap_exception = empty["caml_wrap_exception"]


def call1(f, a0):
    return f(a0) if arity_test is 1 else empty["caml_call_gen"](f, [a0])


def call2(f, a0, a1):
    return f(a0, a1) if arity_test is 2 else empty["caml_call_gen"](f, [a0, a1])


def call3(f, a0, a1, a2):
    return f(a0, a1, a2) if arity_test is 3 else empty["caml_call_gen"](f, [a0, a1, a2])


def call4(f, a0, a1, a2, a3):
    return (
        f(a0, a1, a2, a3)
        if arity_test is 4
        else empty["caml_call_gen"](f, [a0, a1, a2, a3])
    )


global_data = empty["caml_get_global_data"]()
cst_end_of_input_not_found = string("end of input not found")
cst_scanf_bad_conversion_a = string('scanf: bad conversion "%a"')
cst_scanf_bad_conversion_t = string('scanf: bad conversion "%t"')
cst_scanf_missing_reader = string("scanf: missing reader")
cst_scanf_bad_conversion_custom_converter = string(
    'scanf: bad conversion "%?" (custom converter)'
)
cst_scanf_bad_conversion = string('scanf: bad conversion "%*"')
cst_scanf_bad_conversion__1 = string('scanf: bad conversion "%*"')
cst_scanf_bad_conversion__0 = string('scanf: bad conversion "%-"')
cst_scanf_bad_conversion__2 = string('scanf: bad conversion "%*"')
cst__2 = string('"')
cst__3 = string('"')
cst__1 = string('"')
cst_in_format = string(' in format "')
cst_an = string("an")
cst_x = string("x")
cst_nfinity = string("nfinity")
cst_digits = string("digits")
cst_decimal_digits = string("decimal digits")
cst_0b = string("0b")
cst_0o = string("0o")
cst_0u = string("0u")
cst_0x = string("0x")
cst_false = string("false")
cst_true = string("true")
cst_not_a_valid_float_in_hexadecimal_notation = string(
    "not a valid float in hexadecimal notation"
)
cst_no_dot_or_exponent_part_found_in_float_token = string(
    "no dot or exponent part found in float token"
)
cst__0 = string("-")
cst_unnamed_function = string("unnamed function")
cst_unnamed_character_string = string("unnamed character string")
cst_unnamed_Pervasives_input_channel = string("unnamed Pervasives input channel")
cst = string("-")
cst_Scanf_Scan_failure = string("Scanf.Scan_failure")
cst_binary = string("binary")
cst_octal = string("octal")
cst_hexadecimal = string("hexadecimal")
cst_a_Char = string("a Char")
cst_a_String = string("a String")
CamlinternalFormat = global_data["CamlinternalFormat"]
CamlinternalFormatBasics = global_data["CamlinternalFormatBasics"]
String = global_data["String_"]
Failure = global_data["Failure"]
Pervasives = global_data["Pervasives"]
Assert_failure = global_data["Assert_failure"]
Buffer = global_data["Buffer"]
End_of_file = global_data["End_of_file"]
Invalid_argument = global_data["Invalid_argument"]
Printf = global_data["Printf"]
List = global_data["List_"]
Not_found = global_data["Not_found"]
s = [0, 91]
r = [0, 123]
t = [0, string("scanf.ml"), 1455, 13]
u = [0, [3, 0, [10, 0]], string("%S%!")]
q = [0, 37, string("")]
p = [
    0,
    [
        11,
        string("scanf: bad input at char number "),
        [4, 3, 0, 0, [11, string(": "), [2, 0, 0]]],
    ],
    string("scanf: bad input at char number %i: %s"),
]
o = [
    0,
    [11, string("the character "), [1, [11, string(" cannot start a boolean"), 0]]],
    string("the character %C cannot start a boolean"),
]
n = [
    0,
    [11, string("bad character hexadecimal encoding \\"), [0, [0, 0]]],
    string("bad character hexadecimal encoding \\%c%c"),
]
m = [
    0,
    [11, string("bad character decimal encoding \\"), [0, [0, [0, 0]]]],
    string("bad character decimal encoding \\%c%c%c"),
]
l = [
    0,
    [
        11,
        string("character "),
        [1, [11, string(" is not a valid "), [2, 0, [11, string(" digit"), 0]]]],
    ],
    string("character %C is not a valid %s digit"),
]
k = [
    0,
    [11, string("character "), [1, [11, string(" is not a decimal digit"), 0]]],
    string("character %C is not a decimal digit"),
]
j = [0, string("scanf.ml"), 555, 9]
i = [
    0,
    [11, string("invalid boolean '"), [2, 0, [12, 39, 0]]],
    string("invalid boolean '%s'"),
]
h = [
    0,
    [11, string("looking for "), [1, [11, string(", found "), [1, 0]]]],
    string("looking for %C, found %C"),
]
g = [
    0,
    [
        11,
        string("scanning of "),
        [
            2,
            0,
            [
                11,
                string(" failed: premature end of file occurred before end of token"),
                0,
            ],
        ],
    ],
    string("scanning of %s failed: premature end of file occurred before end of token"),
]
f = [
    0,
    [
        11,
        string("scanning of "),
        [
            2,
            0,
            [11, string(" failed: the specified length was too short for token"), 0],
        ],
    ],
    string("scanning of %s failed: the specified length was too short for token"),
]
e = [
    0,
    [11, string("illegal escape character "), [1, 0]],
    string("illegal escape character %C"),
]
null_char = 0


def next_char(ib):
    try:
        c = call1(ib[7], 0)
        ib[2] = c
        ib[3] = 1
        ib[4] = int(ib[4] + 1)
        if 10 is c:
            ib[5] = int(ib[5] + 1)
        return c
    except:
        bJ = caml_wrap_exception(bJ)
        if bJ is End_of_file:
            ib[2] = null_char
            ib[3] = 0
            ib[1] = 1
            return null_char
        raise (empty["caml_wrap_thrown_exception_reraise"](bJ))


def peek_char(ib):
    return ib[2] if ib[3] else next_char(ib)


def checked_peek_char(ib):
    c = peek_char(ib)
    if ib[1]:
        raise (empty["caml_wrap_thrown_exception"](End_of_file))
    return c


def end_of_input(ib):
    peek_char(ib)
    return ib[1]


def eof(ib):
    return ib[1]


def beginning_of_input(ib):
    return 1 if 0 is ib[4] else 0


def name_of_input(ib):
    bI = ib[9]
    if is_int(bI):
        return cst_unnamed_function if 0 is bI else cst_unnamed_character_string
    else:
        if 0 is bI[0]:
            return cst_unnamed_Pervasives_input_channel
        fname = bI[1]
        return fname


def char_count(ib):
    return int(ib[4] + -1) if ib[3] else ib[4]


def line_count(ib):
    return ib[5]


def reset_token(ib):
    return call1(Buffer[9], ib[8])


def invalidate_current_char(ib):
    ib[3] = 0
    return 0


def token_string(ib):
    token_buffer = ib[8]
    tok = call1(Buffer[2], token_buffer)
    call1(Buffer[8], token_buffer)
    ib[6] = int(ib[6] + 1)
    return tok


def token_count(ib):
    return ib[6]


def skip_char(width, ib):
    invalidate_current_char(ib)
    return width


def ignore_char(width, ib):
    return skip_char(int(width + -1), ib)


def store_char(width, ib, c):
    call2(Buffer[10], ib[8], c)
    return ignore_char(width, ib)


default_token_buffer_size = 1024


def create(iname, next):
    return [
        0,
        0,
        null_char,
        0,
        0,
        0,
        0,
        next,
        call1(Buffer[1], default_token_buffer_size),
        iname,
    ]


def from_string(s):
    i = [0, 0]
    len = caml_ml_string_length(s)

    def next(param):
        if len <= i[1]:
            raise (empty["caml_wrap_thrown_exception"](End_of_file))
        c = caml_string_get(s, i[1])
        i[1] += 1
        return c

    return create(1, next)


b = 0


def from_function(bH):
    return create(b, bH)


len = 1024


def scan_close_at_end(ic):
    call1(Pervasives[81], ic)
    raise (empty["caml_wrap_thrown_exception"](End_of_file))


def scan_raise_at_end(ic):
    raise (empty["caml_wrap_thrown_exception"](End_of_file))


def from_ic(scan_close_ic, iname, ic):
    buf = empty["caml_create_bytes"](1024)
    i = [0, 0]
    lim = [0, 0]
    eof = [0, 0]

    def next(param):
        if i[1] < lim[1]:
            c = caml_bytes_get(buf, i[1])
            i[1] += 1
            return c
        if eof[1]:
            raise (empty["caml_wrap_thrown_exception"](End_of_file))
        lim[1] = call4(Pervasives[72], ic, buf, 0, len)
        return (
            (
                call1(scan_close_ic, ic)
                if UnsupportedAssignOp or true
                else call1(scan_close_ic, ic)
            )
            if 0 is lim[1]
            else (
                caml_bytes_get(buf, 0)
                if UnsupportedAssignOp or true
                else caml_bytes_get(buf, 0)
            )
        )

    return create(iname, next)


def from_ic_close_at_end(bF, bG):
    return from_ic(scan_close_at_end, bF, bG)


def from_ic_raise_at_end(bD, bE):
    return from_ic(scan_raise_at_end, bD, bE)


stdin = from_ic(scan_raise_at_end, [1, cst, Pervasives[26]], Pervasives[26])


def open_in_file(open_in, fname):
    if caml_string_notequal(fname, cst__0):
        ic = call1(open_in, fname)
        return from_ic_close_at_end([1, fname, ic], ic)
    return stdin


c = Pervasives[67]


def open_in(bC):
    return open_in_file(c, bC)


d = Pervasives[68]


def open_in_bin(bB):
    return open_in_file(d, bB)


def from_channel(ic):
    return from_ic_raise_at_end([0, ic], ic)


def close_in(ib):
    bA = ib[9]
    if is_int(bA):
        return 0
    else:
        if 0 is bA[0]:
            ic = bA[1]
            return call1(Pervasives[81], ic)
        ic__0 = bA[2]
        return call1(Pervasives[81], ic__0)


memo = [0, 0]


def memo_from_ic(scan_close_ic, ic):
    try:
        by = call2(List[40], ic, memo[1])
        return by
    except:
        bz = caml_wrap_exception(bz)
        if bz is Not_found:
            ib = from_ic(scan_close_ic, [0, ic], ic)
            memo[1] = [0, [0, ic, ib], memo[1]]
            return ib
        raise (empty["caml_wrap_thrown_exception_reraise"](bz))


def memo_from_channel(bx):
    return memo_from_ic(scan_raise_at_end, bx)


Scan_failure = [248, cst_Scanf_Scan_failure, empty["caml_fresh_oo_id"](0)]


def bad_input(s):
    raise (empty["caml_wrap_thrown_exception"]([0, Scan_failure, s]))


def bad_input_escape(c):
    return bad_input(call2(Printf[4], e, c))


def bad_token_length(message):
    return bad_input(call2(Printf[4], f, message))


def bad_end_of_input(message):
    return bad_input(call2(Printf[4], g, message))


def bad_float(param):
    return bad_input(cst_no_dot_or_exponent_part_found_in_float_token)


def bad_hex_float(param):
    return bad_input(cst_not_a_valid_float_in_hexadecimal_notation)


def character_mismatch_err(c, ci):
    return call3(Printf[4], h, c, ci)


def character_mismatch(c, ci):
    return bad_input(character_mismatch_err(c, ci))


def skip_whites(ib):
    while True:
        c = peek_char(ib)
        bv = 1 - eof(ib)
        if bv:
            bw = int(c + -9)
            switch__0 = (
                (1 if 23 is bw else 0)
                if 4 < lsr(bw, 0)
                else (1 if 1 < lsr(int(bw + -2), 0) else 0)
            )
            if switch__0:
                invalidate_current_char(ib)
                continue
            return 0
        return bv


def check_this_char(ib, c):
    ci = checked_peek_char(ib)
    return invalidate_current_char(ib) if ci is c else character_mismatch(c, ci)


def check_newline(ib):
    ci = checked_peek_char(ib)
    return (
        invalidate_current_char(ib)
        if 10 is ci
        else (
            (
                check_this_char(ib, 10)
                if invalidate_current_char(ib) or true
                else check_this_char(ib, 10)
            )
            if 13 is ci
            else character_mismatch(10, ci)
        )
    )


def check_char(ib, c):
    return (
        check_newline(ib)
        if 10 is c
        else (skip_whites(ib) if 32 is c else check_this_char(ib, c))
    )


def token_char(ib):
    return caml_string_get(token_string(ib), 0)


def token_bool(ib):
    s = token_string(ib)
    return (
        (bad_input(call2(Printf[4], i, s)) if caml_string_notequal(s, cst_true) else 1)
        if caml_string_notequal(s, cst_false)
        else 0
    )


def integer_conversion_of_char(param):
    switcher = int(param + -88)
    if not (32 < lsr(switcher, 0)):
        while True:
            if switcher is 10:
                return 0
            else:
                if switcher is 12:
                    return 1
                else:
                    if switcher is 17:
                        return 2
                    else:
                        if switcher is 23:
                            return 3
                        else:
                            if switcher is 29:
                                return 4
                            else:
                                if switcher is 0:
                                    pass
                                else:
                                    if switcher is 32:
                                        return 5
            break
    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, j]))


def token_int_literal(conv, ib):
    while True:
        if conv is 0:
            br = token_string(ib)
            tok = call2(Pervasives[16], cst_0b, br)
            break
        else:
            if conv is 3:
                bs = token_string(ib)
                tok = call2(Pervasives[16], cst_0o, bs)
                break
            else:
                if conv is 4:
                    bt = token_string(ib)
                    tok = call2(Pervasives[16], cst_0u, bt)
                    break
                else:
                    if conv is 5:
                        bu = token_string(ib)
                        tok = call2(Pervasives[16], cst_0x, bu)
                        break
                    else:
                        tok = token_string(ib)
        break
    l = caml_ml_string_length(tok)
    if 0 is not l:
        if 43 is caml_string_get(tok, 0):
            return call3(String[4], tok, 1, int(l + -1))
    return tok


def token_int(conv, ib):
    return caml_int_of_string(token_int_literal(conv, ib))


def token_float(ib):
    return empty["caml_float_of_string"](token_string(ib))


def token_nativeint(conv, ib):
    return caml_int_of_string(token_int_literal(conv, ib))


def token_int32(conv, ib):
    return caml_int_of_string(token_int_literal(conv, ib))


def token_int64(conv, ib):
    return empty["caml_int64_of_string"](token_int_literal(conv, ib))


def scan_decimal_digit_star(width, ib):
    width__0 = width
    while True:
        if 0 is width__0:
            return width__0
        c = peek_char(ib)
        if eof(ib):
            return width__0
        if 58 <= c:
            if 95 is c:
                width__1 = ignore_char(width__0, ib)
                width__0 = width__1
                continue
        else:
            if 48 <= c:
                width__2 = store_char(width__0, ib, c)
                width__0 = width__2
                continue
        return width__0


def scan_decimal_digit_plus(width, ib):
    if 0 is width:
        return bad_token_length(cst_decimal_digits)
    c = checked_peek_char(ib)
    switcher = int(c + -48)
    if 9 < lsr(switcher, 0):
        return bad_input(call2(Printf[4], k, c))
    width__0 = store_char(width, ib, c)
    return scan_decimal_digit_star(width__0, ib)


def scan_digit_star(digitp, width, ib):
    def scan_digits(width, ib):
        width__0 = width
        while True:
            if 0 is width__0:
                return width__0
            c = peek_char(ib)
            if eof(ib):
                return width__0
            if call1(digitp, c):
                width__1 = store_char(width__0, ib, c)
                width__0 = width__1
                continue
            if 95 is c:
                width__2 = ignore_char(width__0, ib)
                width__0 = width__2
                continue
            return width__0

    return scan_digits(width, ib)


def scan_digit_plus(basis, digitp, width, ib):
    if 0 is width:
        return bad_token_length(cst_digits)
    c = checked_peek_char(ib)
    if call1(digitp, c):
        width__0 = store_char(width, ib, c)
        return scan_digit_star(digitp, width__0, ib)
    return bad_input(call3(Printf[4], l, c, basis))


def is_binary_digit(param):
    switcher = int(param + -48)
    return 0 if 1 < lsr(switcher, 0) else 1


def scan_binary_int(bp, bq):
    return scan_digit_plus(cst_binary, is_binary_digit, bp, bq)


def is_octal_digit(param):
    switcher = int(param + -48)
    return 0 if 7 < lsr(switcher, 0) else 1


def scan_octal_int(bn, bo):
    return scan_digit_plus(cst_octal, is_octal_digit, bn, bo)


def is_hexa_digit(param):
    bm = int(param + -48)
    switch__0 = (
        (0 if 5 < lsr(int(bm + -49), 0) else 1)
        if 22 < lsr(bm, 0)
        else (1 if 6 < lsr(int(bm + -10), 0) else 0)
    )
    return 1 if switch__0 else 0


def scan_hexadecimal_int(bk, bl):
    return scan_digit_plus(cst_hexadecimal, is_hexa_digit, bk, bl)


def scan_sign(width, ib):
    c = checked_peek_char(ib)
    switcher = int(c + -43)
    if not (2 < lsr(switcher, 0)):
        while True:
            if switcher is 0:
                return store_char(width, ib, c)
            else:
                if switcher is 1:
                    break
                else:
                    return store_char(width, ib, c)
            break
    return width


def scan_optionally_signed_decimal_int(width, ib):
    width__0 = scan_sign(width, ib)
    return scan_decimal_digit_plus(width__0, ib)


def scan_unsigned_int(width, ib):
    c = checked_peek_char(ib)
    if 48 is c:
        width__0 = store_char(width, ib, c)
        if 0 is width__0:
            return width__0
        c__0 = peek_char(ib)
        if eof(ib):
            return width__0
        if 99 <= c__0:
            if 111 is c__0:
                return scan_octal_int(store_char(width__0, ib, c__0), ib)
            switch__0 = 1 if 120 is c__0 else 0
        else:
            if 88 is c__0:
                switch__0 = 1
            else:
                if 98 <= c__0:
                    return scan_binary_int(store_char(width__0, ib, c__0), ib)
                switch__0 = 0
        return (
            scan_hexadecimal_int(store_char(width__0, ib, c__0), ib)
            if switch__0
            else scan_decimal_digit_star(width__0, ib)
        )
    return scan_decimal_digit_plus(width, ib)


def scan_optionally_signed_int(width, ib):
    width__0 = scan_sign(width, ib)
    return scan_unsigned_int(width__0, ib)


def scan_int_conversion(conv, width, ib):
    while True:
        if conv is 0:
            return scan_binary_int(width, ib)
        else:
            if conv is 1:
                return scan_optionally_signed_decimal_int(width, ib)
            else:
                if conv is 2:
                    return scan_optionally_signed_int(width, ib)
                else:
                    if conv is 3:
                        return scan_octal_int(width, ib)
                    else:
                        if conv is 4:
                            return scan_decimal_digit_plus(width, ib)
                        else:
                            return scan_hexadecimal_int(width, ib)
        break


def scan_fractional_part(width, ib):
    if 0 is width:
        return width
    c = peek_char(ib)
    if eof(ib):
        return width
    switcher = int(c + -48)
    return (
        width
        if 9 < lsr(switcher, 0)
        else scan_decimal_digit_star(store_char(width, ib, c), ib)
    )


def scan_exponent_part(width, ib):
    if 0 is width:
        return width
    c = peek_char(ib)
    if eof(ib):
        return width
    if 69 is not c:
        if 101 is not c:
            return width
    return scan_optionally_signed_decimal_int(store_char(width, ib, c), ib)


def scan_integer_part(width, ib):
    width__0 = scan_sign(width, ib)
    return scan_decimal_digit_star(width__0, ib)


def scan_float(width, precision, ib):
    width__0 = scan_integer_part(width, ib)
    if 0 is width__0:
        return [0, width__0, precision]
    c = peek_char(ib)
    if eof(ib):
        return [0, width__0, precision]
    if 46 is c:
        width__1 = store_char(width__0, ib, c)
        precision__0 = call2(Pervasives[4], width__1, precision)
        width__2 = int(
            width__1 - int(precision__0 - scan_fractional_part(precision__0, ib))
        )
        return [0, scan_exponent_part(width__2, ib), precision__0]
    return [0, scan_exponent_part(width__0, ib), precision]


def check_case_insensitive_string(width, ib, error, str):
    def lowercase(c):
        switcher = int(c + -65)
        return (
            c if 25 < lsr(switcher, 0) else call1(Pervasives[17], int(int(c - 65) + 97))
        )

    len = caml_ml_string_length(str)
    width__0 = [0, width]
    bh = int(len + -1)
    bg = 0
    if not (bh < 0):
        i = bg
        while True:
            c = peek_char(ib)
            bi = lowercase(caml_string_get(str, i))
            if lowercase(c) is not bi:
                call1(error, 0)
            if 0 is width__0[1]:
                call1(error, 0)
            width__0[1] = store_char(width__0[1], ib, c)
            bj = int(i + 1)
            if bh is not i:
                i = bj
                continue
            break
    return width__0[1]


def scan_hex_float(width, precision, ib):
    a4 = 1 if 0 is width else 0
    a5 = a4 if a4 else end_of_input(ib)
    if a5:
        bad_hex_float(0)
    width__0 = scan_sign(width, ib)
    a6 = 1 if 0 is width__0 else 0
    a7 = a6 if a6 else end_of_input(ib)
    if a7:
        bad_hex_float(0)
    c = peek_char(ib)
    if 78 <= c:
        switcher = int(c + -79)
        if 30 < lsr(switcher, 0):
            if not (32 <= switcher):
                width__1 = store_char(width__0, ib, c)
                a8 = 1 if 0 is width__1 else 0
                a9 = a8 if a8 else end_of_input(ib)
                if a9:
                    bad_hex_float(0)
                return check_case_insensitive_string(
                    width__1, ib, bad_hex_float, cst_an
                )
            switch__0 = 0
        else:
            switch__0 = 1 if 26 is switcher else 0
    else:
        if 48 is c:
            width__3 = store_char(width__0, ib, c)
            bb = 1 if 0 is width__3 else 0
            bc = bb if bb else end_of_input(ib)
            if bc:
                bad_hex_float(0)
            width__4 = check_case_insensitive_string(width__3, ib, bad_hex_float, cst_x)
            if 0 is not width__4:
                if not (end_of_input(ib)):
                    match = peek_char(ib)
                    bd = int(match + -46)
                    switch__1 = (
                        (1 if 66 is bd else 0)
                        if 34 < lsr(bd, 0)
                        else (1 if 32 < lsr(int(bd + -1), 0) else 0)
                    )
                    width__5 = (
                        width__4 if switch__1 else scan_hexadecimal_int(width__4, ib)
                    )
                    if 0 is not width__5:
                        if not (end_of_input(ib)):
                            c__0 = peek_char(ib)
                            if 46 is c__0:
                                width__6 = store_char(width__5, ib, c__0)
                                if 0 is width__6:
                                    switch__2 = 0
                                else:
                                    if end_of_input(ib):
                                        switch__2 = 0
                                    else:
                                        match__0 = peek_char(ib)
                                        if 80 is match__0:
                                            switch__3 = 0
                                        else:
                                            if 112 is match__0:
                                                switch__3 = 0
                                            else:
                                                precision__0 = call2(
                                                    Pervasives[4], width__6, precision
                                                )
                                                width__10 = int(
                                                    width__6
                                                    - int(
                                                        precision__0
                                                        - scan_hexadecimal_int(
                                                            precision__0, ib
                                                        )
                                                    )
                                                )
                                                switch__3 = 1
                                        if not (switch__3):
                                            width__10 = width__6
                                        width__7 = width__10
                                        switch__2 = 1
                                if not (switch__2):
                                    width__7 = width__6
                                width__8 = width__7
                            else:
                                width__8 = width__5
                            if 0 is not width__8:
                                if not (end_of_input(ib)):
                                    c__1 = peek_char(ib)
                                    if 80 is not c__1:
                                        if 112 is not c__1:
                                            return width__8
                                    width__9 = store_char(width__8, ib, c__1)
                                    be = 1 if 0 is width__9 else 0
                                    bf = be if be else end_of_input(ib)
                                    if bf:
                                        bad_hex_float(0)
                                    return scan_optionally_signed_decimal_int(
                                        width__9, ib
                                    )
                            return width__8
                    return width__5
            return width__4
        switch__0 = 1 if 73 is c else 0
    if switch__0:
        width__2 = store_char(width__0, ib, c)
        a_ = 1 if 0 is width__2 else 0
        ba = a_ if a_ else end_of_input(ib)
        if ba:
            bad_hex_float(0)
        return check_case_insensitive_string(width__2, ib, bad_hex_float, cst_nfinity)
    return bad_hex_float(0)


def scan_caml_float_rest(width, precision, ib):
    a0 = 1 if 0 is width else 0
    a1 = a0 if a0 else end_of_input(ib)
    if a1:
        bad_float(0)
    width__0 = scan_decimal_digit_star(width, ib)
    a2 = 1 if 0 is width__0 else 0
    a3 = a2 if a2 else end_of_input(ib)
    if a3:
        bad_float(0)
    c = peek_char(ib)
    switcher = int(c + -69)
    if 32 < lsr(switcher, 0):
        if -23 is switcher:
            width__1 = store_char(width__0, ib, c)
            precision__0 = call2(Pervasives[4], width__1, precision)
            width_precision = scan_fractional_part(precision__0, ib)
            frac_width = int(precision__0 - width_precision)
            width__2 = int(width__1 - frac_width)
            return scan_exponent_part(width__2, ib)
    else:
        switcher__0 = int(switcher + -1)
        if 30 < lsr(switcher__0, 0):
            return scan_exponent_part(width__0, ib)
    return bad_float(0)


def scan_caml_float(width, precision, ib):
    aM = 1 if 0 is width else 0
    aN = aM if aM else end_of_input(ib)
    if aN:
        bad_float(0)
    width__0 = scan_sign(width, ib)
    aO = 1 if 0 is width__0 else 0
    aP = aO if aO else end_of_input(ib)
    if aP:
        bad_float(0)
    c = peek_char(ib)
    if 49 <= c:
        if not (58 <= c):
            width__1 = store_char(width__0, ib, c)
            aQ = 1 if 0 is width__1 else 0
            aR = aQ if aQ else end_of_input(ib)
            if aR:
                bad_float(0)
            return scan_caml_float_rest(width__1, precision, ib)
    else:
        if 48 <= c:
            width__2 = store_char(width__0, ib, c)
            aS = 1 if 0 is width__2 else 0
            aT = aS if aS else end_of_input(ib)
            if aT:
                bad_float(0)
            c__0 = peek_char(ib)
            if 88 is not c__0:
                if 120 is not c__0:
                    return scan_caml_float_rest(width__2, precision, ib)
            width__3 = store_char(width__2, ib, c__0)
            aU = 1 if 0 is width__3 else 0
            aV = aU if aU else end_of_input(ib)
            if aV:
                bad_float(0)
            width__4 = scan_hexadecimal_int(width__3, ib)
            aW = 1 if 0 is width__4 else 0
            aX = aW if aW else end_of_input(ib)
            if aX:
                bad_float(0)
            c__1 = peek_char(ib)
            switcher = int(c__1 + -80)
            if 32 < lsr(switcher, 0):
                if -34 is switcher:
                    width__5 = store_char(width__4, ib, c__1)
                    if 0 is width__5:
                        switch__1 = 0
                    else:
                        if end_of_input(ib):
                            switch__1 = 0
                        else:
                            match = peek_char(ib)
                            if 80 is match:
                                switch__2 = 0
                            else:
                                if 112 is match:
                                    switch__2 = 0
                                else:
                                    precision__0 = call2(
                                        Pervasives[4], width__5, precision
                                    )
                                    width__10 = int(
                                        width__5
                                        - int(
                                            precision__0
                                            - scan_hexadecimal_int(precision__0, ib)
                                        )
                                    )
                                    switch__2 = 1
                            if not (switch__2):
                                width__10 = width__5
                            width__6 = width__10
                            switch__1 = 1
                    if not (switch__1):
                        width__6 = width__5
                    width__7 = width__6
                    switch__0 = 0
                else:
                    switch__0 = 1
            else:
                switcher__0 = int(switcher + -1)
                if 30 < lsr(switcher__0, 0):
                    width__7 = width__4
                    switch__0 = 0
                else:
                    switch__0 = 1
            width__8 = bad_float(0) if switch__0 else width__7
            if 0 is not width__8:
                if not (end_of_input(ib)):
                    c__2 = peek_char(ib)
                    if 80 is not c__2:
                        if 112 is not c__2:
                            return width__8
                    width__9 = store_char(width__8, ib, c__2)
                    aY = 1 if 0 is width__9 else 0
                    aZ = aY if aY else end_of_input(ib)
                    if aZ:
                        bad_hex_float(0)
                    return scan_optionally_signed_decimal_int(width__9, ib)
            return width__8
    return bad_float(0)


def scan_string(stp, width, ib):
    def loop(width):
        width__0 = width
        while True:
            if 0 is width__0:
                return width__0
            c = peek_char(ib)
            if eof(ib):
                return width__0
            if stp:
                c__0 = stp[1]
                if c is c__0:
                    return skip_char(width__0, ib)
                width__1 = store_char(width__0, ib, c)
                width__0 = width__1
                continue
            aL = int(c + -9)
            switch__0 = (
                (1 if 23 is aL else 0)
                if 4 < lsr(aL, 0)
                else (1 if 1 < lsr(int(aL + -2), 0) else 0)
            )
            if switch__0:
                return width__0
            width__2 = store_char(width__0, ib, c)
            width__0 = width__2
            continue

    return loop(width)


def scan_char(width, ib):
    return store_char(width, ib, checked_peek_char(ib))


def char_for_backslash(c):
    if 110 <= c:
        if not (117 <= c):
            switcher = int(c + -110)
            while True:
                if switcher is 0:
                    return 10
                else:
                    if switcher is 4:
                        return 13
                    else:
                        if switcher is 6:
                            return 9
                break
    else:
        if 98 is c:
            return 8
    return c


def decimal_value_of_char(c):
    return int(c - 48)


def char_for_decimal_code(c0, c1, c2):
    aJ = decimal_value_of_char(c2)
    aK = int(10 * decimal_value_of_char(c1))
    c = int(int(int(100 * decimal_value_of_char(c0)) + aK) + aJ)
    if 0 <= c:
        if not (255 < c):
            return call1(Pervasives[17], c)
    return bad_input(call4(Printf[4], m, c0, c1, c2))


def hexadecimal_value_of_char(d):
    return int(d + -87) if 97 <= d else (int(d + -55) if 65 <= d else int(d - 48))


def char_for_hexadecimal_code(c1, c2):
    aI = hexadecimal_value_of_char(c2)
    c = int(int(16 * hexadecimal_value_of_char(c1)) + aI)
    if 0 <= c:
        if not (255 < c):
            return call1(Pervasives[17], c)
    return bad_input(call3(Printf[4], n, c1, c2))


def check_next_char(message, width, ib):
    if 0 is width:
        return bad_token_length(message)
    c = peek_char(ib)
    return bad_end_of_input(message) if eof(ib) else c


def check_next_char_for_char(aG, aH):
    return check_next_char(cst_a_Char, aG, aH)


def check_next_char_for_string(aE, aF):
    return check_next_char(cst_a_String, aE, aF)


def scan_backslash_char(width, ib):
    c = check_next_char_for_char(width, ib)
    if 40 <= c:
        if 58 <= c:
            switcher = int(c + -92)
            if 28 < lsr(switcher, 0):
                switch__0 = 0
            else:
                while True:
                    if switcher is 28:

                        def get_digit(param):
                            c = next_char(ib)
                            aD = int(c + -48)
                            switch__0 = (
                                (0 if 5 < lsr(int(aD + -49), 0) else 1)
                                if 22 < lsr(aD, 0)
                                else (1 if 6 < lsr(int(aD + -10), 0) else 0)
                            )
                            return c if switch__0 else bad_input_escape(c)

                        c1 = get_digit(0)
                        c2 = get_digit(0)
                        return store_char(
                            int(width + -2), ib, char_for_hexadecimal_code(c1, c2)
                        )
                    else:
                        if switcher is 0:
                            pass
                        else:
                            if switcher is 6:
                                pass
                            else:
                                if switcher is 18:
                                    pass
                                else:
                                    if switcher is 22:
                                        pass
                                    else:
                                        if switcher is 24:
                                            switch__0 = 1
                                            break
                                        else:
                                            switch__0 = 0
                    break
        else:
            if 48 <= c:

                def get_digit__0(param):
                    c = next_char(ib)
                    switcher = int(c + -48)
                    return bad_input_escape(c) if 9 < lsr(switcher, 0) else c

                c1__0 = get_digit__0(0)
                c2__0 = get_digit__0(0)
                return store_char(
                    int(width + -2), ib, char_for_decimal_code(c, c1__0, c2__0)
                )
            switch__0 = 0
    else:
        switch__0 = 1 if 34 is c else (1 if 39 <= c else 0)
    return (
        store_char(width, ib, char_for_backslash(c))
        if switch__0
        else bad_input_escape(c)
    )


def scan_caml_char(width, ib):
    def find_stop(width):
        c = check_next_char_for_char(width, ib)
        return ignore_char(width, ib) if 39 is c else character_mismatch(39, c)

    def find_char(width):
        c = check_next_char_for_char(width, ib)
        return (
            find_stop(scan_backslash_char(ignore_char(width, ib), ib))
            if 92 is c
            else find_stop(store_char(width, ib, c))
        )

    def find_start(width):
        c = checked_peek_char(ib)
        return (
            find_char(ignore_char(width, ib)) if 39 is c else character_mismatch(39, c)
        )

    return find_start(width)


def scan_caml_string(width, ib):
    def find_stop__0(counter, width):
        width__0 = width
        while True:
            c = check_next_char_for_string(width__0, ib)
            if 34 is c:
                return ignore_char(width__0, ib)
            if 92 is c:
                aC = ignore_char(width__0, ib)
                if counter < 50:
                    counter__0 = int(counter + 1)
                    return scan_backslash(counter__0, aC)
                return caml_trampoline_return(scan_backslash, [0, aC])
            width__1 = store_char(width__0, ib, c)
            width__0 = width__1
            continue

    def scan_backslash(counter, width):
        match = check_next_char_for_string(width, ib)
        if 10 is match:
            az = ignore_char(width, ib)
            if counter < 50:
                counter__0 = int(counter + 1)
                return skip_spaces(counter__0, az)
            return caml_trampoline_return(skip_spaces, [0, az])
        if 13 is match:
            aA = ignore_char(width, ib)
            if counter < 50:
                counter__1 = int(counter + 1)
                return skip_newline(counter__1, aA)
            return caml_trampoline_return(skip_newline, [0, aA])
        aB = scan_backslash_char(width, ib)
        if counter < 50:
            counter__2 = int(counter + 1)
            return find_stop__0(counter__2, aB)
        return caml_trampoline_return(find_stop__0, [0, aB])

    def skip_newline(counter, width):
        match = check_next_char_for_string(width, ib)
        if 10 is match:
            ax = ignore_char(width, ib)
            if counter < 50:
                counter__0 = int(counter + 1)
                return skip_spaces(counter__0, ax)
            return caml_trampoline_return(skip_spaces, [0, ax])
        ay = store_char(width, ib, 13)
        if counter < 50:
            counter__1 = int(counter + 1)
            return find_stop__0(counter__1, ay)
        return caml_trampoline_return(find_stop__0, [0, ay])

    def skip_spaces(counter, width):
        width__0 = width
        while True:
            match = check_next_char_for_string(width__0, ib)
            if 32 is match:
                width__1 = ignore_char(width__0, ib)
                width__0 = width__1
                continue
            if counter < 50:
                counter__0 = int(counter + 1)
                return find_stop__0(counter__0, width__0)
            return caml_trampoline_return(find_stop__0, [0, width__0])

    def find_stop(width):
        return caml_trampoline(find_stop__0(0, width))

    def find_start(width):
        c = checked_peek_char(ib)
        return (
            find_stop(ignore_char(width, ib)) if 34 is c else character_mismatch(34, c)
        )

    return find_start(width)


def scan_bool(ib):
    c = checked_peek_char(ib)
    m = 5 if 102 is c else (4 if 116 is c else bad_input(call2(Printf[4], o, c)))
    return scan_string(0, m, ib)


def scan_chars_in_char_set(char_set, scan_indic, width, ib):
    def scan_chars(i, stp):
        i__0 = i
        while True:
            c = peek_char(ib)
            at = 1 if 0 < i__0 else 0
            if at:
                au = 1 - eof(ib)
                if au:
                    av = call2(CamlinternalFormat[1], char_set, c)
                    aw = (1 if c is not stp else 0) if av else av
                else:
                    aw = au
            else:
                aw = at
            if aw:
                store_char(Pervasives[7], ib, c)
                i__1 = int(i__0 + -1)
                i__0 = i__1
                continue
            return aw

    if scan_indic:
        c = scan_indic[1]
        scan_chars(width, c)
        ar = 1 - eof(ib)
        if ar:
            ci = peek_char(ib)
            return invalidate_current_char(ib) if c is ci else character_mismatch(c, ci)
        return ar
    return scan_chars(width, -1)


def scanf_bad_input(ib, x):
    if x[1] is Scan_failure:
        s = x[2]
    else:
        if x[1] is not Failure:
            raise (empty["caml_wrap_thrown_exception"](x))
        s = x[2]
    i = char_count(ib)
    return bad_input(call3(Printf[4], p, i, s))


def get_counter(ib, counter):
    while True:
        if counter is 0:
            return line_count(ib)
        else:
            if counter is 1:
                return char_count(ib)
            else:
                return token_count(ib)
        break


def width_of_pad_opt(pad_opt):
    if pad_opt:
        width = pad_opt[1]
        return width
    return Pervasives[7]


def stopper_of_formatting_lit(fmting):
    if 6 is fmting:
        return q
    str = call1(CamlinternalFormat[17], fmting)
    stp = caml_string_get(str, 1)
    sub_str = call3(String[4], str, 2, int(caml_ml_string_length(str) + -2))
    return [0, stp, sub_str]


def take_format_readers__0(counter, k, fmt):
    fmt__0 = fmt
    while True:
        if is_int(fmt__0):
            return call1(k, 0)
        else:
            continue_label = None
            while True:
                switch_case_198 = fmt__0[0]
                if switch_case_198 is 0:
                    fmt__1 = fmt__0[1]
                    fmt__0 = fmt__1
                    continue_label = "switch"
                    break
                else:
                    if switch_case_198 is 1:
                        fmt__2 = fmt__0[1]
                        fmt__0 = fmt__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_198 is 2:
                            fmt__3 = fmt__0[2]
                            fmt__0 = fmt__3
                            continue_label = "switch"
                            break
                        else:
                            if switch_case_198 is 3:
                                fmt__4 = fmt__0[2]
                                fmt__0 = fmt__4
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_198 is 4:
                                    fmt__5 = fmt__0[4]
                                    fmt__0 = fmt__5
                                    continue_label = "switch"
                                    break
                                else:
                                    if switch_case_198 is 5:
                                        fmt__6 = fmt__0[4]
                                        fmt__0 = fmt__6
                                        continue_label = "switch"
                                        break
                                    else:
                                        if switch_case_198 is 6:
                                            fmt__7 = fmt__0[4]
                                            fmt__0 = fmt__7
                                            continue_label = "switch"
                                            break
                                        else:
                                            if switch_case_198 is 7:
                                                fmt__8 = fmt__0[4]
                                                fmt__0 = fmt__8
                                                continue_label = "switch"
                                                break
                                            else:
                                                if switch_case_198 is 8:
                                                    fmt__9 = fmt__0[4]
                                                    fmt__0 = fmt__9
                                                    continue_label = "switch"
                                                    break
                                                else:
                                                    if switch_case_198 is 9:
                                                        fmt__10 = fmt__0[2]
                                                        fmt__0 = fmt__10
                                                        continue_label = "switch"
                                                        break
                                                    else:
                                                        if switch_case_198 is 10:
                                                            fmt__11 = fmt__0[1]
                                                            fmt__0 = fmt__11
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_198 is 11:
                                                                fmt__12 = fmt__0[2]
                                                                fmt__0 = fmt__12
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if (
                                                                    switch_case_198
                                                                    is 12
                                                                ):
                                                                    fmt__13 = fmt__0[2]
                                                                    fmt__0 = fmt__13
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_198
                                                                        is 13
                                                                    ):
                                                                        fmt__14 = fmt__0[
                                                                            3
                                                                        ]
                                                                        fmt__0 = fmt__14
                                                                        continue_label = (
                                                                            "switch"
                                                                        )
                                                                        break
                                                                    else:
                                                                        if (
                                                                            switch_case_198
                                                                            is 14
                                                                        ):
                                                                            rest = fmt__0[
                                                                                3
                                                                            ]
                                                                            fmtty = fmt__0[
                                                                                2
                                                                            ]
                                                                            ao = call1(
                                                                                CamlinternalFormat[
                                                                                    22
                                                                                ],
                                                                                fmtty,
                                                                            )
                                                                            ap = call1(
                                                                                CamlinternalFormatBasics[
                                                                                    2
                                                                                ],
                                                                                ao,
                                                                            )
                                                                            if (
                                                                                counter
                                                                                < 50
                                                                            ):
                                                                                counter__1 = int(
                                                                                    counter
                                                                                    + 1
                                                                                )
                                                                                return take_fmtty_format_readers__0(
                                                                                    counter__1,
                                                                                    k,
                                                                                    ap,
                                                                                    rest,
                                                                                )
                                                                            return caml_trampoline_return(
                                                                                take_fmtty_format_readers__0,
                                                                                [
                                                                                    0,
                                                                                    k,
                                                                                    ap,
                                                                                    rest,
                                                                                ],
                                                                            )
                                                                        else:
                                                                            if (
                                                                                switch_case_198
                                                                                is 15
                                                                            ):
                                                                                fmt__15 = fmt__0[
                                                                                    1
                                                                                ]
                                                                                fmt__0 = fmt__15
                                                                                continue_label = "switch"
                                                                                break
                                                                            else:
                                                                                if (
                                                                                    switch_case_198
                                                                                    is 16
                                                                                ):
                                                                                    fmt__16 = fmt__0[
                                                                                        1
                                                                                    ]
                                                                                    fmt__0 = fmt__16
                                                                                    continue_label = "switch"
                                                                                    break
                                                                                else:
                                                                                    if (
                                                                                        switch_case_198
                                                                                        is 17
                                                                                    ):
                                                                                        fmt__17 = fmt__0[
                                                                                            2
                                                                                        ]
                                                                                        fmt__0 = fmt__17
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_198
                                                                                            is 18
                                                                                        ):
                                                                                            aq = fmt__0[
                                                                                                1
                                                                                            ]
                                                                                            if (
                                                                                                0
                                                                                                is aq[
                                                                                                    0
                                                                                                ]
                                                                                            ):
                                                                                                rest__0 = fmt__0[
                                                                                                    2
                                                                                                ]
                                                                                                match = aq[
                                                                                                    1
                                                                                                ]
                                                                                                fmt__18 = match[
                                                                                                    1
                                                                                                ]
                                                                                                fmt__19 = call2(
                                                                                                    CamlinternalFormatBasics[
                                                                                                        3
                                                                                                    ],
                                                                                                    fmt__18,
                                                                                                    rest__0,
                                                                                                )
                                                                                                fmt__0 = fmt__19
                                                                                                continue_label = "switch"
                                                                                                break
                                                                                            rest__1 = fmt__0[
                                                                                                2
                                                                                            ]
                                                                                            match__0 = aq[
                                                                                                1
                                                                                            ]
                                                                                            fmt__20 = match__0[
                                                                                                1
                                                                                            ]
                                                                                            fmt__21 = call2(
                                                                                                CamlinternalFormatBasics[
                                                                                                    3
                                                                                                ],
                                                                                                fmt__20,
                                                                                                rest__1,
                                                                                            )
                                                                                            fmt__0 = fmt__21
                                                                                            continue_label = "switch"
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_198
                                                                                                is 19
                                                                                            ):
                                                                                                fmt_rest = fmt__0[
                                                                                                    1
                                                                                                ]

                                                                                                def function_expression_197(
                                                                                                    reader
                                                                                                ):
                                                                                                    def new_k(
                                                                                                        readers_rest
                                                                                                    ):
                                                                                                        return call1(
                                                                                                            k,
                                                                                                            [
                                                                                                                0,
                                                                                                                reader,
                                                                                                                readers_rest,
                                                                                                            ],
                                                                                                        )

                                                                                                    return take_format_readers(
                                                                                                        new_k,
                                                                                                        fmt_rest,
                                                                                                    )

                                                                                                return function_expression_197
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_198
                                                                                                    is 20
                                                                                                ):
                                                                                                    fmt__22 = fmt__0[
                                                                                                        3
                                                                                                    ]
                                                                                                    fmt__0 = fmt__22
                                                                                                    continue_label = "switch"
                                                                                                    break
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_198
                                                                                                        is 21
                                                                                                    ):
                                                                                                        fmt__23 = fmt__0[
                                                                                                            2
                                                                                                        ]
                                                                                                        fmt__0 = fmt__23
                                                                                                        continue_label = "switch"
                                                                                                        break
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_198
                                                                                                            is 22
                                                                                                        ):
                                                                                                            fmt__24 = fmt__0[
                                                                                                                1
                                                                                                            ]
                                                                                                            fmt__0 = fmt__24
                                                                                                            continue_label = "switch"
                                                                                                            break
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_198
                                                                                                                is 23
                                                                                                            ):
                                                                                                                rest__2 = fmt__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                ign = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                if (
                                                                                                                    counter
                                                                                                                    < 50
                                                                                                                ):
                                                                                                                    counter__0 = int(
                                                                                                                        counter
                                                                                                                        + 1
                                                                                                                    )
                                                                                                                    return take_ignored_format_readers(
                                                                                                                        counter__0,
                                                                                                                        k,
                                                                                                                        ign,
                                                                                                                        rest__2,
                                                                                                                    )
                                                                                                                return caml_trampoline_return(
                                                                                                                    take_ignored_format_readers,
                                                                                                                    [
                                                                                                                        0,
                                                                                                                        k,
                                                                                                                        ign,
                                                                                                                        rest__2,
                                                                                                                    ],
                                                                                                                )
                                                                                                            else:
                                                                                                                fmt__25 = fmt__0[
                                                                                                                    3
                                                                                                                ]
                                                                                                                fmt__0 = fmt__25
                                                                                                                continue_label = "switch"
                                                                                                                break
                break
            if label == "switch":
                continue


def take_fmtty_format_readers__0(counter, k, fmtty, fmt):
    fmtty__0 = fmtty
    while True:
        if is_int(fmtty__0):
            if counter < 50:
                counter__0 = int(counter + 1)
                return take_format_readers__0(counter__0, k, fmt)
            return caml_trampoline_return(take_format_readers__0, [0, k, fmt])
        else:
            continue_label = None
            while True:
                switch_case_201 = fmtty__0[0]
                if switch_case_201 is 0:
                    fmtty__1 = fmtty__0[1]
                    fmtty__0 = fmtty__1
                    continue_label = "switch"
                    break
                else:
                    if switch_case_201 is 1:
                        fmtty__2 = fmtty__0[1]
                        fmtty__0 = fmtty__2
                        continue_label = "switch"
                        break
                    else:
                        if switch_case_201 is 2:
                            fmtty__3 = fmtty__0[1]
                            fmtty__0 = fmtty__3
                            continue_label = "switch"
                            break
                        else:
                            if switch_case_201 is 3:
                                fmtty__4 = fmtty__0[1]
                                fmtty__0 = fmtty__4
                                continue_label = "switch"
                                break
                            else:
                                if switch_case_201 is 4:
                                    fmtty__5 = fmtty__0[1]
                                    fmtty__0 = fmtty__5
                                    continue_label = "switch"
                                    break
                                else:
                                    if switch_case_201 is 5:
                                        fmtty__6 = fmtty__0[1]
                                        fmtty__0 = fmtty__6
                                        continue_label = "switch"
                                        break
                                    else:
                                        if switch_case_201 is 6:
                                            fmtty__7 = fmtty__0[1]
                                            fmtty__0 = fmtty__7
                                            continue_label = "switch"
                                            break
                                        else:
                                            if switch_case_201 is 7:
                                                fmtty__8 = fmtty__0[1]
                                                fmtty__0 = fmtty__8
                                                continue_label = "switch"
                                                break
                                            else:
                                                if switch_case_201 is 8:
                                                    fmtty__9 = fmtty__0[2]
                                                    fmtty__0 = fmtty__9
                                                    continue_label = "switch"
                                                    break
                                                else:
                                                    if switch_case_201 is 9:
                                                        rest = fmtty__0[3]
                                                        ty2 = fmtty__0[2]
                                                        ty1 = fmtty__0[1]
                                                        an = call1(
                                                            CamlinternalFormat[22], ty1
                                                        )
                                                        ty = call2(
                                                            CamlinternalFormat[23],
                                                            an,
                                                            ty2,
                                                        )
                                                        fmtty__10 = call2(
                                                            CamlinternalFormatBasics[1],
                                                            ty,
                                                            rest,
                                                        )
                                                        fmtty__0 = fmtty__10
                                                        continue_label = "switch"
                                                        break
                                                    else:
                                                        if switch_case_201 is 10:
                                                            fmtty__11 = fmtty__0[1]
                                                            fmtty__0 = fmtty__11
                                                            continue_label = "switch"
                                                            break
                                                        else:
                                                            if switch_case_201 is 11:
                                                                fmtty__12 = fmtty__0[1]
                                                                fmtty__0 = fmtty__12
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if (
                                                                    switch_case_201
                                                                    is 12
                                                                ):
                                                                    fmtty__13 = fmtty__0[
                                                                        1
                                                                    ]
                                                                    fmtty__0 = fmtty__13
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_201
                                                                        is 13
                                                                    ):
                                                                        fmt_rest = fmtty__0[
                                                                            1
                                                                        ]

                                                                        def function_expression_199(
                                                                            reader
                                                                        ):
                                                                            def new_k(
                                                                                readers_rest
                                                                            ):
                                                                                return call1(
                                                                                    k,
                                                                                    [
                                                                                        0,
                                                                                        reader,
                                                                                        readers_rest,
                                                                                    ],
                                                                                )

                                                                            return take_fmtty_format_readers(
                                                                                new_k,
                                                                                fmt_rest,
                                                                                fmt,
                                                                            )

                                                                        return function_expression_199
                                                                    else:
                                                                        fmt_rest__0 = fmtty__0[
                                                                            1
                                                                        ]

                                                                        def function_expression_200(
                                                                            reader
                                                                        ):
                                                                            def new_k(
                                                                                readers_rest
                                                                            ):
                                                                                return call1(
                                                                                    k,
                                                                                    [
                                                                                        0,
                                                                                        reader,
                                                                                        readers_rest,
                                                                                    ],
                                                                                )

                                                                            return take_fmtty_format_readers(
                                                                                new_k,
                                                                                fmt_rest__0,
                                                                                fmt,
                                                                            )

                                                                        return function_expression_200
                break
            if label == "switch":
                continue


def take_ignored_format_readers(counter, k, ign, fmt):
    if is_int(ign):
        while True:
            if ign is 0:
                if counter < 50:
                    counter__1 = int(counter + 1)
                    return take_format_readers__0(counter__1, k, fmt)
                return caml_trampoline_return(take_format_readers__0, [0, k, fmt])
            else:
                if ign is 1:
                    if counter < 50:
                        counter__2 = int(counter + 1)
                        return take_format_readers__0(counter__2, k, fmt)
                    return caml_trampoline_return(take_format_readers__0, [0, k, fmt])
                else:
                    if ign is 2:

                        def function_expression_202(reader):
                            def new_k(readers_rest):
                                return call1(k, [0, reader, readers_rest])

                            return take_format_readers(new_k, fmt)

                        return function_expression_202
                    else:
                        if counter < 50:
                            counter__3 = int(counter + 1)
                            return take_format_readers__0(counter__3, k, fmt)
                        return caml_trampoline_return(
                            take_format_readers__0, [0, k, fmt]
                        )
            break
    else:
        while True:
            switch_case_203 = ign[0]
            if switch_case_203 is 0:
                if counter < 50:
                    counter__4 = int(counter + 1)
                    return take_format_readers__0(counter__4, k, fmt)
                return caml_trampoline_return(take_format_readers__0, [0, k, fmt])
            else:
                if switch_case_203 is 1:
                    if counter < 50:
                        counter__5 = int(counter + 1)
                        return take_format_readers__0(counter__5, k, fmt)
                    return caml_trampoline_return(take_format_readers__0, [0, k, fmt])
                else:
                    if switch_case_203 is 2:
                        if counter < 50:
                            counter__6 = int(counter + 1)
                            return take_format_readers__0(counter__6, k, fmt)
                        return caml_trampoline_return(
                            take_format_readers__0, [0, k, fmt]
                        )
                    else:
                        if switch_case_203 is 3:
                            if counter < 50:
                                counter__7 = int(counter + 1)
                                return take_format_readers__0(counter__7, k, fmt)
                            return caml_trampoline_return(
                                take_format_readers__0, [0, k, fmt]
                            )
                        else:
                            if switch_case_203 is 4:
                                if counter < 50:
                                    counter__8 = int(counter + 1)
                                    return take_format_readers__0(counter__8, k, fmt)
                                return caml_trampoline_return(
                                    take_format_readers__0, [0, k, fmt]
                                )
                            else:
                                if switch_case_203 is 5:
                                    if counter < 50:
                                        counter__9 = int(counter + 1)
                                        return take_format_readers__0(
                                            counter__9, k, fmt
                                        )
                                    return caml_trampoline_return(
                                        take_format_readers__0, [0, k, fmt]
                                    )
                                else:
                                    if switch_case_203 is 6:
                                        if counter < 50:
                                            counter__10 = int(counter + 1)
                                            return take_format_readers__0(
                                                counter__10, k, fmt
                                            )
                                        return caml_trampoline_return(
                                            take_format_readers__0, [0, k, fmt]
                                        )
                                    else:
                                        if switch_case_203 is 7:
                                            if counter < 50:
                                                counter__11 = int(counter + 1)
                                                return take_format_readers__0(
                                                    counter__11, k, fmt
                                                )
                                            return caml_trampoline_return(
                                                take_format_readers__0, [0, k, fmt]
                                            )
                                        else:
                                            if switch_case_203 is 8:
                                                if counter < 50:
                                                    counter__12 = int(counter + 1)
                                                    return take_format_readers__0(
                                                        counter__12, k, fmt
                                                    )
                                                return caml_trampoline_return(
                                                    take_format_readers__0, [0, k, fmt]
                                                )
                                            else:
                                                if switch_case_203 is 9:
                                                    fmtty = ign[2]
                                                    if counter < 50:
                                                        counter__0 = int(counter + 1)
                                                        return take_fmtty_format_readers__0(
                                                            counter__0, k, fmtty, fmt
                                                        )
                                                    return caml_trampoline_return(
                                                        take_fmtty_format_readers__0,
                                                        [0, k, fmtty, fmt],
                                                    )
                                                else:
                                                    if switch_case_203 is 10:
                                                        if counter < 50:
                                                            counter__13 = int(
                                                                counter + 1
                                                            )
                                                            return take_format_readers__0(
                                                                counter__13, k, fmt
                                                            )
                                                        return caml_trampoline_return(
                                                            take_format_readers__0,
                                                            [0, k, fmt],
                                                        )
                                                    else:
                                                        if counter < 50:
                                                            counter__14 = int(
                                                                counter + 1
                                                            )
                                                            return take_format_readers__0(
                                                                counter__14, k, fmt
                                                            )
                                                        return caml_trampoline_return(
                                                            take_format_readers__0,
                                                            [0, k, fmt],
                                                        )
            break


def take_format_readers(k, fmt):
    return caml_trampoline(take_format_readers__0(0, k, fmt))


def take_fmtty_format_readers(k, fmtty, fmt):
    return caml_trampoline(take_fmtty_format_readers__0(0, k, fmtty, fmt))


def pad_prec_scanf(ib, fmt, readers, pad, prec, scan, token):
    if is_int(pad):
        if is_int(prec):
            if 0 is prec:
                call3(scan, Pervasives[7], Pervasives[7], ib)
                x = call1(token, ib)
                return [0, x, make_scanf(ib, fmt, readers)]
            return call1(Pervasives[1], cst_scanf_bad_conversion)
        p = prec[1]
        call3(scan, Pervasives[7], p, ib)
        x__0 = call1(token, ib)
        return [0, x__0, make_scanf(ib, fmt, readers)]
    else:
        if 0 is pad[0]:
            if 0 is pad[1]:
                return call1(Pervasives[1], cst_scanf_bad_conversion__0)
            am = pad[2]
            if is_int(prec):
                if 0 is prec:
                    call3(scan, am, Pervasives[7], ib)
                    x__1 = call1(token, ib)
                    return [0, x__1, make_scanf(ib, fmt, readers)]
                return call1(Pervasives[1], cst_scanf_bad_conversion__1)
            p__0 = prec[1]
            call3(scan, am, p__0, ib)
            x__2 = call1(token, ib)
            return [0, x__2, make_scanf(ib, fmt, readers)]
        return call1(Pervasives[1], cst_scanf_bad_conversion__2)


def make_scanf(ib, fmt, readers):
    fmt__0 = fmt
    while True:
        if is_int(fmt__0):
            return 0
        else:
            continue_label = None
            while True:
                switch_case_209 = fmt__0[0]
                if switch_case_209 is 0:
                    rest = fmt__0[1]
                    scan_char(0, ib)
                    c = token_char(ib)
                    return [0, c, make_scanf(ib, rest, readers)]
                else:
                    if switch_case_209 is 1:
                        rest__0 = fmt__0[1]
                        scan_caml_char(0, ib)
                        c__0 = token_char(ib)
                        return [0, c__0, make_scanf(ib, rest__0, readers)]
                    else:
                        if switch_case_209 is 2:
                            L = fmt__0[2]
                            M = fmt__0[1]
                            if not (is_int(L)):
                                while True:
                                    switch_case_204 = L[0]
                                    if switch_case_204 is 17:
                                        rest__1 = L[2]
                                        fmting_lit = L[1]
                                        match = stopper_of_formatting_lit(fmting_lit)
                                        str = match[2]
                                        stp = match[1]

                                        def scan__0(width, param, ib):
                                            return scan_string([0, stp], width, ib)

                                        str_rest = [11, str, rest__1]
                                        return pad_prec_scanf(
                                            ib,
                                            str_rest,
                                            readers,
                                            M,
                                            0,
                                            scan__0,
                                            token_string,
                                        )
                                    else:
                                        if switch_case_204 is 18:
                                            N = L[1]
                                            if 0 is N[0]:
                                                rest__2 = L[2]
                                                match__0 = N[1]
                                                fmt__1 = match__0[1]

                                                def scan__1(width, param, ib):
                                                    return scan_string(r, width, ib)

                                                return pad_prec_scanf(
                                                    ib,
                                                    call2(
                                                        CamlinternalFormatBasics[3],
                                                        fmt__1,
                                                        rest__2,
                                                    ),
                                                    readers,
                                                    M,
                                                    0,
                                                    scan__1,
                                                    token_string,
                                                )
                                            rest__3 = L[2]
                                            match__1 = N[1]
                                            fmt__2 = match__1[1]

                                            def scan__2(width, param, ib):
                                                return scan_string(s, width, ib)

                                            return pad_prec_scanf(
                                                ib,
                                                call2(
                                                    CamlinternalFormatBasics[3],
                                                    fmt__2,
                                                    rest__3,
                                                ),
                                                readers,
                                                M,
                                                0,
                                                scan__2,
                                                token_string,
                                            )
                                    break

                            def scan(width, param, ib):
                                return scan_string(0, width, ib)

                            return pad_prec_scanf(
                                ib, L, readers, M, 0, scan, token_string
                            )
                        else:
                            if switch_case_209 is 3:
                                rest__4 = fmt__0[2]
                                pad = fmt__0[1]

                                def scan__3(width, param, ib):
                                    return scan_caml_string(width, ib)

                                return pad_prec_scanf(
                                    ib, rest__4, readers, pad, 0, scan__3, token_string
                                )
                            else:
                                if switch_case_209 is 4:
                                    rest__5 = fmt__0[4]
                                    prec = fmt__0[3]
                                    pad__0 = fmt__0[2]
                                    iconv = fmt__0[1]
                                    c__1 = integer_conversion_of_char(
                                        call1(CamlinternalFormat[16], iconv)
                                    )

                                    def scan__4(width, param, ib):
                                        return scan_int_conversion(c__1, width, ib)

                                    def function_expression_205(al):
                                        return token_int(c__1, al)

                                    return pad_prec_scanf(
                                        ib,
                                        rest__5,
                                        readers,
                                        pad__0,
                                        prec,
                                        scan__4,
                                        function_expression_205,
                                    )
                                else:
                                    if switch_case_209 is 5:
                                        rest__6 = fmt__0[4]
                                        prec__0 = fmt__0[3]
                                        pad__1 = fmt__0[2]
                                        iconv__0 = fmt__0[1]
                                        c__2 = integer_conversion_of_char(
                                            call1(CamlinternalFormat[16], iconv__0)
                                        )

                                        def scan__5(width, param, ib):
                                            return scan_int_conversion(c__2, width, ib)

                                        def function_expression_206(ak):
                                            return token_int32(c__2, ak)

                                        return pad_prec_scanf(
                                            ib,
                                            rest__6,
                                            readers,
                                            pad__1,
                                            prec__0,
                                            scan__5,
                                            function_expression_206,
                                        )
                                    else:
                                        if switch_case_209 is 6:
                                            rest__7 = fmt__0[4]
                                            prec__1 = fmt__0[3]
                                            pad__2 = fmt__0[2]
                                            iconv__1 = fmt__0[1]
                                            c__3 = integer_conversion_of_char(
                                                call1(CamlinternalFormat[16], iconv__1)
                                            )

                                            def scan__6(width, param, ib):
                                                return scan_int_conversion(
                                                    c__3, width, ib
                                                )

                                            def function_expression_207(aj):
                                                return token_nativeint(c__3, aj)

                                            return pad_prec_scanf(
                                                ib,
                                                rest__7,
                                                readers,
                                                pad__2,
                                                prec__1,
                                                scan__6,
                                                function_expression_207,
                                            )
                                        else:
                                            if switch_case_209 is 7:
                                                rest__8 = fmt__0[4]
                                                prec__2 = fmt__0[3]
                                                pad__3 = fmt__0[2]
                                                iconv__2 = fmt__0[1]
                                                c__4 = integer_conversion_of_char(
                                                    call1(
                                                        CamlinternalFormat[16], iconv__2
                                                    )
                                                )

                                                def scan__7(width, param, ib):
                                                    return scan_int_conversion(
                                                        c__4, width, ib
                                                    )

                                                def function_expression_208(ai):
                                                    return token_int64(c__4, ai)

                                                return pad_prec_scanf(
                                                    ib,
                                                    rest__8,
                                                    readers,
                                                    pad__3,
                                                    prec__2,
                                                    scan__7,
                                                    function_expression_208,
                                                )
                                            else:
                                                if switch_case_209 is 8:
                                                    O = fmt__0[1]
                                                    if 15 is O:
                                                        rest__9 = fmt__0[4]
                                                        prec__3 = fmt__0[3]
                                                        pad__4 = fmt__0[2]
                                                        return pad_prec_scanf(
                                                            ib,
                                                            rest__9,
                                                            readers,
                                                            pad__4,
                                                            prec__3,
                                                            scan_caml_float,
                                                            token_float,
                                                        )
                                                    if 16 <= O:
                                                        rest__10 = fmt__0[4]
                                                        prec__4 = fmt__0[3]
                                                        pad__5 = fmt__0[2]
                                                        return pad_prec_scanf(
                                                            ib,
                                                            rest__10,
                                                            readers,
                                                            pad__5,
                                                            prec__4,
                                                            scan_hex_float,
                                                            token_float,
                                                        )
                                                    rest__11 = fmt__0[4]
                                                    prec__5 = fmt__0[3]
                                                    pad__6 = fmt__0[2]
                                                    return pad_prec_scanf(
                                                        ib,
                                                        rest__11,
                                                        readers,
                                                        pad__6,
                                                        prec__5,
                                                        scan_float,
                                                        token_float,
                                                    )
                                                else:
                                                    if switch_case_209 is 9:
                                                        rest__12 = fmt__0[2]
                                                        pad__7 = fmt__0[1]

                                                        def scan__8(param, ah, ib):
                                                            return scan_bool(ib)

                                                        return pad_prec_scanf(
                                                            ib,
                                                            rest__12,
                                                            readers,
                                                            pad__7,
                                                            0,
                                                            scan__8,
                                                            token_bool,
                                                        )
                                                    else:
                                                        if switch_case_209 is 10:
                                                            rest__13 = fmt__0[1]
                                                            if end_of_input(ib):
                                                                fmt__0 = rest__13
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            return bad_input(
                                                                cst_end_of_input_not_found
                                                            )
                                                        else:
                                                            if switch_case_209 is 11:
                                                                fmt__3 = fmt__0[2]
                                                                str__0 = fmt__0[1]

                                                                def P(ag):
                                                                    return check_char(
                                                                        ib, ag
                                                                    )

                                                                call2(
                                                                    String[8], P, str__0
                                                                )
                                                                fmt__0 = fmt__3
                                                                continue_label = (
                                                                    "switch"
                                                                )
                                                                break
                                                            else:
                                                                if (
                                                                    switch_case_209
                                                                    is 12
                                                                ):
                                                                    fmt__4 = fmt__0[2]
                                                                    chr = fmt__0[1]
                                                                    check_char(ib, chr)
                                                                    fmt__0 = fmt__4
                                                                    continue_label = (
                                                                        "switch"
                                                                    )
                                                                    break
                                                                else:
                                                                    if (
                                                                        switch_case_209
                                                                        is 13
                                                                    ):
                                                                        rest__14 = fmt__0[
                                                                            3
                                                                        ]
                                                                        fmtty = fmt__0[
                                                                            2
                                                                        ]
                                                                        pad_opt = fmt__0[
                                                                            1
                                                                        ]
                                                                        scan_caml_string(
                                                                            width_of_pad_opt(
                                                                                pad_opt
                                                                            ),
                                                                            ib,
                                                                        )
                                                                        s__0 = token_string(
                                                                            ib
                                                                        )
                                                                        try:
                                                                            R = call2(
                                                                                CamlinternalFormat[
                                                                                    14
                                                                                ],
                                                                                s__0,
                                                                                fmtty,
                                                                            )
                                                                            fmt__5 = R
                                                                        except:
                                                                            exn = caml_wrap_exception(
                                                                                exn
                                                                            )
                                                                            if (
                                                                                exn[1]
                                                                                is not Failure
                                                                            ):
                                                                                raise (
                                                                                    empty[
                                                                                        "caml_wrap_thrown_exception_reraise"
                                                                                    ](
                                                                                        exn
                                                                                    )
                                                                                )
                                                                            msg = exn[2]
                                                                            Q = bad_input(
                                                                                msg
                                                                            )
                                                                            fmt__5 = Q
                                                                        return [
                                                                            0,
                                                                            fmt__5,
                                                                            make_scanf(
                                                                                ib,
                                                                                rest__14,
                                                                                readers,
                                                                            ),
                                                                        ]
                                                                    else:
                                                                        if (
                                                                            switch_case_209
                                                                            is 14
                                                                        ):
                                                                            rest__15 = fmt__0[
                                                                                3
                                                                            ]
                                                                            fmtty__0 = fmt__0[
                                                                                2
                                                                            ]
                                                                            pad_opt__0 = fmt__0[
                                                                                1
                                                                            ]
                                                                            scan_caml_string(
                                                                                width_of_pad_opt(
                                                                                    pad_opt__0
                                                                                ),
                                                                                ib,
                                                                            )
                                                                            s__1 = token_string(
                                                                                ib
                                                                            )
                                                                            try:
                                                                                match__2 = call2(
                                                                                    CamlinternalFormat[
                                                                                        13
                                                                                    ],
                                                                                    0,
                                                                                    s__1,
                                                                                )
                                                                                fmt__8 = match__2[
                                                                                    1
                                                                                ]
                                                                                match__3 = call2(
                                                                                    CamlinternalFormat[
                                                                                        13
                                                                                    ],
                                                                                    0,
                                                                                    s__1,
                                                                                )
                                                                                fmt__9 = match__3[
                                                                                    1
                                                                                ]
                                                                                V = call1(
                                                                                    CamlinternalFormat[
                                                                                        22
                                                                                    ],
                                                                                    fmtty__0,
                                                                                )
                                                                                W = call1(
                                                                                    CamlinternalFormatBasics[
                                                                                        2
                                                                                    ],
                                                                                    V,
                                                                                )
                                                                                fmt__10 = call2(
                                                                                    CamlinternalFormat[
                                                                                        12
                                                                                    ],
                                                                                    fmt__9,
                                                                                    W,
                                                                                )
                                                                                X = call1(
                                                                                    CamlinternalFormatBasics[
                                                                                        2
                                                                                    ],
                                                                                    fmtty__0,
                                                                                )
                                                                                Y = call2(
                                                                                    CamlinternalFormat[
                                                                                        12
                                                                                    ],
                                                                                    fmt__8,
                                                                                    X,
                                                                                )
                                                                                fmt__7 = (
                                                                                    Y
                                                                                )
                                                                                fmt__6 = fmt__10
                                                                            except:
                                                                                exn = caml_wrap_exception(
                                                                                    exn
                                                                                )
                                                                                if (
                                                                                    exn[
                                                                                        1
                                                                                    ]
                                                                                    is not Failure
                                                                                ):
                                                                                    raise (
                                                                                        empty[
                                                                                            "caml_wrap_thrown_exception_reraise"
                                                                                        ](
                                                                                            exn
                                                                                        )
                                                                                    )
                                                                                msg__0 = exn[
                                                                                    2
                                                                                ]
                                                                                S = bad_input(
                                                                                    msg__0
                                                                                )
                                                                                T = S[2]
                                                                                U = S[1]
                                                                                fmt__7 = (
                                                                                    U
                                                                                )
                                                                                fmt__6 = (
                                                                                    T
                                                                                )
                                                                            return [
                                                                                0,
                                                                                [
                                                                                    0,
                                                                                    fmt__7,
                                                                                    s__1,
                                                                                ],
                                                                                make_scanf(
                                                                                    ib,
                                                                                    call2(
                                                                                        CamlinternalFormatBasics[
                                                                                            3
                                                                                        ],
                                                                                        fmt__6,
                                                                                        rest__15,
                                                                                    ),
                                                                                    readers,
                                                                                ),
                                                                            ]
                                                                        else:
                                                                            if (
                                                                                switch_case_209
                                                                                is 15
                                                                            ):
                                                                                return call1(
                                                                                    Pervasives[
                                                                                        1
                                                                                    ],
                                                                                    cst_scanf_bad_conversion_a,
                                                                                )
                                                                            else:
                                                                                if (
                                                                                    switch_case_209
                                                                                    is 16
                                                                                ):
                                                                                    return call1(
                                                                                        Pervasives[
                                                                                            1
                                                                                        ],
                                                                                        cst_scanf_bad_conversion_t,
                                                                                    )
                                                                                else:
                                                                                    if (
                                                                                        switch_case_209
                                                                                        is 17
                                                                                    ):
                                                                                        fmt__11 = fmt__0[
                                                                                            2
                                                                                        ]
                                                                                        formatting_lit = fmt__0[
                                                                                            1
                                                                                        ]
                                                                                        Z = call1(
                                                                                            CamlinternalFormat[
                                                                                                17
                                                                                            ],
                                                                                            formatting_lit,
                                                                                        )

                                                                                        def aa(
                                                                                            af
                                                                                        ):
                                                                                            return check_char(
                                                                                                ib,
                                                                                                af,
                                                                                            )

                                                                                        call2(
                                                                                            String[
                                                                                                8
                                                                                            ],
                                                                                            aa,
                                                                                            Z,
                                                                                        )
                                                                                        fmt__0 = fmt__11
                                                                                        continue_label = "switch"
                                                                                        break
                                                                                    else:
                                                                                        if (
                                                                                            switch_case_209
                                                                                            is 18
                                                                                        ):
                                                                                            ab = fmt__0[
                                                                                                1
                                                                                            ]
                                                                                            if (
                                                                                                0
                                                                                                is ab[
                                                                                                    0
                                                                                                ]
                                                                                            ):
                                                                                                rest__16 = fmt__0[
                                                                                                    2
                                                                                                ]
                                                                                                match__4 = ab[
                                                                                                    1
                                                                                                ]
                                                                                                fmt__12 = match__4[
                                                                                                    1
                                                                                                ]
                                                                                                check_char(
                                                                                                    ib,
                                                                                                    64,
                                                                                                )
                                                                                                check_char(
                                                                                                    ib,
                                                                                                    123,
                                                                                                )
                                                                                                fmt__13 = call2(
                                                                                                    CamlinternalFormatBasics[
                                                                                                        3
                                                                                                    ],
                                                                                                    fmt__12,
                                                                                                    rest__16,
                                                                                                )
                                                                                                fmt__0 = fmt__13
                                                                                                continue_label = "switch"
                                                                                                break
                                                                                            rest__17 = fmt__0[
                                                                                                2
                                                                                            ]
                                                                                            match__5 = ab[
                                                                                                1
                                                                                            ]
                                                                                            fmt__14 = match__5[
                                                                                                1
                                                                                            ]
                                                                                            check_char(
                                                                                                ib,
                                                                                                64,
                                                                                            )
                                                                                            check_char(
                                                                                                ib,
                                                                                                91,
                                                                                            )
                                                                                            fmt__15 = call2(
                                                                                                CamlinternalFormatBasics[
                                                                                                    3
                                                                                                ],
                                                                                                fmt__14,
                                                                                                rest__17,
                                                                                            )
                                                                                            fmt__0 = fmt__15
                                                                                            continue_label = "switch"
                                                                                            break
                                                                                        else:
                                                                                            if (
                                                                                                switch_case_209
                                                                                                is 19
                                                                                            ):
                                                                                                fmt_rest = fmt__0[
                                                                                                    1
                                                                                                ]
                                                                                                if readers:
                                                                                                    readers_rest = readers[
                                                                                                        2
                                                                                                    ]
                                                                                                    reader = readers[
                                                                                                        1
                                                                                                    ]
                                                                                                    x = call1(
                                                                                                        reader,
                                                                                                        ib,
                                                                                                    )
                                                                                                    return [
                                                                                                        0,
                                                                                                        x,
                                                                                                        make_scanf(
                                                                                                            ib,
                                                                                                            fmt_rest,
                                                                                                            readers_rest,
                                                                                                        ),
                                                                                                    ]
                                                                                                return call1(
                                                                                                    Pervasives[
                                                                                                        1
                                                                                                    ],
                                                                                                    cst_scanf_missing_reader,
                                                                                                )
                                                                                            else:
                                                                                                if (
                                                                                                    switch_case_209
                                                                                                    is 20
                                                                                                ):
                                                                                                    ac = fmt__0[
                                                                                                        3
                                                                                                    ]
                                                                                                    ad = fmt__0[
                                                                                                        2
                                                                                                    ]
                                                                                                    ae = fmt__0[
                                                                                                        1
                                                                                                    ]
                                                                                                    if (
                                                                                                        not (
                                                                                                            is_int(
                                                                                                                ac
                                                                                                            )
                                                                                                        )
                                                                                                        and 17
                                                                                                        is ac[
                                                                                                            0
                                                                                                        ]
                                                                                                    ):
                                                                                                        rest__18 = ac[
                                                                                                            2
                                                                                                        ]
                                                                                                        fmting_lit__0 = ac[
                                                                                                            1
                                                                                                        ]
                                                                                                        match__6 = stopper_of_formatting_lit(
                                                                                                            fmting_lit__0
                                                                                                        )
                                                                                                        str__1 = match__6[
                                                                                                            2
                                                                                                        ]
                                                                                                        stp__0 = match__6[
                                                                                                            1
                                                                                                        ]
                                                                                                        width__0 = width_of_pad_opt(
                                                                                                            ae
                                                                                                        )
                                                                                                        scan_chars_in_char_set(
                                                                                                            ad,
                                                                                                            [
                                                                                                                0,
                                                                                                                stp__0,
                                                                                                            ],
                                                                                                            width__0,
                                                                                                            ib,
                                                                                                        )
                                                                                                        s__3 = token_string(
                                                                                                            ib
                                                                                                        )
                                                                                                        str_rest__0 = [
                                                                                                            11,
                                                                                                            str__1,
                                                                                                            rest__18,
                                                                                                        ]
                                                                                                        return [
                                                                                                            0,
                                                                                                            s__3,
                                                                                                            make_scanf(
                                                                                                                ib,
                                                                                                                str_rest__0,
                                                                                                                readers,
                                                                                                            ),
                                                                                                        ]
                                                                                                    width = width_of_pad_opt(
                                                                                                        ae
                                                                                                    )
                                                                                                    scan_chars_in_char_set(
                                                                                                        ad,
                                                                                                        0,
                                                                                                        width,
                                                                                                        ib,
                                                                                                    )
                                                                                                    s__2 = token_string(
                                                                                                        ib
                                                                                                    )
                                                                                                    return [
                                                                                                        0,
                                                                                                        s__2,
                                                                                                        make_scanf(
                                                                                                            ib,
                                                                                                            ac,
                                                                                                            readers,
                                                                                                        ),
                                                                                                    ]
                                                                                                else:
                                                                                                    if (
                                                                                                        switch_case_209
                                                                                                        is 21
                                                                                                    ):
                                                                                                        rest__19 = fmt__0[
                                                                                                            2
                                                                                                        ]
                                                                                                        counter = fmt__0[
                                                                                                            1
                                                                                                        ]
                                                                                                        count = get_counter(
                                                                                                            ib,
                                                                                                            counter,
                                                                                                        )
                                                                                                        return [
                                                                                                            0,
                                                                                                            count,
                                                                                                            make_scanf(
                                                                                                                ib,
                                                                                                                rest__19,
                                                                                                                readers,
                                                                                                            ),
                                                                                                        ]
                                                                                                    else:
                                                                                                        if (
                                                                                                            switch_case_209
                                                                                                            is 22
                                                                                                        ):
                                                                                                            rest__20 = fmt__0[
                                                                                                                1
                                                                                                            ]
                                                                                                            c__5 = checked_peek_char(
                                                                                                                ib
                                                                                                            )
                                                                                                            return [
                                                                                                                0,
                                                                                                                c__5,
                                                                                                                make_scanf(
                                                                                                                    ib,
                                                                                                                    rest__20,
                                                                                                                    readers,
                                                                                                                ),
                                                                                                            ]
                                                                                                        else:
                                                                                                            if (
                                                                                                                switch_case_209
                                                                                                                is 23
                                                                                                            ):
                                                                                                                rest__21 = fmt__0[
                                                                                                                    2
                                                                                                                ]
                                                                                                                ign = fmt__0[
                                                                                                                    1
                                                                                                                ]
                                                                                                                match__7 = call2(
                                                                                                                    CamlinternalFormat[
                                                                                                                        6
                                                                                                                    ],
                                                                                                                    ign,
                                                                                                                    rest__21,
                                                                                                                )
                                                                                                                fmt__16 = match__7[
                                                                                                                    1
                                                                                                                ]
                                                                                                                match__8 = make_scanf(
                                                                                                                    ib,
                                                                                                                    fmt__16,
                                                                                                                    readers,
                                                                                                                )
                                                                                                                if match__8:
                                                                                                                    arg_rest = match__8[
                                                                                                                        2
                                                                                                                    ]
                                                                                                                    return arg_rest
                                                                                                                raise (
                                                                                                                    empty[
                                                                                                                        "caml_wrap_thrown_exception"
                                                                                                                    ](
                                                                                                                        [
                                                                                                                            0,
                                                                                                                            Assert_failure,
                                                                                                                            t,
                                                                                                                        ]
                                                                                                                    )
                                                                                                                )
                                                                                                            else:
                                                                                                                return call1(
                                                                                                                    Pervasives[
                                                                                                                        1
                                                                                                                    ],
                                                                                                                    cst_scanf_bad_conversion_custom_converter,
                                                                                                                )
                break
            if label == "switch":
                continue


def kscanf(ib, ef, param):
    str = param[2]
    fmt = param[1]

    def apply(f, args):
        f__0 = f
        args__0 = args
        while True:
            if args__0:
                args__1 = args__0[2]
                x = args__0[1]
                f__1 = call1(f__0, x)
                f__0 = f__1
                args__0 = args__1
                continue
            return f__0

    def k(readers, f):
        reset_token(ib)
        try:
            K = [0, make_scanf(ib, fmt, readers)]
            E = K
        except:
            exc = caml_wrap_exception(exc)
            if exc[1] is Scan_failure:
                switch__0 = 0
            else:
                if exc[1] is Failure:
                    switch__0 = 0
                else:
                    if exc is End_of_file:
                        switch__0 = 0
                    else:
                        if exc[1] is not Invalid_argument:
                            raise (empty["caml_wrap_thrown_exception_reraise"](exc))
                        msg = exc[2]
                        F = call1(String[13], str)
                        G = call2(Pervasives[16], F, cst__1)
                        H = call2(Pervasives[16], cst_in_format, G)
                        I = call2(Pervasives[16], msg, H)
                        J = call1(Pervasives[1], I)
                        D = J
                        switch__0 = 1
            if not (switch__0):
                D = [1, exc]
            E = D
        if 0 is E[0]:
            args = E[1]
            return apply(f, args)
        exc = E[1]
        return call2(ef, ib, exc)

    return take_format_readers(k, fmt)


def bscanf(ib, fmt):
    return kscanf(ib, scanf_bad_input, fmt)


def ksscanf(s, ef, fmt):
    return kscanf(from_string(s), ef, fmt)


def sscanf(s, fmt):
    return kscanf(from_string(s), scanf_bad_input, fmt)


def scanf(fmt):
    return kscanf(stdin, scanf_bad_input, fmt)


def bscanf_format(ib, format, f):
    scan_caml_string(Pervasives[7], ib)
    str = token_string(ib)
    try:
        C = call2(CamlinternalFormat[15], str, format)
        fmt = C
    except:
        exn = caml_wrap_exception(exn)
        if exn[1] is not Failure:
            raise (empty["caml_wrap_thrown_exception_reraise"](exn))
        msg = exn[2]
        B = bad_input(msg)
        fmt = B
    return call1(f, fmt)


def sscanf_format(s, format, f):
    return bscanf_format(from_string(s), format, f)


def string_to_String(s):
    l = caml_ml_string_length(s)
    b = call1(Buffer[1], int(l + 2))
    call2(Buffer[10], b, 34)
    z = int(l + -1)
    y = 0
    if not (z < 0):
        i = y
        while True:
            c = caml_string_get(s, i)
            if 34 is c:
                call2(Buffer[10], b, 92)
            call2(Buffer[10], b, c)
            A = int(i + 1)
            if z is not i:
                i = A
                continue
            break
    call2(Buffer[10], b, 34)
    return call1(Buffer[2], b)


def format_from_string(s, fmt):
    def x(x):
        return x

    return sscanf_format(string_to_String(s), fmt, x)


def unescaped(s):
    def v(x):
        return x

    w = call2(Pervasives[16], s, cst__2)
    return call1(sscanf(call2(Pervasives[16], cst__3, w), u), v)


def kfscanf(ic, ef, fmt):
    return kscanf(memo_from_channel(ic), ef, fmt)


def fscanf(ic, fmt):
    return kscanf(memo_from_channel(ic), scanf_bad_input, fmt)


Scanf = [
    0,
    [
        0,
        stdin,
        open_in,
        open_in_bin,
        close_in,
        open_in,
        open_in_bin,
        from_string,
        from_function,
        from_channel,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdin,
    ],
    Scan_failure,
    bscanf,
    sscanf,
    scanf,
    kscanf,
    ksscanf,
    bscanf_format,
    sscanf_format,
    format_from_string,
    unescaped,
    fscanf,
    kfscanf,
]
empty["caml_register_global"](66, Scanf, "Scanf")
