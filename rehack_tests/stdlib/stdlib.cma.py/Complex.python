zero = [254, 0.0, 0.0]
one = [254, 1.0, 0.0]
i = [254, 0.0, 1.0]
b = [254, 0.0, 0.0]


def add(x, y):
    return [254, x[1] + y[1], x[2] + y[2]]


def sub(x, y):
    return [254, x[1] - y[1], x[2] - y[2]]


def neg(x):
    return [254, -(x[1]), -(x[2])]


def conj(x):
    return [254, x[1], -(x[2])]


def mul(x, y):
    return [254, x[1] * y[1] - x[2] * y[2], x[1] * y[2] + x[2] * y[1]]


def div(x, y):
    if Math.abs(y[2]) <= Math.abs(y[1]):
        r = y[2] / y[1]
        d = y[1] + r * y[2]
        return [254, x[1] + r * x[2] / d, x[2] - r * x[1] / d]
    r__0 = y[1] / y[2]
    d__0 = y[2] + r__0 * y[1]
    return [254, r__0 * x[1] + x[2] / d__0, r__0 * x[2] - x[1] / d__0]


def inv(x):
    return div(one, x)


def norm2(x):
    return x[1] * x[1] + x[2] * x[2]


def norm(x):
    r = Math.abs(x[1])
    i = Math.abs(x[2])
    if r == 0.0:
        return i
    if i == 0.0:
        return r
    if i <= r:
        q = i / r
        return r * Math.sqrt(1.0 + q * q)
    q__0 = r / i
    return i * Math.sqrt(1.0 + q__0 * q__0)


def arg(x):
    return Math.atan2(x[2], x[1])


def polar(n, a):
    return [254, Math.cos(a) * n, Math.sin(a) * n]


def sqrt(x):
    if x[1] == 0.0:
        if x[2] == 0.0:
            return b
    r = Math.abs(x[1])
    i = Math.abs(x[2])
    if i <= r:
        q = i / r
        w = Math.sqrt(r) * Math.sqrt(0.5 * 1.0 + Math.sqrt(1.0 + q * q))
    else:
        q__0 = r / i
        w = Math.sqrt(i) * Math.sqrt(0.5 * q__0 + Math.sqrt(1.0 + q__0 * q__0))
    if 0.0 <= x[1]:
        return [254, w, 0.5 * x[2] / w]
    w__0 = w if 0.0 <= x[2] else -(w)
    return [254, 0.5 * i / w, w__0]


def exp(x):
    e = Math.exp(x[1])
    return [254, e * Math.cos(x[2]), e * Math.sin(x[2])]


def log(x):
    c = Math.atan2(x[2], x[1])
    return [254, Math.log(norm(x)), c]


def pow(x, y):
    return exp(mul(y, log(x)))


Complex = [
    0,
    zero,
    one,
    i,
    neg,
    conj,
    add,
    sub,
    mul,
    inv,
    div,
    sqrt,
    norm2,
    norm,
    arg,
    polar,
    exp,
    log,
    pow,
]
empty["caml_register_global"](19, Complex, "Complex")
