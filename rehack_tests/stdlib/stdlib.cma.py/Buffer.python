caml_bytes_unsafe_set = empty["caml_bytes_unsafe_set"]
caml_create_bytes = empty["caml_create_bytes"]
caml_ml_bytes_length = empty["caml_ml_bytes_length"]
caml_ml_string_length = empty["caml_ml_string_length"]
string = empty["caml_new_string"]
caml_string_get = empty["caml_string_get"]


def call1(f, a0):
    return f(a0) if arity_test is 1 else empty["caml_call_gen"](f, [a0])


def call3(f, a0, a1, a2):
    return f(a0, a1, a2) if arity_test is 3 else empty["caml_call_gen"](f, [a0, a1, a2])


def call4(f, a0, a1, a2, a3):
    return (
        f(a0, a1, a2, a3)
        if arity_test is 4
        else empty["caml_call_gen"](f, [a0, a1, a2, a3])
    )


def call5(f, a0, a1, a2, a3, a4):
    return (
        f(a0, a1, a2, a3, a4)
        if arity_test is 5
        else empty["caml_call_gen"](f, [a0, a1, a2, a3, a4])
    )


global_data = empty["caml_get_global_data"]()
cst_Buffer_truncate = string("Buffer.truncate")
cst_Buffer_add_channel = string("Buffer.add_channel")
cst_Buffer_add_substring_add_subbytes = string("Buffer.add_substring/add_subbytes")
cst_Buffer_add_cannot_grow_buffer = string("Buffer.add: cannot grow buffer")
cst_Buffer_nth = string("Buffer.nth")
cst_Buffer_blit = string("Buffer.blit")
cst_Buffer_sub = string("Buffer.sub")
Pervasives = global_data["Pervasives"]
End_of_file = global_data["End_of_file"]
Not_found = global_data["Not_found"]
String = global_data["String_"]
Assert_failure = global_data["Assert_failure"]
Sys = global_data["Sys"]
Bytes = global_data["Bytes"]
Uchar = global_data["Uchar"]
h = [0, string("buffer.ml"), 205, 9]
g = [0, string("buffer.ml"), 141, 19]
f = [0, string("buffer.ml"), 159, 8]
e = [0, string("buffer.ml"), 120, 19]
d = [0, string("buffer.ml"), 138, 8]
c = [0, string("buffer.ml"), 84, 19]
b = [0, string("buffer.ml"), 117, 8]


def create(n):
    n__0 = n if 1 <= n else 1
    n__1 = Sys[13] if Sys[13] < n__0 else n__0
    s = caml_create_bytes(n__1)
    return [0, s, 0, n__1, s]


def contents(b):
    return call3(Bytes[8], b[1], 0, b[2])


def to_bytes(b):
    return call3(Bytes[7], b[1], 0, b[2])


def sub(b, ofs, len):
    if 0 <= ofs:
        if 0 <= len:
            if not (int(b[2] - len) < ofs):
                return call3(Bytes[8], b[1], ofs, len)
    return call1(Pervasives[1], cst_Buffer_sub)


def blit(src, srcoff, dst, dstoff, len):
    if 0 <= len:
        if 0 <= srcoff:
            if not (int(src[2] - len) < srcoff):
                if 0 <= dstoff:
                    if not (int(caml_ml_bytes_length(dst) - len) < dstoff):
                        return empty["caml_blit_bytes"](
                            src[1], srcoff, dst, dstoff, len
                        )
    return call1(Pervasives[1], cst_Buffer_blit)


def nth(b, ofs):
    if 0 <= ofs:
        if not (b[2] <= ofs):
            return empty["caml_bytes_unsafe_get"](b[1], ofs)
    return call1(Pervasives[1], cst_Buffer_nth)


def length(b):
    return b[2]


def clear(b):
    b[2] = 0
    return 0


def reset(b):
    b[2] = 0
    b[1] = b[4]
    b[3] = caml_ml_bytes_length(b[1])
    return 0


def resize(b, more):
    len = b[3]
    new_len = [0, len]
    while True:
        if new_len[1] < int(b[2] + more):
            new_len[1] = int(2 * new_len[1])
            continue
        if Sys[13] < new_len[1]:
            if int(b[2] + more) <= Sys[13]:
                new_len[1] = Sys[13]
            else:
                call1(Pervasives[2], cst_Buffer_add_cannot_grow_buffer)
        new_buffer = caml_create_bytes(new_len[1])
        call5(Bytes[11], b[1], 0, new_buffer, 0, b[2])
        b[1] = new_buffer
        b[3] = new_len[1]
        return 0


def add_char(b, c):
    pos = b[2]
    if b[3] <= pos:
        resize(b, 1)
    caml_bytes_unsafe_set(b[1], pos, c)
    b[2] = int(pos + 1)
    return 0


def add_utf_8_uchar(b__0, u):
    u__0 = call1(Uchar[10], u)
    if 0 <= u__0:
        if 127 < u__0:
            if 2047 < u__0:
                if 65535 < u__0:
                    if 1114111 < u__0:
                        raise (
                            empty["caml_wrap_thrown_exception"]([0, Assert_failure, b])
                        )
                    pos = b__0[2]
                    if b__0[3] < int(pos + 4):
                        resize(b__0, 4)
                    caml_bytes_unsafe_set(b__0[1], pos, 240 | int(lsr(u__0, 18)))
                    caml_bytes_unsafe_set(
                        b__0[1], int(pos + 1), 128 | int(lsr(u__0, 12)) & 63
                    )
                    caml_bytes_unsafe_set(
                        b__0[1], int(pos + 2), 128 | int(lsr(u__0, 6)) & 63
                    )
                    caml_bytes_unsafe_set(b__0[1], int(pos + 3), 128 | u__0 & 63)
                    b__0[2] = int(pos + 4)
                    return 0
                pos__0 = b__0[2]
                if b__0[3] < int(pos__0 + 3):
                    resize(b__0, 3)
                caml_bytes_unsafe_set(b__0[1], pos__0, 224 | int(lsr(u__0, 12)))
                caml_bytes_unsafe_set(
                    b__0[1], int(pos__0 + 1), 128 | int(lsr(u__0, 6)) & 63
                )
                caml_bytes_unsafe_set(b__0[1], int(pos__0 + 2), 128 | u__0 & 63)
                b__0[2] = int(pos__0 + 3)
                return 0
            pos__1 = b__0[2]
            if b__0[3] < int(pos__1 + 2):
                resize(b__0, 2)
            caml_bytes_unsafe_set(b__0[1], pos__1, 192 | int(lsr(u__0, 6)))
            caml_bytes_unsafe_set(b__0[1], int(pos__1 + 1), 128 | u__0 & 63)
            b__0[2] = int(pos__1 + 2)
            return 0
        return add_char(b__0, u__0)
    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, c]))


def add_utf_16be_uchar(b, u):
    u__0 = call1(Uchar[10], u)
    if 0 <= u__0:
        if 65535 < u__0:
            if 1114111 < u__0:
                raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, d]))
            u__1 = int(u__0 + -65536)
            hi = 55296 | int(lsr(u__1, 10))
            lo = 56320 | u__1 & 1023
            pos = b[2]
            if b[3] < int(pos + 4):
                resize(b, 4)
            caml_bytes_unsafe_set(b[1], pos, int(lsr(hi, 8)))
            caml_bytes_unsafe_set(b[1], int(pos + 1), hi & 255)
            caml_bytes_unsafe_set(b[1], int(pos + 2), int(lsr(lo, 8)))
            caml_bytes_unsafe_set(b[1], int(pos + 3), lo & 255)
            b[2] = int(pos + 4)
            return 0
        pos__0 = b[2]
        if b[3] < int(pos__0 + 2):
            resize(b, 2)
        caml_bytes_unsafe_set(b[1], pos__0, int(lsr(u__0, 8)))
        caml_bytes_unsafe_set(b[1], int(pos__0 + 1), u__0 & 255)
        b[2] = int(pos__0 + 2)
        return 0
    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, e]))


def add_utf_16le_uchar(b, u):
    u__0 = call1(Uchar[10], u)
    if 0 <= u__0:
        if 65535 < u__0:
            if 1114111 < u__0:
                raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, f]))
            u__1 = int(u__0 + -65536)
            hi = 55296 | int(lsr(u__1, 10))
            lo = 56320 | u__1 & 1023
            pos = b[2]
            if b[3] < int(pos + 4):
                resize(b, 4)
            caml_bytes_unsafe_set(b[1], pos, hi & 255)
            caml_bytes_unsafe_set(b[1], int(pos + 1), int(lsr(hi, 8)))
            caml_bytes_unsafe_set(b[1], int(pos + 2), lo & 255)
            caml_bytes_unsafe_set(b[1], int(pos + 3), int(lsr(lo, 8)))
            b[2] = int(pos + 4)
            return 0
        pos__0 = b[2]
        if b[3] < int(pos__0 + 2):
            resize(b, 2)
        caml_bytes_unsafe_set(b[1], pos__0, u__0 & 255)
        caml_bytes_unsafe_set(b[1], int(pos__0 + 1), int(lsr(u__0, 8)))
        b[2] = int(pos__0 + 2)
        return 0
    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, g]))


def add_substring(b, s, offset, len):
    m = 1 if offset < 0 else 0
    if m:
        n = m
    else:
        o = 1 if len < 0 else 0
        n = o if o else (1 if int(caml_ml_string_length(s) - len) < offset else 0)
    if n:
        call1(Pervasives[1], cst_Buffer_add_substring_add_subbytes)
    new_position = int(b[2] + len)
    if b[3] < new_position:
        resize(b, len)
    call5(Bytes[12], s, offset, b[1], b[2], len)
    b[2] = new_position
    return 0


def add_subbytes(b, s, offset, len):
    return add_substring(b, call1(Bytes[42], s), offset, len)


def add_string(b, s):
    len = caml_ml_string_length(s)
    new_position = int(b[2] + len)
    if b[3] < new_position:
        resize(b, len)
    call5(Bytes[12], s, 0, b[1], b[2], len)
    b[2] = new_position
    return 0


def add_bytes(b, s):
    return add_string(b, call1(Bytes[42], s))


def add_buffer(b, bs):
    return add_subbytes(b, bs[1], 0, bs[2])


def add_channel_rec(b, ic, len):
    len__0 = len
    while True:
        l = 1 if 0 < len__0 else 0
        if l:
            n = call4(Pervasives[72], ic, b[1], b[2], len__0)
            b[2] = int(b[2] + n)
            if 0 is n:
                raise (empty["caml_wrap_thrown_exception"](End_of_file))
            len__1 = int(len__0 - n)
            len__0 = len__1
            continue
        return l


def add_channel(b, ic, len):
    j = 1 if len < 0 else 0
    k = j if j else (1 if Sys[13] < len else 0)
    if k:
        call1(Pervasives[1], cst_Buffer_add_channel)
    if b[3] < int(b[2] + len):
        resize(b, len)
    return add_channel_rec(b, ic, len)


def output_buffer(oc, b):
    return call4(Pervasives[56], oc, b[1], 0, b[2])


def closing(param):
    if 40 is param:
        return 41
    if 123 is param:
        return 125
    raise (empty["caml_wrap_thrown_exception"]([0, Assert_failure, h]))


def advance_to_closing(opening, closing, k, s, start):
    def advance(k, i, lim):
        k__0 = k
        i__0 = i
        while True:
            if lim <= i__0:
                raise (empty["caml_wrap_thrown_exception"](Not_found))
            if caml_string_get(s, i__0) is opening:
                i__1 = int(i__0 + 1)
                k__1 = int(k__0 + 1)
                k__0 = k__1
                i__0 = i__1
                continue
            if caml_string_get(s, i__0) is closing:
                if 0 is k__0:
                    return i__0
                i__2 = int(i__0 + 1)
                k__2 = int(k__0 + -1)
                k__0 = k__2
                i__0 = i__2
                continue
            i__3 = int(i__0 + 1)
            i__0 = i__3
            continue

    return advance(k, start, caml_ml_string_length(s))


def advance_to_non_alpha(s, start):
    def advance(i, lim):
        i__0 = i
        while True:
            if lim <= i__0:
                return lim
            match = caml_string_get(s, i__0)
            switch__0 = (
                (
                    (0 if 123 <= match else 1)
                    if 97 <= match
                    else (1 if 95 is match else 0)
                )
                if 91 <= match
                else (
                    (1 if 65 <= match else 0)
                    if 58 <= match
                    else (1 if 48 <= match else 0)
                )
            )
            if switch__0:
                i__1 = int(i__0 + 1)
                i__0 = i__1
                continue
            return i__0

    return advance(start, caml_ml_string_length(s))


def find_ident(s, start, lim):
    if lim <= start:
        raise (empty["caml_wrap_thrown_exception"](Not_found))
    c = caml_string_get(s, start)
    if 40 is not c:
        if 123 is not c:
            stop__0 = advance_to_non_alpha(s, int(start + 1))
            return [0, call3(String[4], s, start, int(stop__0 - start)), stop__0]
    new_start = int(start + 1)
    stop = advance_to_closing(c, closing(c), 0, s, new_start)
    return [
        0,
        call3(String[4], s, new_start, int(int(stop - start) + -1)),
        int(stop + 1),
    ]


def add_substitute(b, f, s):
    lim = caml_ml_string_length(s)

    def subst(previous, i):
        previous__0 = previous
        i__0 = i
        while True:
            if i__0 < lim:
                current = caml_string_get(s, i__0)
                if 36 is current:
                    if 92 is previous__0:
                        add_char(b, current)
                        i__1 = int(i__0 + 1)
                        previous__0 = 32
                        i__0 = i__1
                        continue
                    j = int(i__0 + 1)
                    match = find_ident(s, j, lim)
                    i__2 = match[2]
                    ident = match[1]
                    add_string(b, call1(f, ident))
                    previous__0 = 32
                    i__0 = i__2
                    continue
                if 92 is previous__0:
                    add_char(b, 92)
                    add_char(b, current)
                    i__3 = int(i__0 + 1)
                    previous__0 = 32
                    i__0 = i__3
                    continue
                if 92 is current:
                    i__4 = int(i__0 + 1)
                    previous__0 = current
                    i__0 = i__4
                    continue
                add_char(b, current)
                i__5 = int(i__0 + 1)
                previous__0 = current
                i__0 = i__5
                continue
            i = 1 if 92 is previous__0 else 0
            return add_char(b, previous__0) if i else i

    return subst(32, 0)


def truncate(b, len):
    if 0 <= len:
        if not (length(b) < len):
            b[2] = len
            return 0
    return call1(Pervasives[1], cst_Buffer_truncate)


Buffer = [
    0,
    create,
    contents,
    to_bytes,
    sub,
    blit,
    nth,
    length,
    clear,
    reset,
    add_char,
    add_utf_8_uchar,
    add_utf_16le_uchar,
    add_utf_16be_uchar,
    add_string,
    add_bytes,
    add_substring,
    add_subbytes,
    add_substitute,
    add_buffer,
    add_channel,
    output_buffer,
    truncate,
]
empty["caml_register_global"](22, Buffer, "Buffer")
