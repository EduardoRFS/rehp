caml_wrap_exception = empty["caml_wrap_exception"]
global_data = empty["caml_get_global_data"]()
cst_d = empty["caml_new_string"]("%d")
Failure = global_data["Failure"]
zero = 0
one = 1
minus_one = -1


def succ(n):
    return int(n + 1)


def pred(n):
    return int(n - 1)


def abs(n):
    return n if empty["caml_greaterequal"](n, 0) else int(-(n))


min_int = -2147483648
max_int = 2147483647


def lognot(n):
    return n ^ -1


def to_string(n):
    return empty["caml_format_int"](cst_d, n)


def of_string_opt(s):
    try:
        b = [0, empty["caml_int_of_string"](s)]
        return b
    except Exception as c:
        c = caml_wrap_exception(c)
        if c[1] is Failure:
            return 0
        raise (empty["caml_wrap_thrown_exception_reraise"](c))


def compare(x, y):
    return empty["caml_int_compare"](x, y)


def equal(x, y):
    return 1 if 0 is compare(x, y) else 0


Int32 = [
    0,
    zero,
    one,
    minus_one,
    succ,
    pred,
    abs,
    max_int,
    min_int,
    lognot,
    of_string_opt,
    to_string,
    compare,
    equal,
]
empty["caml_register_global"](11, Int32, "Int32")
